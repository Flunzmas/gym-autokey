\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Nov 08 15:24:42 CET 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:on , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "src";

\proofObligation "#Proof Obligation Settings
#Fri Nov 08 15:24:42 CET 2019
contract=BinarySearch[BinarySearch\\:\\:search([I,int)].JML normal_behavior operation contract.0
name=BinarySearch[BinarySearch\\:\\:search([I,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Andy" ) (keyVersion "2bbea99a67"))

(autoModeTime "317")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "a,v,result,exc,heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "eqSymm" (formula "6") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "5"))
 (builtin "One Step Simplification" (formula "2"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "4") (term "1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,0,0"))
(rule "assignment" (formula "6") (term "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "commute_and" (formula "4") (term "0,0,0,0"))
(rule "commute_and_2" (formula "4") (term "0,0,0"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_search,savedHeapBefore_search,_aBefore_search,_vBefore_search"))
 (builtin "One Step Simplification" (formula "6"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "l"))
(rule "assignment" (formula "6") (term "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "r"))
(rule "compound_subtraction_1" (formula "6") (term "1") (inst "#v=x"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "x"))
(rule "assignment_read_length" (formula "6"))
(branch "Normal Execution (_a != null)"
    (builtin "One Step Simplification" (formula "6"))
   (rule "assignmentSubtractionInt" (formula "6") (term "1"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "translateJavaSubInt" (formula "6") (term "0,1,0"))
   (rule "polySimp_elimSub" (formula "6") (term "0,1,0"))
   (rule "mul_literals" (formula "6") (term "1,0,1,0"))
   (rule "polySimp_addComm0" (formula "6") (term "0,1,0"))
   (rule "ifUnfold" (formula "6") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "6") (term "1") (newnames "x_1"))
   (rule "compound_equality_comparison_1" (formula "6") (term "1") (inst "#v0=x_2"))
   (rule "variableDeclarationAssign" (formula "6") (term "1"))
   (rule "variableDeclaration" (formula "6") (term "1") (newnames "x_2"))
   (rule "assignment_read_length" (formula "6"))
   (branch "Normal Execution (_a != null)"
       (builtin "One Step Simplification" (formula "6"))
      (rule "equality_comparison_simple" (formula "6") (term "1"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "ifSplit" (formula "6"))
      (branch "if x_1 true"
          (builtin "One Step Simplification" (formula "7"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "methodCallReturn" (formula "7") (term "1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "assignment" (formula "7") (term "1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "methodCallEmpty" (formula "7") (term "1"))
         (rule "tryEmpty" (formula "7") (term "1"))
         (rule "emptyModality" (formula "7") (term "1"))
          (opengoal " ")
      )
      (branch "if x_1 false"
          (builtin "One Step Simplification" (formula "7"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "ifUnfold" (formula "7") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_3"))
         (rule "compound_equality_comparison_1" (formula "7") (term "1") (inst "#v0=x_4"))
         (rule "variableDeclarationAssign" (formula "7") (term "1"))
         (rule "variableDeclaration" (formula "7") (term "1") (newnames "x_4"))
         (rule "assignment_read_length" (formula "7"))
         (branch "Normal Execution (_a != null)"
             (builtin "One Step Simplification" (formula "7"))
            (rule "equality_comparison_simple" (formula "7") (term "1"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "ifSplit" (formula "7"))
            (branch "if x_3 true"
                (builtin "One Step Simplification" (formula "8"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "returnUnfold" (formula "8") (term "1") (inst "#v0=x"))
               (rule "variableDeclarationAssign" (formula "8") (term "1"))
               (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_5"))
               (rule "condition_not_simple" (formula "8") (term "1") (inst "#v0=x_6"))
               (rule "variableDeclarationAssign" (formula "8") (term "1"))
               (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_6"))
               (rule "compound_equality_comparison_1" (formula "8") (term "1") (inst "#v0=x_7"))
               (rule "variableDeclarationAssign" (formula "8") (term "1"))
               (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_7"))
               (rule "assignment_array2" (formula "8"))
               (branch "Normal Execution (_a != null)"
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "equality_comparison_simple" (formula "8") (term "1"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "condition_simple" (formula "8") (term "1"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "methodCallReturn" (formula "8") (term "1"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "assignment" (formula "8") (term "1"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "methodCallEmpty" (formula "8") (term "1"))
                  (rule "tryEmpty" (formula "8") (term "1"))
                  (rule "emptyModality" (formula "8") (term "1"))
                   (opengoal " ")
               )
               (branch "Null Reference (_a = null)"
                   (opengoal " ")
               )
               (branch "Index Out of Bounds (_a != null, but 0 Out of Bounds!)"
                   (opengoal " ")
               )
            )
            (branch "if x_3 false"
                (builtin "One Step Simplification" (formula "8"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "arrayLengthNotNegative" (formula "4") (term "1,1,0,0,0,0"))
               (rule "arrayLengthIsAnInt" (formula "5") (term "1,1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
                (opengoal " ")
            )
         )
         (branch "Null Reference (_a = null)"
             (opengoal " ")
         )
      )
   )
   (branch "Null Reference (_a = null)"
       (opengoal " ")
   )
)
(branch "Null Reference (_a = null)"
    (opengoal " ")
)
)
}
