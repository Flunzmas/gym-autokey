\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Nov 10 13:58:42 CET 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:on , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource ".";

\proofObligation "#Proof Obligation Settings
#Sun Nov 10 13:58:42 CET 2019
contract=RemoveDup[RemoveDup\\:\\:contains([I,int,int)].JML normal_behavior operation contract.0
name=RemoveDup[RemoveDup\\:\\:contains([I,int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Andy" ) (keyVersion "2bbea99a67"))

(autoModeTime "162")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "a,len,v,result,exc,heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "7") (term "0,0,1,0,1"))
(rule "eqSymm" (formula "7") (term "0,0,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "6"))
 (builtin "One Step Simplification" (formula "2"))
(rule "inEqSimp_commuteLeq" (formula "4"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,0,0,0,0,0,1"))
(rule "assignment" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_contains,savedHeapBefore_contains,_aBefore_contains,_lenBefore_contains,_vBefore_contains"))
 (builtin "One Step Simplification" (formula "7"))
(rule "for_to_while" (formula "7") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "i"))
(rule "assignment" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
 (builtin "Loop Invariant" (formula "7") (newnames "variant,b,heapBefore_LOOP,iBefore_LOOP,i_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
(branch "Well-Definedness"
    (opengoal " ")
)
(branch "Invariant Initially Valid"
    (opengoal " ")
)
(branch "Body Preserves Invariant"
    (builtin "One Step Simplification" (formula "9"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "translateJavaSubInt" (formula "9") (term "0,1,1,1,0,1"))
   (rule "translateJavaSubInt" (formula "9") (term "0,1,1,1,1,0,1,1"))
   (rule "andLeft" (formula "7"))
   (rule "impRight" (formula "10"))
   (rule "andLeft" (formula "8"))
   (rule "eqSymm" (formula "12") (term "0,0,1,0,1,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "12") (term "0,1,1,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "12") (term "0,1,1,1,0"))
   (rule "polySimp_addComm0" (formula "12") (term "0,1,1,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "12") (term "0,1,1,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,1,0,0,1,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,1,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "9"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "variableDeclarationAssign" (formula "1") (term "1"))
   (rule "variableDeclarationAssign" (formula "12") (term "1"))
   (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_1"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "rtrn"))
   (rule "assignment" (formula "12") (term "1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "returnExpr"))
   (rule "variableDeclarationAssign" (formula "12") (term "1"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "exc_1"))
   (rule "assignment" (formula "12") (term "1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "thrownExc"))
   (rule "blockThrow" (formula "12") (term "1,0,0,1"))
   (rule "blockReturn" (formula "12") (term "1,0,1,0,1"))
   (rule "blockThrow" (formula "12") (term "1,0,0,1"))
   (rule "blockReturn" (formula "12") (term "1,0,1,0,1"))
   (rule "boxToDiamond" (formula "1") (term "1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "commute_and_2" (formula "9") (term "0,0"))
   (rule "commute_and" (formula "9") (term "0,0,0"))
   (rule "commute_and_2" (formula "9") (term "0,0"))
   (rule "less_than_comparison_simple" (formula "10") (term "1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "methodCallEmpty" (formula "10") (term "1"))
   (rule "emptyModality" (formula "10") (term "1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "notRight" (formula "10"))
   (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "x"))
   (rule "less_than_comparison_simple" (formula "12") (term "1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "replace_known_left" (formula "12") (term "0,0,1,0") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "arrayLengthNotNegative" (formula "6") (term "0"))
   (rule "arrayLengthIsAShort" (formula "7") (term "0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "ifSplit" (formula "13"))
   (branch "if x true"
       (builtin "One Step Simplification" (formula "14"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "ifUnfold" (formula "13") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_1"))
      (rule "compound_equality_comparison_1" (formula "13") (term "1") (inst "#v0=x_2"))
      (rule "variableDeclarationAssign" (formula "13") (term "1"))
      (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_2"))
      (rule "assignment_array2" (formula "13"))
      (branch "Normal Execution (_a != null)"
          (builtin "One Step Simplification" (formula "13"))
         (rule "equality_comparison_simple" (formula "13") (term "1"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "ifSplit" (formula "13"))
         (branch "if x_1 true"
             (builtin "One Step Simplification" (formula "14"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "assignment" (formula "14") (term "1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "assignment" (formula "14") (term "1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "blockBreakNoLabel" (formula "14") (term "1"))
            (rule "blockBreakLabel" (formula "14") (term "1"))
            (rule "blockEmpty" (formula "14") (term "1"))
            (rule "tryEmpty" (formula "14") (term "1"))
            (rule "methodCallEmpty" (formula "14") (term "1"))
            (rule "emptyModality" (formula "14") (term "1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "methodCallReturn" (formula "14") (term "1"))
            (rule "assignment" (formula "14") (term "1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "methodCallEmpty" (formula "14") (term "1"))
            (rule "tryEmpty" (formula "14") (term "1"))
            (rule "emptyModality" (formula "14") (term "1"))
             (opengoal " ")
         )
         (branch "if x_1 false"
             (builtin "One Step Simplification" (formula "14"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "blockEmpty" (formula "14") (term "1"))
            (rule "postincrement" (formula "14") (term "1"))
            (rule "compound_int_cast_expression" (formula "14") (term "1") (inst "#v=x"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_3"))
            (rule "unusedLabel" (formula "14") (term "1"))
            (rule "remove_parentheses_right" (formula "14") (term "1"))
            (rule "assignmentAdditionInt" (formula "14") (term "1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "translateJavaAddInt" (formula "14") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "14") (term "0,1,0"))
            (rule "widening_identity_cast_5" (formula "14") (term "1"))
            (rule "assignment" (formula "14") (term "1"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "tryEmpty" (formula "14") (term "1"))
            (rule "methodCallEmpty" (formula "14") (term "1"))
            (rule "emptyModality" (formula "14") (term "1"))
             (builtin "One Step Simplification" (formula "14"))
             (opengoal " ")
         )
      )
      (branch "Null Reference (_a = null)"
          (opengoal " ")
      )
      (branch "Index Out of Bounds (_a != null, but i Out of Bounds!)"
          (opengoal " ")
      )
   )
   (branch "if x false"
       (builtin "One Step Simplification" (formula "14"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Use Case"
    (builtin "One Step Simplification" (formula "9"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "7"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "b_1"))
   (rule "blockEmpty" (formula "11") (term "1,0,1"))
   (rule "commute_and_2" (formula "9") (term "0,0"))
   (rule "commute_and" (formula "9") (term "0,0,0"))
   (rule "commute_and_2" (formula "9") (term "0,0"))
   (rule "less_than_comparison_simple" (formula "11") (term "1"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "methodCallEmpty" (formula "11") (term "1"))
   (rule "emptyModality" (formula "11") (term "1"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "impRight" (formula "11"))
   (rule "notLeft" (formula "1"))
   (rule "methodCallReturn" (formula "12") (term "1"))
   (rule "assignment" (formula "12") (term "1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "methodCallEmpty" (formula "12") (term "1"))
   (rule "tryEmpty" (formula "12") (term "1"))
   (rule "emptyModality" (formula "12") (term "1"))
    (opengoal " ")
)
)
}
