\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Nov 12 17:42:27 CET 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=100000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "src";

\proofObligation "#Proof Obligation Settings
#Tue Nov 12 17:42:27 CET 2019
contract=Simple[Simple\\:\\:addWithJump(int,int,int)].JML operation contract.0
name=Simple[Simple\\:\\:addWithJump(int,int,int)].JML operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "christoph" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "1" (keyUser "Andy" ) (keyVersion "2bbea99a67"))

(autoModeTime "50")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "x,y,z,self,result,exc,heapAtPre,o,f"))
(rule "translateJavaAddInt" (formula "1") (term "1,0,1,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "9") (term "1,0,0,1,0,1"))
(rule "assignment" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "Class_invariant_axiom_for_Simple" (formula "7") (inst "sk=sk_0") (ifseqformula "3"))
(branch "Use Axiom"
   (rule "true_left" (formula "7"))
   (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_addWithJump,savedHeapBefore_addWithJump,_xBefore_addWithJump,_yBefore_addWithJump,_zBefore_addWithJump"))
    (builtin "One Step Simplification" (formula "8"))
    (builtin "Block Contract (Internal)" (formula "8") (newnames "anonOut_heap,result#51,exc#52,heap_Before_BLOCK,savedHeap_Before_BLOCK,z_Before_BLOCK#53,o,f,anonOut__z"))
   (branch "Validity"
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "8")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "1")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")) (ifInst ""  (formula "6")))
      (rule "true_left" (formula "7"))
      (rule "translateJavaAddInt" (formula "8") (term "1,1,0,0,0,1"))
      (rule "eqSymm" (formula "8") (term "1,0,0,1,0,1"))
      (rule "variableDeclarationAssign" (formula "8") (term "1"))
      (rule "variableDeclaration" (formula "8") (term "1") (newnames "exc#52_1"))
      (rule "assignment" (formula "8") (term "1"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "assignmentAdditionInt" (formula "8") (term "1"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "translateJavaAddInt" (formula "8") (term "0,1,0"))
      (rule "break" (formula "8") (term "1"))
      (rule "blockEmpty" (formula "8") (term "1"))
      (rule "tryEmpty" (formula "8") (term "1"))
      (rule "blockEmptyLabel" (formula "8") (term "1"))
      (rule "blockEmpty" (formula "8") (term "1"))
      (rule "methodCallEmpty" (formula "8") (term "1"))
      (rule "emptyModality" (formula "8") (term "1"))
       (opengoal " ")
   )
   (branch "Precondition"
       (opengoal " ")
   )
   (branch "Usage"
       (builtin "One Step Simplification" (formula "7"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "translateJavaAddInt" (formula "7") (term "1,1,0,0,0"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_1"))
      (rule "inequality_comparison_simple" (formula "11") (term "1"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "replace_known_left" (formula "11") (term "0,0,1,0") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "ifSplit" (formula "11"))
      (branch "if x_1 true"
          (builtin "One Step Simplification" (formula "12"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x_1 false"
          (builtin "One Step Simplification" (formula "12"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "blockEmpty" (formula "11") (term "1"))
         (rule "methodCallReturn" (formula "11") (term "1"))
         (rule "assignment" (formula "11") (term "1"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "methodCallEmpty" (formula "11") (term "1"))
         (rule "tryEmpty" (formula "11") (term "1"))
         (rule "emptyModality" (formula "11") (term "1"))
          (opengoal " ")
      )
   )
)
(branch "Show Axiom Satisfiability"
    (builtin "One Step Simplification" (formula "8"))
   (rule "closeTrue" (formula "8"))
)
)
}
