\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Nov 10 15:57:43 CET 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource ".";

\proofObligation "#Proof Obligation Settings
#Sun Nov 10 15:57:43 CET 2019
contract=ThreeWayQs[ThreeWayQs\\:\\:case_right([I,int,int,int,int)].JML normal_behavior operation contract.0
name=ThreeWayQs[ThreeWayQs\\:\\:case_right([I,int,int,int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "jonas" ) (keyVersion "6406a06c4ab8dc3bb07d2223e75512cfa32e27be"))
(keyLog "1" (keyUser "Andy" ) (keyVersion "2bbea99a67"))

(autoModeTime "21398")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "a,left,right,k,pivot,exc,heapAtPre,o,f"))
(rule "translateJavaAddInt" (formula "1") (term "1,1,0,0,0,0,0,0,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "17"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "eqSymm" (formula "19") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "18"))
 (builtin "One Step Simplification" (formula "2"))
(rule "polySimp_addComm0" (formula "19") (term "1,1,0,0,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,1,0,0,1,1,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,0,1,1,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,1,0,0,1,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,0,1,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0,0,1,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "4"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "15"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "16") (term "1,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "9"))
(rule "inEqSimp_commuteLeq" (formula "8"))
(rule "assignment" (formula "19") (term "1"))
 (builtin "One Step Simplification" (formula "19"))
(rule "elementOfUnion" (formula "19") (term "0,0,0,0,1,0,1"))
(rule "array2seqDef" (formula "19") (term "0,1,1,1,1,1,1,1,1,0,0,0,1") (inst "u=u"))
(rule "array2seqDef" (formula "19") (term "1,1,1,1,1,1,1,1,1,0,0,0,1") (inst "u=u"))
(rule "elementOfArrayRange" (formula "19") (term "1,0,0,0,0,1,0,1") (inst "iv=iv"))
(rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,0,1,1,0,0,0,0,1,0,1"))
(rule "elementOfUnion" (formula "19") (term "0,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "19") (term "0,0,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "19") (term "1,0,0,0,0,0,1,0,1"))
(rule "commute_and" (formula "12") (term "0,0"))
(rule "commute_and" (formula "11") (term "0,0"))
(rule "commute_and" (formula "16") (term "0,0"))
(rule "commute_and" (formula "16") (term "0,0,1,0"))
(rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_case_right,savedHeapBefore_case_right,_aBefore_case_right,_kBefore_case_right,_leftBefore_case_right,_pivotBefore_case_right,_rightBefore_case_right"))
 (builtin "One Step Simplification" (formula "19"))
(rule "variableDeclarationAssign" (formula "19") (term "1"))
(rule "variableDeclaration" (formula "19") (term "1") (newnames "ak"))
(rule "assignment_array2" (formula "19"))
(branch "Normal Execution (_a != null)"
    (builtin "One Step Simplification" (formula "19"))
    (builtin "Loop Invariant" (formula "19") (newnames "variant,b,heapBefore_LOOP,heap_After_LOOP,anon_heap_LOOP,o,f"))
   (branch "Invariant Initially Valid"
      (rule "andRight" (formula "19"))
      (branch "Case 1"
          (opengoal " ")
      )
      (branch "Case 2"
          (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")) (ifInst ""  (formula "18")) (ifInst ""  (formula "2")) (ifInst ""  (formula "14")) (ifInst ""  (formula "6")) (ifInst ""  (formula "10")) (ifInst ""  (formula "7")))
          (opengoal " ")
      )
   )
   (branch "Body Preserves Invariant"
       (opengoal " ")
   )
   (branch "Use Case"
       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "6")))
       (builtin "One Step Simplification" (formula "21"))
      (rule "translateJavaAddInt" (formula "19") (term "1,1,0,0,0,0"))
      (rule "translateJavaSubInt" (formula "19") (term "0,2,0,1,0,0,0,0,0,0,0,0,0,0"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "eqSymm" (formula "30"))
      (rule "polySimp_elimSub" (formula "20") (term "0,2,0"))
      (rule "mul_literals" (formula "20") (term "1,0,2,0"))
      (rule "polySimp_addComm0" (formula "26") (term "1"))
      (rule "polySimp_addComm0" (formula "20") (term "0,2,0"))
       (opengoal " ")
   )
   (branch "Use Case"
       (opengoal " ")
   )
)
(branch "Null Reference (_a = null)"
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
   (rule "closeFalse" (formula "1"))
)
(branch "Index Out of Bounds (_a != null, but _k Out of Bounds!)"
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
    (builtin "One Step Simplification" (formula "20"))
    (opengoal " ")
)
)
}
