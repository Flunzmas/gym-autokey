\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Nov 10 15:51:52 CET 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsCheckingOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource ".";

\proofObligation "#Proof Obligation Settings
#Sun Nov 10 15:51:53 CET 2019
contract=DualPivotQuicksort[DualPivotQuicksort\\:\\:sort([I)].JML normal_behavior operation contract.0
name=DualPivotQuicksort[DualPivotQuicksort\\:\\:sort([I)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mulbrich" ) (keyVersion "cbbc782689187fd0e8386ae09174c87f2c75b7a9"))
(keyLog "1" (keyUser "Andy" ) (keyVersion "2bbea99a67"))

(autoModeTime "11590")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "a,exc,heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "eqSymm" (formula "6") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "5"))
 (builtin "One Step Simplification" (formula "2"))
(rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,0"))
(rule "assignment" (formula "6") (term "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "elementOfUnion" (formula "6") (term "0,0,0,0,1,0,1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "elementOfUnion" (formula "6") (term "0,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "6") (term "1,0,0,0,0,0,1,0,1"))
(rule "elementOfUnion" (formula "6") (term "0,0,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "6") (term "1,0,0,0,0,0,0,1,0,1"))
(rule "elementOfUnion" (formula "6") (term "0,0,0,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "6") (term "1,0,0,0,0,0,0,0,1,0,1"))
(rule "elementOfUnion" (formula "6") (term "0,0,0,0,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "6") (term "1,0,0,0,0,0,0,0,0,1,0,1"))
(rule "elementOfUnion" (formula "6") (term "0,0,0,0,0,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "6") (term "1,0,0,0,0,0,0,0,0,0,1,0,1"))
(rule "elementOfUnion" (formula "6") (term "0,0,0,0,0,0,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "6") (term "1,0,0,0,0,0,0,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "6") (term "0,0,0,0,0,0,0,0,0,0,0,1,0,1"))
(rule "commute_and_2" (formula "4") (term "0,0"))
(rule "commute_and" (formula "4") (term "0,0,0"))
(rule "commute_and_2" (formula "4") (term "0,0"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_sort,savedHeapBefore_sort"))
 (builtin "One Step Simplification" (formula "6"))
(rule "methodCallUnfoldArguments" (formula "6") (term "1"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "var"))
(rule "assignment" (formula "6") (term "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "var_1"))
(rule "assignment" (formula "6") (term "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "var_2"))
(rule "compound_subtraction_1" (formula "6") (term "1") (inst "#v=x"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "x"))
(rule "assignment_read_length" (formula "6"))
(branch "Normal Execution (_a != null)"
    (builtin "One Step Simplification" (formula "6"))
   (rule "assignmentSubtractionInt" (formula "6") (term "1"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "translateJavaSubInt" (formula "6") (term "0,1,0"))
   (rule "polySimp_elimSub" (formula "6") (term "1,0,1,0"))
   (rule "mul_literals" (formula "6") (term "1,1,0,1,0"))
   (rule "polySimp_elimSub" (formula "6") (term "0,0,0,1,0"))
   (rule "mul_literals" (formula "6") (term "1,0,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "6") (term "1,0,1,0"))
   (rule "polySimp_addComm0" (formula "6") (term "0,0,0,1,0"))
   (rule "variableDeclarationAssign" (formula "6") (term "1"))
   (rule "variableDeclaration" (formula "6") (term "1") (newnames "var_3"))
   (rule "assignment" (formula "6") (term "1"))
    (builtin "One Step Simplification" (formula "6"))
    (builtin "Use Operation Contract" (formula "6") (newnames "heapBefore_sort_0,exc_0,heapAfter_sort,anon_heap_sort") (contract "DualPivotQuicksort[DualPivotQuicksort::sort([I,int,int,boolean)].JML normal_behavior operation contract.0"))
   (branch "Post (sort)"
       (builtin "One Step Simplification" (formula "6"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "11"))
      (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "7") (term "1,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "9") (term "1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0"))
      (rule "pullOutSelect" (formula "12") (term "0") (inst "selectSK=DualPivotQuicksort_great_0"))
      (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "elementOfUnion" (formula "12") (term "0,0"))
      (rule "elementOfArrayRange" (formula "12") (term "1,0,0") (inst "iv=iv"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "elementOfUnion" (formula "12") (term "0,0"))
      (rule "elementOfSingleton" (formula "12") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "elementOfUnion" (formula "12") (term "0,0"))
      (rule "elementOfSingleton" (formula "12") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "elementOfUnion" (formula "12") (term "0,0"))
      (rule "elementOfSingleton" (formula "12") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "elementOfUnion" (formula "12") (term "0,0"))
      (rule "elementOfSingleton" (formula "12") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "elementOfUnion" (formula "12") (term "0,0"))
      (rule "elementOfSingleton" (formula "12") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "elementOfUnion" (formula "12") (term "0,0"))
      (rule "elementOfSingleton" (formula "12") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "elementOfSingleton" (formula "12") (term "0,0"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "applyEqReverse" (formula "13") (term "0") (ifseqformula "12"))
      (rule "hideAuxiliaryEq" (formula "12"))
      (rule "pullOutSelect" (formula "11") (term "0") (inst "selectSK=DualPivotQuicksort_less_0"))
      (rule "simplifySelectOfAnonEQ" (formula "11") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "elementOfUnion" (formula "11") (term "0,0"))
      (rule "elementOfArrayRange" (formula "11") (term "1,0,0") (inst "iv=iv"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "elementOfUnion" (formula "11") (term "0,0"))
      (rule "elementOfSingleton" (formula "11") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "elementOfUnion" (formula "11") (term "0,0"))
      (rule "elementOfSingleton" (formula "11") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "elementOfUnion" (formula "11") (term "0,0"))
      (rule "elementOfSingleton" (formula "11") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "elementOfUnion" (formula "11") (term "0,0"))
      (rule "elementOfSingleton" (formula "11") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "elementOfUnion" (formula "11") (term "0,0"))
      (rule "elementOfSingleton" (formula "11") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "elementOfUnion" (formula "11") (term "0,0"))
      (rule "elementOfSingleton" (formula "11") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "applyEqReverse" (formula "12") (term "0") (ifseqformula "11"))
      (rule "hideAuxiliaryEq" (formula "11"))
      (rule "commuteUnion" (formula "6") (term "0,0,0,0,0,0,1,0"))
      (rule "commuteUnion" (formula "6") (term "0,0,0,0,0,1,0"))
      (rule "commuteUnion_2" (formula "6") (term "0,0,0,0,1,0"))
      (rule "commuteUnion_2" (formula "6") (term "0,0,0,1,0"))
      (rule "commuteUnion_2" (formula "6") (term "0,0,1,0"))
      (rule "commuteUnion_2" (formula "6") (term "0,1,0"))
      (rule "commute_and_2" (formula "7") (term "0,0"))
      (rule "commute_and_2" (formula "8") (term "0,0"))
      (rule "commute_and_2" (formula "9") (term "0,0"))
      (rule "commute_and_2" (formula "10") (term "0,0"))
      (rule "commute_and_2" (formula "9") (term "0,0,1,0"))
      (rule "commute_and_2" (formula "7") (term "0,0,1,0"))
      (rule "commute_and_2" (formula "8") (term "0,0,1,0"))
      (rule "methodCallEmpty" (formula "15") (term "1"))
      (rule "commute_and" (formula "7") (term "0,0,0"))
      (rule "commute_and" (formula "8") (term "0,0,0"))
      (rule "commute_and_2" (formula "8") (term "0,0"))
      (rule "commute_and" (formula "9") (term "0,0,0"))
      (rule "commute_and" (formula "10") (term "0,0,0"))
      (rule "commute_and_2" (formula "10") (term "0,0"))
      (rule "commute_and" (formula "9") (term "0,0,0,1,0"))
      (rule "commute_and" (formula "7") (term "0,0,0,1,0"))
      (rule "commute_and" (formula "8") (term "0,0,0,1,0"))
      (rule "commute_and_2" (formula "8") (term "0,0,1,0"))
      (rule "tryEmpty" (formula "15") (term "1"))
      (rule "associativeLawUnion" (formula "6") (term "0,1,0"))
      (rule "emptyModality" (formula "15") (term "1"))
      (rule "andRight" (formula "15"))
      (branch "Case 1"
          (builtin "One Step Simplification" (formula "15"))
         (rule "closeTrue" (formula "15"))
      )
      (branch "Case 2"
          (builtin "One Step Simplification" (formula "15"))
         (rule "allRight" (formula "15") (inst "sk=f_0"))
         (rule "allRight" (formula "15") (inst "sk=o_0"))
         (rule "orRight" (formula "15"))
         (rule "orRight" (formula "15"))
         (rule "orRight" (formula "15"))
         (rule "orRight" (formula "15"))
         (rule "orRight" (formula "15"))
         (rule "orRight" (formula "15"))
         (rule "orRight" (formula "15"))
         (rule "orRight" (formula "15"))
         (rule "orRight" (formula "15"))
         (rule "eqSymm" (formula "24"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,0"))
         (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0,0"))
         (rule "add_literals" (formula "8") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "9") (term "0,1,0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1,0,1,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,0,1,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0,0,1,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0"))
         (rule "mul_literals" (formula "8") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1,0,0,0"))
         (rule "mul_literals" (formula "4") (term "0,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,1,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "7") (term "0,1,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0,0,1,0,1,0"))
         (rule "polySimp_elimOne" (formula "7") (term "0,0,1,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "8") (term "0,1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,0,1,0"))
         (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=f_0_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
         (rule "eqSymm" (formula "25"))
         (rule "elementOfUnion" (formula "1") (term "0,0,0"))
         (rule "elementOfArrayRange" (formula "1") (term "1,0,0,0") (inst "iv=iv"))
         (rule "eqSymm" (formula "1") (term "0,0,0,1,1,0,0,0"))
         (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "23"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfUnion" (formula "1") (term "0,0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
         (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "16"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfUnion" (formula "1") (term "0,0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
         (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "17"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfUnion" (formula "1") (term "0,0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
         (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "22"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfUnion" (formula "1") (term "0,0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
         (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "21"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfUnion" (formula "1") (term "0,0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
         (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfUnion" (formula "1") (term "0,0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
         (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
         (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Exceptional Post (sort)"
       (builtin "One Step Simplification" (formula "6"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "andLeft" (formula "6"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "1,0") (ifseqformula "6"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "notLeft" (formula "7"))
      (rule "close" (formula "9") (ifseqformula "8"))
   )
   (branch "Case 3"
       (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")) (ifInst ""  (formula "1")) (ifInst ""  (formula "5")) (ifInst ""  (formula "2")))
      (rule "andRight" (formula "6") (userinteraction))
      (branch "Case 1"
         (rule "andRight" (formula "6") (userinteraction))
         (branch "Case 1"
            (rule "expand_inInt" (formula "6") (userinteraction))
            (rule "replace_int_MAX" (formula "6") (term "1,0") (userinteraction))
            (rule "replace_int_MIN" (formula "6") (term "0,1") (userinteraction))
            (rule "leq_literals" (formula "6") (term "0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "leq_literals" (formula "6"))
            (rule "closeTrue" (formula "6"))
         )
         (branch "Case 2"
            (rule "ifthenelse_split" (formula "6") (term "0") (userinteraction))
            (branch "inInt(-1 + a.length) TRUE"
               (rule "close" (formula "7") (ifseqformula "1") (userinteraction))
            )
            (branch "inInt(-1 + a.length) FALSE"
               (rule "expand_inInt" (formula "6") (userinteraction))
               (rule "replace_int_MAX" (formula "6") (term "1,0") (userinteraction))
               (rule "replace_int_MIN" (formula "6") (term "0,1") (userinteraction))
               (rule "arrayLengthNotNegative" (formula "6") (term "1,0,0") (userinteraction))
               (rule "arrayLengthIsAShort" (formula "7") (term "1,0,0") (userinteraction))
               (rule "expand_inShort" (formula "1") (userinteraction))
               (rule "replace_short_MAX" (formula "1") (term "1,0") (userinteraction))
                (opengoal " ")
            )
         )
      )
      (branch "Case 2"
         (rule "ifthenelse_split" (formula "6") (term "0,0,0") (userinteraction))
         (branch "inInt(-1 + a.length) TRUE"
            (rule "translateJavaAddInt" (formula "7") (term "0"))
            (rule "translateJavaSubInt" (formula "7") (term "0,1,0"))
            (rule "translateJavaSubInt" (formula "7") (term "0,0,0,0"))
            (rule "translateJavaSubInt" (formula "7") (term "0,2,0"))
            (rule "polySimp_elimSub" (formula "7") (term "1,0,1,0"))
            (rule "times_zero_2" (formula "7") (term "1,1,0,1,0"))
            (rule "add_zero_right" (formula "7") (term "1,0,1,0"))
            (rule "polySimp_elimSub" (formula "7") (term "0,0,0,1,0"))
            (rule "times_zero_2" (formula "7") (term "1,0,0,0,1,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,0,1,0"))
            (rule "replace_known_left" (formula "7") (term "0,0,1,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "polySimp_elimSub" (formula "7") (term "0,0,0,0,0,0"))
            (rule "times_zero_2" (formula "7") (term "1,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,0,0,0,0"))
            (rule "replace_known_left" (formula "7") (term "0,0,0,0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "polySimp_elimSub" (formula "7") (term "0,0,0,2,0"))
            (rule "times_zero_2" (formula "7") (term "1,0,0,0,2,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,0,2,0"))
            (rule "replace_known_left" (formula "7") (term "0,0,2,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "polySimp_elimSub" (formula "7") (term "0,0,0,0"))
            (rule "times_zero_2" (formula "7") (term "1,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "7") (term "0,0,0"))
            (rule "polySimp_elimSub" (formula "7") (term "0,2,0"))
            (rule "times_zero_2" (formula "7") (term "1,0,2,0"))
            (rule "add_zero_right" (formula "7") (term "0,2,0"))
            (rule "polySimp_addComm1" (formula "7") (term "1,0"))
            (rule "add_literals" (formula "7") (term "0,1,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0,0,0"))
            (rule "add_literals" (formula "7") (term "0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,0"))
            (rule "measuredByCheckEmpty" (formula "7") (ifseqformula "4"))
            (rule "closeTrue" (formula "7"))
         )
         (branch "inInt(-1 + a.length) FALSE"
            (rule "expand_inInt" (formula "6") (userinteraction))
            (rule "replace_int_MIN" (formula "6") (term "0,1") (userinteraction))
            (rule "replace_int_MAX" (formula "6") (term "1,0") (userinteraction))
            (rule "arrayLengthIsAShort" (formula "6") (term "1,0,0") (userinteraction))
            (rule "arrayLengthNotNegative" (formula "7") (term "1,0,0") (userinteraction))
            (rule "translateJavaAddInt" (formula "9") (term "0"))
            (rule "translateJavaSubInt" (formula "9") (term "0,0,0,0"))
            (rule "translateJavaSubInt" (formula "9") (term "0,1,0"))
            (rule "translateJavaSubInt" (formula "9") (term "0,2,0"))
            (rule "polySimp_elimSub" (formula "9") (term "0,0,0,0,0,0"))
            (rule "times_zero_2" (formula "9") (term "1,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0"))
            (rule "polySimp_elimSub" (formula "9") (term "1,0,0,0,0"))
            (rule "times_zero_2" (formula "9") (term "1,1,0,0,0,0"))
            (rule "add_zero_right" (formula "9") (term "1,0,0,0,0"))
            (rule "polySimp_elimSub" (formula "9") (term "0,0,0,1,0"))
            (rule "times_zero_2" (formula "9") (term "1,0,0,0,1,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,0,1,0"))
            (rule "polySimp_elimSub" (formula "9") (term "1,0,1,0"))
            (rule "times_zero_2" (formula "9") (term "1,1,0,1,0"))
            (rule "add_zero_right" (formula "9") (term "1,0,1,0"))
            (rule "polySimp_elimSub" (formula "9") (term "0,0,0,2,0"))
            (rule "times_zero_2" (formula "9") (term "1,0,0,0,2,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,0,2,0"))
            (rule "polySimp_elimSub" (formula "9") (term "1,0,2,0"))
            (rule "times_zero_2" (formula "9") (term "1,1,0,2,0"))
            (rule "add_zero_right" (formula "9") (term "1,0,2,0"))
            (rule "polySimp_addComm0" (formula "9") (term "0,0,0"))
            (rule "polySimp_addComm0" (formula "9") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,0"))
            (rule "measuredByCheckEmpty" (formula "9") (ifseqformula "5"))
            (rule "closeTrue" (formula "9"))
         )
      )
   )
)
(branch "Null Reference (_a = null)"
   (rule "false_right" (formula "7"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
   (rule "closeFalse" (formula "1"))
)
)
}
