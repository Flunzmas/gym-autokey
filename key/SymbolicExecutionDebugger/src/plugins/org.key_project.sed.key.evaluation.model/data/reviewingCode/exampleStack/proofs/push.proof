\profile "Java Profile for Symbolic Execution";

\settings {
"#Proof-Settings-Config-File
#Mon Jul 18 10:14:11 CEST 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=\\#begboolean_equal_2\\#end,\\#begboolean_not_equal_1\\#end,\\#begboolean_not_equal_2\\#end,\\#begtrue_to_not_false\\#end,\\#begfalse_to_not_true\\#end,\\#begboolean_true_commute\\#end,\\#begboolean_false_commute\\#end,\\#begapply_eq_boolean\\#end,\\#begapply_eq_boolean_2\\#end,\\#begapply_eq_boolean_rigid\\#end,\\#begapply_eq_boolean_rigid_2\\#end,\\#begexpand_inByte\\#end,\\#begexpand_inChar\\#end,\\#begexpand_inShort\\#end,\\#begexpand_inInt\\#end,\\#begexpand_inLong\\#end,\\#begreplace_byte_MAX\\#end,\\#begreplace_byte_MIN\\#end,\\#begreplace_char_MAX\\#end,\\#begreplace_char_MIN\\#end,\\#begreplace_short_MAX\\#end,\\#begreplace_short_MIN\\#end,\\#begreplace_int_MAX\\#end,\\#begreplace_int_MIN\\#end,\\#begreplace_long_MAX\\#end,\\#begreplace_long_MIN\\#end,\\#begreplace_byte_RANGE\\#end,\\#begreplace_byte_HALFRANGE\\#end,\\#begreplace_short_RANGE\\#end,\\#begreplace_short_HALFRANGE\\#end,\\#begreplace_char_RANGE\\#end,\\#begreplace_int_RANGE\\#end,\\#begreplace_int_HALFRANGE\\#end,\\#begreplace_long_RANGE\\#end,\\#begreplace_long_HALFRANGE\\#end,\\#begtranslateJavaUnaryMinusInt\\#end,\\#begtranslateJavaUnaryMinusLong\\#end,\\#begtranslateJavaBitwiseNegation\\#end,\\#begtranslateJavaAddInt\\#end,\\#begtranslateJavaAddLong\\#end,\\#begtranslateJavaSubInt\\#end,\\#begtranslateJavaSubLong\\#end,\\#begtranslateJavaMulInt\\#end,\\#begtranslateJavaMulLong\\#end,\\#begtranslateJavaMod\\#end,\\#begtranslateJavaDivInt\\#end,\\#begtranslateJavaDivLong\\#end,\\#begtranslateJavaCastByte\\#end,\\#begtranslateJavaCastShort\\#end,\\#begtranslateJavaCastInt\\#end,\\#begtranslateJavaCastLong\\#end,\\#begtranslateJavaCastChar\\#end,\\#begtranslateJavaShiftRightInt\\#end,\\#begtranslateJavaShiftRightLong\\#end,\\#begtranslateJavaShiftLeftInt\\#end,\\#begtranslateJavaShiftLeftLong\\#end,\\#begtranslateJavaUnsignedShiftRightInt\\#end,\\#begtranslateJavaUnsignedShiftRightLong\\#end,\\#begtranslateJavaBitwiseOrInt\\#end,\\#begtranslateJavaBitwiseOrLong\\#end,\\#begtranslateJavaBitwiseAndInt\\#end,\\#begtranslateJavaBitwiseAndLong\\#end,\\#begtranslateJavaBitwiseXOrInt\\#end,\\#begtranslateJavaBitwiseXOrLong\\#end,\\#begelementOfEmpty\\#end,\\#begelementOfAllLocs\\#end,\\#begelementOfSingleton\\#end,\\#begelementOfUnion\\#end,\\#begelementOfIntersect\\#end,\\#begelementOfSetMinus\\#end,\\#begelementOfAllFields\\#end,\\#begelementOfAllObjects\\#end,\\#begelementOfArrayRange\\#end,\\#begelementOfFreshLocs\\#end,\\#begequalityToElementOf\\#end,\\#begsubsetToElementOf\\#end,\\#begdisjointToElementOf\\#end,\\#begcreatedInHeapToElementOf\\#end,\\#begelementOfEmptyEQ\\#end,\\#begelementOfAllLocsEQ\\#end,\\#begelementOfSingletonEQ\\#end,\\#begelementOfUnionEQ\\#end,\\#begelementOfIntersectEQ\\#end,\\#begelementOfSetMinusEQ\\#end,\\#begelementOfAllFieldsEQ\\#end,\\#begelementOfAllObjectsEQ\\#end,\\#begelementOfArrayRangeEQ\\#end,\\#begelementOfFreshLocsEQ\\#end,\\#begunionWithEmpty1\\#end,\\#begunionWithEmpty2\\#end,\\#begunionWithAllLocs1\\#end,\\#begunionWithAllLocs2\\#end,\\#begintersectWithEmpty1\\#end,\\#begintersectWithEmpty2\\#end,\\#begintersectWithAllLocs1\\#end,\\#begintersectWithAllLocs2\\#end,\\#begsetMinusWithEmpty1\\#end,\\#begsetMinusWithEmpty2\\#end,\\#begsetMinusWithAllLocs\\#end,\\#begsubsetWithEmpty\\#end,\\#begsubsetWithAllLocs\\#end,\\#begdisjointWithEmpty1\\#end,\\#begdisjointWithEmpty2\\#end,\\#begcreatedInHeapWithEmpty\\#end,\\#begcreatedInHeapWithSingleton\\#end,\\#begcreatedInHeapWithUnion\\#end,\\#begcreatedInHeapWithSetMinusFreshLocs\\#end,\\#begcreatedInHeapWithAllFields\\#end,\\#begcreatedInHeapWithArrayRange\\#end,\\#begreferencedObjectIsCreatedRight\\#end,\\#begreferencedObjectIsCreatedRightEQ\\#end,\\#begunionWithItself\\#end,\\#begintersectWithItself\\#end,\\#begsetMinusItself\\#end,\\#begsubsetOfItself\\#end,\\#begselectOfStore\\#end,\\#begselectOfCreate\\#end,\\#begselectOfAnon\\#end,\\#begselectOfMemset\\#end,\\#begonlyCreatedObjectsAreReferenced\\#end,\\#begonlyCreatedObjectsAreInLocSets\\#end,\\#begonlyCreatedObjectsAreInLocSetsEQ\\#end,\\#begarrayLengthNotNegative\\#end,\\#begwellFormedStoreObject\\#end,\\#begwellFormedStoreLocSet\\#end,\\#begwellFormedStorePrimitive\\#end,\\#begwellFormedCreate\\#end,\\#begwellFormedAnon\\#end,\\#begwellFormedMemsetObject\\#end,\\#begwellFormedMemsetLocSet\\#end,\\#begwellFormedMemsetPrimitive\\#end,\\#begselectOfStoreEQ\\#end,\\#begselectOfCreateEQ\\#end,\\#begselectOfAnonEQ\\#end,\\#begselectOfMemsetEQ\\#end,\\#begmemsetEmpty\\#end,\\#begselectCreatedOfAnonEQ\\#end,\\#begwellFormedStoreObjectEQ\\#end,\\#begwellFormedStoreLocSetEQ\\#end,\\#begwellFormedStorePrimitiveEQ\\#end,\\#begwellFormedAnonEQ\\#end,\\#begwellFormedMemsetObjectEQ\\#end,\\#begwellFormedMemsetPrimitiveEQ\\#end
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_INSTANTIATE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=Symbolic Execution Strategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\bootclasspath "../stubs";

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Mon Jul 18 10:14:11 CEST 2016
name=push(java.lang.Object)
addSymbolicExecutionLabel=true
addUninterpretedPredicate=true
class=de.uka.ilkd.key.symbolic_execution.po.ProgramMethodPO
precondition=\\\\invariant_for(this)
method=Stack\\#push(java.lang.Object)
";

\proof {
(keyLog "0" (keyUser "Martin" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "1" (keyUser "marti" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "2" (keyUser "marti" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "806112525")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,SETAccumulate"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "Class_invariant_axiom_for_Stack" (formula "5") (inst "sk=sk_0") (inst "i=i"))
(branch "Use Axiom"
   (builtin "One Step Simplification" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "notLeft" (formula "5"))
   (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
   (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
   (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "8"))
   (rule "times_zero_1" (formula "7") (term "0,0"))
   (rule "add_zero_left" (formula "7") (term "0"))
   (rule "nnf_imp2or" (formula "6") (term "0"))
   (rule "nnf_notAnd" (formula "6") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
   (rule "commute_or" (formula "6") (term "0,0"))
   (rule "arrayLengthIsAnInt" (formula "9") (term "1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "arrayLengthNotNegative" (formula "9") (term "1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0,1") (ifseqformula "1"))
   (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "11"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "assignment" (formula "13"))
   (rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_push,savedHeapBefore_push"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "ifElseUnfold" (formula "13") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "x"))
   (rule "compound_less_than_comparison_2" (formula "13") (term "1") (inst "#v1=x_2") (inst "#v0=x_1"))
   (rule "variableDeclarationAssign" (formula "13") (term "1"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_1"))
   (rule "assignment_read_attribute_this" (formula "13") (term "1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "variableDeclarationAssign" (formula "13") (term "1"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_2"))
   (rule "eval_order_array_access6" (formula "13") (term "1") (inst "#v0=o_arr"))
   (rule "variableDeclarationAssign" (formula "13") (term "1"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "o_arr"))
   (rule "assignment_read_attribute_this" (formula "13") (term "1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "assignment_read_length" (formula "13") (term "1"))
   (branch "Normal Execution (o_arr != null)"
      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "11")))
      (rule "false_right" (formula "13"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "less_than_comparison_simple" (formula "13") (term "1"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "ifElseSplit" (formula "13"))
      (branch "if x true"
         (builtin "One Step Simplification" (formula "1"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "inEqSimp_ltToLeq" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq0" (formula "11") (term "0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
         (rule "polySimp_addComm0" (formula "11") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0"))
         (rule "add_literals" (formula "11") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0"))
         (rule "qeq_literals" (formula "11") (term "0"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "1"))
         (rule "times_zero_1" (formula "9") (term "0,0"))
         (rule "add_zero_left" (formula "9") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "9"))
         (rule "mul_literals" (formula "9") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "9"))
         (rule "leq_literals" (formula "8") (term "0"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "eval_order_array_access1" (formula "13") (term "1") (inst "#v0=o_arr"))
         (rule "variableDeclarationAssign" (formula "13") (term "1"))
         (rule "variableDeclaration" (formula "13") (term "1") (newnames "o_arr_1"))
         (rule "assignment_read_attribute_this" (formula "13") (term "1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "eval_order_array_access2" (formula "13") (term "1") (inst "#v0=x") (inst "#ar1=o_arr_2"))
         (rule "variableDeclarationAssign" (formula "13") (term "1"))
         (rule "variableDeclaration" (formula "13") (term "1") (newnames "o_arr_2"))
         (rule "assignment" (formula "13") (term "1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "variableDeclarationAssign" (formula "13") (term "1"))
         (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_3"))
         (rule "postincrement_assignment_attribute" (formula "13") (term "1") (inst "#v1=x_4") (inst "#v=s"))
         (rule "variableDeclarationAssign" (formula "13") (term "1"))
         (rule "variableDeclaration" (formula "13") (term "1") (newnames "s"))
         (rule "assignment" (formula "13") (term "1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "variableDeclarationAssign" (formula "13") (term "1"))
         (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_4"))
         (rule "assignment_read_attribute" (formula "13") (term "1"))
         (branch "Normal Execution (s != null)"
            (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "12")))
            (rule "false_right" (formula "13"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "eval_order_access4" (formula "13") (term "1") (inst "#v1=x_5") (inst "#v0=s_1"))
            (rule "commute_or_2" (formula "7") (term "0"))
            (rule "commute_or" (formula "7") (term "0,0"))
            (rule "arrayLengthNotNegative" (formula "8") (term "0"))
            (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "9"))
            (rule "leq_literals" (formula "8") (term "0"))
            (rule "concrete_or_1" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
            (rule "inInt" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "variableDeclarationAssign" (formula "13") (term "1"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "s_1"))
            (rule "assignment" (formula "13") (term "1"))
            (rule "sequentialToParallel2" (formula "13"))
            (rule "simplifyUpdate3" (formula "13") (term "1,0"))
            (rule "applyOnElementary" (formula "13") (term "1,0"))
            (rule "applyOnPV" (formula "13") (term "0,1,0"))
            (rule "variableDeclarationAssign" (formula "13") (term "1"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_6"))
            (rule "compound_int_cast_expression" (formula "13") (term "1") (inst "#v=x_7"))
            (rule "variableDeclarationAssign" (formula "13") (term "1"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_7"))
            (rule "remove_parentheses_right" (formula "13") (term "1"))
            (rule "compound_addition_1" (formula "13") (term "1") (inst "#v=x_8"))
            (rule "variableDeclarationAssign" (formula "13") (term "1"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_8"))
            (rule "assignment_read_attribute" (formula "13") (term "1"))
            (branch "Normal Execution (s != null)"
               (rule "simplifyUpdate2" (formula "13"))
               (rule "applyOnRigidFormula" (formula "13"))
               (rule "applyOnPV" (formula "13") (term "0"))
               (rule "simplifyUpdate1" (formula "13") (term "1"))
               (rule "sequentialToParallel2" (formula "13"))
               (rule "simplifyUpdate3" (formula "13") (term "1,0"))
               (rule "applyOnElementary" (formula "13") (term "1,0"))
               (rule "simplifyUpdate2" (formula "13"))
               (rule "applyOnRigidTerm" (formula "13") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "13") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "13") (term "2,0,1,0"))
               (rule "applyOnPV" (formula "13") (term "1,0,1,0"))
               (rule "assignmentAdditionInt" (formula "13") (term "1"))
               (rule "translateJavaAddInt" (formula "13") (term "0,0,1"))
               (rule "polySimp_addComm0" (formula "13") (term "0,0,1"))
               (rule "sequentialToParallel2" (formula "13"))
               (rule "simplifyUpdate3" (formula "13") (term "1,0"))
               (rule "applyOnElementary" (formula "13") (term "1,0"))
               (rule "simplifyUpdate2" (formula "13"))
               (rule "applyOnRigidTerm" (formula "13") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "13") (term "0,0,1,0"))
               (rule "applyOnPV" (formula "13") (term "1,0,1,0"))
               (rule "widening_identity_cast_5" (formula "13") (term "1"))
               (rule "assignment" (formula "13") (term "1"))
               (rule "sequentialToParallel2" (formula "13"))
               (rule "simplifyUpdate3" (formula "13") (term "1,0"))
               (rule "applyOnElementary" (formula "13") (term "1,0"))
               (rule "applyOnPV" (formula "13") (term "0,1,0"))
               (rule "simplifyUpdate2" (formula "13"))
               (rule "assignment_write_attribute" (formula "13") (term "1"))
               (branch "Normal Execution (s_1 != null)"
                  (rule "simplifyUpdate2" (formula "13"))
                  (rule "applyOnRigidFormula" (formula "13"))
                  (rule "applyOnPV" (formula "13") (term "0"))
                  (rule "simplifyUpdate1" (formula "13") (term "1"))
                  (rule "sequentialToParallel2" (formula "13"))
                  (rule "simplifyUpdate3" (formula "13") (term "1,0"))
                  (rule "applyOnElementary" (formula "13") (term "1,0"))
                  (rule "simplifyUpdate2" (formula "13"))
                  (rule "applyOnRigidTerm" (formula "13") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "13") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "13") (term "3,0,1,0"))
                  (rule "simplifyUpdate1" (formula "13") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "13") (term "0,0,1,0"))
                  (rule "applyOnPV" (formula "13") (term "1,0,1,0"))
                  (rule "applyOnPV" (formula "13") (term "3,0,1,0"))
                  (rule "assignment" (formula "13") (term "1"))
                  (rule "sequentialToParallel2" (formula "13"))
                  (rule "simplifyUpdate3" (formula "13") (term "1,0"))
                  (rule "applyOnElementary" (formula "13") (term "1,0"))
                  (rule "applyOnPV" (formula "13") (term "0,1,0"))
                  (rule "simplifyUpdate2" (formula "13"))
                  (rule "assignment_to_reference_array_component" (formula "13") (term "1"))
                  (branch "Normal Execution (o_arr_2 != null)"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "simplifyUpdate2" (formula "2"))
                     (rule "andLeft" (formula "1"))
                     (rule "simplifyUpdate2" (formula "2"))
                     (rule "andLeft" (formula "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "3"))
                     (rule "simplifyUpdate1" (formula "3") (term "1"))
                     (rule "applyOnPV" (formula "3") (term "0"))
                     (rule "applyOnRigidFormula" (formula "2"))
                     (rule "simplifyUpdate1" (formula "2") (term "1"))
                     (rule "applyOnPV" (formula "2") (term "0"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "applyOnRigidFormula" (formula "13"))
                     (rule "applyOnPV" (formula "13") (term "0"))
                     (rule "simplifyUpdate1" (formula "13") (term "1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0,1"))
                     (rule "array_store_known_dynamic_array_type" (formula "2") (ifseqformula "8"))
                     (rule "instanceof_static_type" (formula "2") (term "0,1"))
                     (rule "boolean_equal" (formula "2") (term "1"))
                     (rule "concrete_or_3" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "inEqSimp_ltToLeq" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "sequentialToParallel2" (formula "13"))
                     (rule "simplifyUpdate3" (formula "13") (term "1,0"))
                     (rule "applyOnElementary" (formula "13") (term "1,0"))
                     (rule "simplifyUpdate2" (formula "13"))
                     (rule "applyOnRigidTerm" (formula "13") (term "0,1,0"))
                     (rule "simplifyUpdate1" (formula "13") (term "0,0,1,0"))
                     (rule "simplifyUpdate1" (formula "13") (term "1,0,1,0"))
                     (rule "simplifyUpdate1" (formula "13") (term "3,0,1,0"))
                     (rule "simplifyUpdate1" (formula "13") (term "2,0,1,0"))
                     (rule "applyOnPV" (formula "13") (term "0,0,1,0"))
                     (rule "applyOnPV" (formula "13") (term "1,0,1,0"))
                     (rule "applyOnRigidTerm" (formula "13") (term "2,0,1,0"))
                     (rule "applyOnPV" (formula "13") (term "0,2,0,1,0"))
                     (rule "methodCallEmpty" (formula "13") (term "1"))
                     (rule "tryEmpty" (formula "13") (term "1"))
                     (rule "emptyModality" (formula "13") (term "1"))
                     (rule "applyOnRigidFormula" (formula "13"))
                     (rule "simplifyUpdate1" (formula "13") (term "2"))
                     (rule "simplifyUpdate1" (formula "13") (term "0"))
                     (rule "simplifyUpdate1" (formula "13") (term "1"))
                     (rule "applyOnPV" (formula "13") (term "0"))
                     (rule "applyOnPV" (formula "13") (term "1"))
                     (rule "allLeft" (formula "7") (inst "t=int::select(heap, self, Stack::$size)"))
                     (rule "inEqSimp_homoInEq0" (formula "7") (term "1"))
                     (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1"))
                     (rule "add_literals" (formula "7") (term "1,1,0,1"))
                     (rule "times_zero_1" (formula "7") (term "1,0,1"))
                     (rule "add_zero_right" (formula "7") (term "0,1"))
                     (rule "qeq_literals" (formula "7") (term "1"))
                     (rule "concrete_or_4" (formula "7"))
                     (rule "inEqSimp_contradInEq0" (formula "7") (term "1") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "7") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "7") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "7") (term "0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1"))
                     (rule "add_literals" (formula "7") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "7") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "7") (term "0,0,1"))
                     (rule "leq_literals" (formula "7") (term "0,1"))
                     (rule "concrete_and_2" (formula "7") (term "1"))
                     (rule "concrete_or_4" (formula "7"))
                     (rule "cut_direct" (formula "5") (term "0"))
                     (branch "CUT: e = null TRUE"
                        (rule "concrete_or_1" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "applyEq" (formula "14") (term "2") (ifseqformula "5"))
                        (rule "applyEq" (formula "14") (term "3,0") (ifseqformula "5"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "0") (ifseqformula "2"))
                        (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "8"))
                        (rule "concrete_or_1" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "arrayLengthNotNegative" (formula "1") (term "1,1"))
                        (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "10"))
                        (rule "leq_literals" (formula "1") (term "0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "arrayLengthIsAnInt" (formula "1") (term "1,1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (opengoal " ")
                     )
                     (branch "CUT: e = null FALSE"
                        (rule "concrete_or_2" (formula "5"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "0") (ifseqformula "2"))
                        (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "8"))
                        (rule "concrete_or_1" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "arrayLengthIsAnInt" (formula "8") (term "1,1,0,0"))
                        (builtin "One Step Simplification" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "arrayLengthNotNegative" (formula "1") (term "1,1"))
                        (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "10"))
                        (rule "leq_literals" (formula "1") (term "0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (opengoal " ")
                     )
                  )
                  (branch "Null Reference (o_arr_2 = null)"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "14"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "close" (formula "12") (ifseqformula "1"))
                  )
                  (branch "Index Out of Bounds (o_arr_2 != null, but x_3 Out of Bounds!)"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "simplifyUpdate2" (formula "15"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate2" (formula "1") (term "1"))
                     (rule "applyOnRigidFormula" (formula "12"))
                     (rule "applyOnPV" (formula "12") (term "0"))
                     (rule "simplifyUpdate1" (formula "12") (term "1"))
                     (rule "applyOnRigidFormula" (formula "1") (term "0"))
                     (rule "simplifyUpdate1" (formula "1") (term "0,0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,0"))
                     (rule "applyOnPV" (formula "1") (term "1,0"))
                     (rule "applyOnRigidFormula" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0,1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1,1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                     (rule "applyOnPV" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "1,1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "10"))
                     (rule "qeq_literals" (formula "1") (term "0,1"))
                     (rule "concrete_and_2" (formula "1") (term "1"))
                     (rule "concrete_or_4" (formula "1"))
                     (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
                     (rule "andLeft" (formula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                     (rule "mul_literals" (formula "2") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0"))
                     (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,1,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0"))
                     (rule "add_zero_right" (formula "2") (term "0"))
                     (rule "leq_literals" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "Array Store Exception (incompatible dynamic element type of o_arr_2 and e)"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "simplifyUpdate2" (formula "2"))
                     (rule "andLeft" (formula "1"))
                     (rule "simplifyUpdate2" (formula "2"))
                     (rule "notLeft" (formula "3"))
                     (rule "andLeft" (formula "1"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "simplifyUpdate2" (formula "17"))
                     (rule "applyOnRigidFormula" (formula "2"))
                     (rule "applyOnPV" (formula "2") (term "0"))
                     (rule "simplifyUpdate1" (formula "2") (term "1"))
                     (rule "applyOnRigidFormula" (formula "13"))
                     (rule "simplifyUpdate1" (formula "13") (term "1"))
                     (rule "applyOnPV" (formula "13") (term "0"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "applyOnRigidFormula" (formula "12"))
                     (rule "applyOnPV" (formula "12") (term "0"))
                     (rule "simplifyUpdate1" (formula "12") (term "1"))
                     (rule "applyOnRigidTerm" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0,1"))
                     (rule "array_store_known_dynamic_array_type" (formula "12") (ifseqformula "7"))
                     (rule "instanceof_static_type" (formula "12") (term "0,1"))
                     (rule "boolean_equal" (formula "12") (term "1"))
                     (rule "concrete_or_3" (formula "12"))
                     (rule "closeTrue" (formula "12"))
                  )
               )
               (branch "Null Reference (s_1 = null)"
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "simplifyUpdate2" (formula "14"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "close" (formula "13") (ifseqformula "1"))
               )
            )
            (branch "Null Reference (s = null)"
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "14"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "close" (formula "13") (ifseqformula "1"))
            )
         )
         (branch "Null Reference (s = null)"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "if x false"
         (builtin "One Step Simplification" (formula "1"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "notLeft" (formula "1"))
         (rule "inEqSimp_ltRight" (formula "11"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
         (rule "polySimp_elimOne" (formula "1") (term "1"))
         (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "11"))
         (rule "applyEq" (formula "8") (term "1,1,1,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq1" (formula "2"))
         (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
         (rule "add_literals" (formula "2") (term "1,0"))
         (rule "times_zero_1" (formula "2") (term "0"))
         (rule "leq_literals" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "applyEq" (formula "9") (term "0") (ifseqformula "1"))
         (rule "applyEq" (formula "10") (term "0") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq0" (formula "10"))
         (rule "polySimp_pullOutFactor1" (formula "10") (term "0"))
         (rule "add_literals" (formula "10") (term "1,0"))
         (rule "times_zero_1" (formula "10") (term "0"))
         (rule "qeq_literals" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "inEqSimp_or_tautInEq2" (formula "7") (term "0,0"))
         (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0,0"))
         (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1,0,0"))
         (rule "add_literals" (formula "7") (term "1,0,1,0,0"))
         (rule "times_zero_1" (formula "7") (term "0,1,0,0"))
         (rule "leq_literals" (formula "7") (term "1,0,0"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "throwUnfold" (formula "11") (term "1") (inst "#v0=i"))
         (rule "variableDeclarationAssign" (formula "11") (term "1"))
         (rule "variableDeclaration" (formula "11") (term "1") (newnames "i"))
         (rule "instanceCreationAssignmentUnfoldArguments" (formula "11") (term "1"))
         (rule "variableDeclarationAssign" (formula "11") (term "1"))
         (rule "variableDeclaration" (formula "11") (term "1") (newnames "var"))
         (rule "stringAssignment" (formula "11") (term "1"))
         (rule "simplifyUpdate2" (formula "2"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "sequentialToParallel2" (formula "13"))
         (rule "simplifyUpdate3" (formula "13") (term "1,0"))
         (rule "arrayLengthIsAnInt" (formula "2") (term "1"))
         (rule "inInt" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "arrayLengthNotNegative" (formula "2") (term "1"))
         (rule "instanceCreationAssignment" (formula "13") (term "1") (inst "#v0=i_1"))
         (rule "variableDeclarationAssign" (formula "13") (term "1"))
         (rule "variableDeclaration" (formula "13") (term "1") (newnames "i_1"))
         (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "13") (term "1") (inst "#v0=i_2"))
         (rule "variableDeclaration" (formula "13") (term "1") (newnames "i_2"))
         (rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
         (rule "simplifyUpdate2" (formula "13") (term "1"))
         (rule "variableDeclaration" (formula "13") (term "1") (newnames "__NEW__"))
         (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "13") (term "1") (inst "#v0=i_3"))
         (rule "variableDeclaration" (formula "13") (term "1") (newnames "i_3"))
         (rule "allocateInstance" (formula "13"))
         (rule "false_to_not_true" (formula "1") (term "1,1,0,1"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "5"))
         (rule "concrete_impl_1" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "sequentialToParallel2" (formula "16"))
         (rule "simplifyUpdate3" (formula "16") (term "1,0"))
         (rule "blockEmpty" (formula "16") (term "1"))
         (rule "assignment" (formula "16") (term "1"))
         (rule "sequentialToParallel2" (formula "16"))
         (rule "simplifyUpdate3" (formula "16") (term "1,0"))
         (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
         (rule "simplifyUpdate2" (formula "16") (term "1"))
         (rule "assignment_write_attribute_this" (formula "16") (term "1"))
         (rule "sequentialToParallel2" (formula "16"))
         (rule "simplifyUpdate3" (formula "16") (term "1,0"))
         (rule "applyOnElementary" (formula "16") (term "1,0"))
         (rule "simplifyUpdate2" (formula "16"))
         (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "16") (term "3,0,1,0"))
         (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
         (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "16") (term "0,0,1,0"))
         (rule "applyOnPV" (formula "16") (term "1,0,1,0"))
         (rule "applyOnPV" (formula "16") (term "0,0,1,0"))
         (rule "methodCallWithinClass" (formula "16") (term "1"))
         (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
         (rule "simplifyUpdate2" (formula "16") (term "1"))
         (rule "methodCallSuper" (formula "16") (term "1"))
         (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
         (rule "simplifyUpdate2" (formula "16") (term "1"))
         (rule "methodCallSuper" (formula "16") (term "1"))
         (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
         (rule "simplifyUpdate2" (formula "16") (term "1"))
         (rule "methodCallSuper" (formula "16") (term "1"))
         (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
         (rule "simplifyUpdate2" (formula "16") (term "1"))
         (rule "methodCallSuper" (formula "16") (term "1"))
         (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
         (rule "simplifyUpdate2" (formula "16") (term "1"))
         (rule "methodCallEmpty" (formula "16") (term "1"))
         (rule "blockEmpty" (formula "16") (term "1"))
         (rule "assignment_write_attribute_this" (formula "16") (term "1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "arrayLengthIsAnInt" (formula "3") (term "1"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "true_left" (formula "3"))
         (rule "arrayLengthNotNegative" (formula "3") (term "1"))
         (rule "assignment_write_attribute_this" (formula "16") (term "1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "methodCallEmpty" (formula "16") (term "1"))
         (rule "methodCallEmpty" (formula "16") (term "1"))
         (rule "methodCallEmpty" (formula "16") (term "1"))
         (rule "methodCallEmpty" (formula "16") (term "1"))
         (rule "blockEmpty" (formula "16") (term "1"))
         (rule "methodCallReturnIgnoreResult" (formula "16") (term "1"))
         (rule "methodCallReturn" (formula "16") (term "1"))
         (rule "assignment" (formula "16") (term "1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "methodCallEmpty" (formula "16") (term "1"))
         (rule "blockEmpty" (formula "16") (term "1"))
         (rule "assignment" (formula "16") (term "1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "var_1"))
         (rule "assignment" (formula "16") (term "1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "methodCallSuper" (formula "16") (term "1"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "arg0"))
         (rule "assignment" (formula "16") (term "1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "methodCallSuper" (formula "16") (term "1"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "arg0_1"))
         (rule "assignment" (formula "16") (term "1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "methodCallSuper" (formula "16") (term "1"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "arg0_2"))
         (rule "assignment" (formula "16") (term "1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "methodCall" (formula "16") (term "1") (newnames "target"))
         (branch "Normal Execution (this != null )"
            (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "12")))
            (rule "false_right" (formula "16"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "arg0_3"))
            (rule "assignment" (formula "16") (term "1"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "arg1"))
            (rule "assignment" (formula "16") (term "1"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "target"))
            (rule "delete_unnecessary_cast" (formula "16") (term "1"))
            (branch "Normal Execution (i_1 instanceof java.lang.Throwable)"
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "methodCallSuper" (formula "16") (term "1"))
               (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<init>_4,savedHeapBefore_<init>_4"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "methodCallEmpty" (formula "16") (term "1"))
               (rule "blockEmpty" (formula "16") (term "1"))
               (rule "assignment_write_attribute_this" (formula "16") (term "1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "assignment_write_attribute_this" (formula "16") (term "1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "assignment_write_attribute_this" (formula "16") (term "1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "emptyStatement" (formula "16") (term "1"))
               (rule "assignment_write_attribute_this" (formula "16") (term "1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "emptyStatement" (formula "16") (term "1"))
               (rule "methodCallEmpty" (formula "16") (term "1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "methodCallEmpty" (formula "16") (term "1"))
               (rule "methodCallEmpty" (formula "16") (term "1"))
               (rule "methodCallEmpty" (formula "16") (term "1"))
               (rule "methodCallEmpty" (formula "16") (term "1"))
               (rule "blockEmpty" (formula "16") (term "1"))
               (rule "assignment_write_attribute" (formula "16") (term "1"))
               (branch "Normal Execution (i_1 != null)"
                  (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "12")))
                  (rule "false_right" (formula "16"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "assignment" (formula "16") (term "1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "blockEmpty" (formula "16") (term "1"))
                  (rule "methodCallThrow" (formula "16") (term "1"))
                  (rule "tryCatchThrow" (formula "16") (term "1"))
                  (rule "ifElseUnfold" (formula "16") (term "1") (inst "#boolv=x"))
                  (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_5"))
                  (rule "equality_comparison_simple" (formula "16") (term "1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "replace_known_right" (formula "16") (term "0,0,1,0") (ifseqformula "12"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "ifElseSplit" (formula "16"))
                  (branch "if x_5 true"
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if x_5 false"
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "ifElseSplit" (formula "16"))
                     (branch "if i instanceof java.lang.Throwable true"
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
                        (rule "true_left" (formula "1"))
                        (rule "variableDeclaration" (formula "16") (term "1") (newnames "e_1"))
                        (rule "delete_unnecessary_cast" (formula "16") (term "1"))
                        (branch "Normal Execution (i instanceof java.lang.Throwable)"
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "assignment" (formula "16") (term "1"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "emptyModality" (formula "16") (term "1"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "cut_direct" (formula "7") (term "0"))
                           (branch "CUT: e = null TRUE"
                              (builtin "One Step Simplification" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "applyEq" (formula "16") (term "2") (ifseqformula "7"))
                              (opengoal " ")
                           )
                           (branch "CUT: e = null FALSE"
                              (builtin "One Step Simplification" (formula "7"))
                              (opengoal " ")
                           )
                        )
                        (branch "ClassCastException (!(i instanceof java.lang.Throwable))"
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "closeTrue" (formula "16"))
                        )
                     )
                     (branch "if i instanceof java.lang.Throwable false"
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
               )
               (branch "Null Reference (i_1 = null)"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "ClassCastException (!(i_1 instanceof java.lang.Throwable))"
               (builtin "One Step Simplification" (formula "16"))
               (rule "closeTrue" (formula "16"))
            )
         )
         (branch "Null Reference (this = null)"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Null Reference (o_arr = null)"
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Show Axiom Satisfiability"
   (builtin "One Step Simplification" (formula "6"))
   (rule "closeTrue" (formula "6"))
)
)

}
