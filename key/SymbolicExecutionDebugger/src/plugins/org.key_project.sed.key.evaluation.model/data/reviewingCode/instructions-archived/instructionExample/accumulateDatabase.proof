\profile "Java Profile for Symbolic Execution";

\settings {
"#Proof-Settings-Config-File
#Wed Aug 05 17:35:46 CEST 2015
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_INSTANTIATE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=Symbolic Execution Strategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Wed Aug 05 17:35:46 CEST 2015
name=accumulateDatabase(Accumulator)
addSymbolicExecutionLabel=true
addUninterpretedPredicate=true
class=de.uka.ilkd.key.symbolic_execution.po.ProgramMethodPO
precondition=\\\\invariant_for(this) &&\\r\\naccumulator \\!\\= null && \\\\invariant_for(accumulator)\\r\\n\\r\\n
method=Database\\#accumulateDatabase(Accumulator)
";

\proof {
(keyLog "0" (keyUser "Martin" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "2954474606")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,SETAccumulate,LayoutPredicate"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "8"))
(builtin "One Step Simplification" (formula "4"))
(rule "Class_invariant_axiom_for_Database" (formula "5") (inst "i=i") (inst "sk=sk_0") (ifseqformula "3"))
(branch "Use Axiom"
   (builtin "One Step Simplification" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "notLeft" (formula "6"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "5") (inst "i=i"))
   (rule "greater_literals" (formula "5") (term "0,1"))
   (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "9")))
   (rule "sub_literals" (formula "5") (term "2,1,0"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "narrowSelectArrayType" (formula "5") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "9"))
   (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "6") (term "0"))
   (rule "nnf_notAnd" (formula "6") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
   (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
   (rule "mul_literals" (formula "6") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
   (rule "arrayLengthIsAnInt" (formula "6") (term "1,1,0,0"))
   (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "5") (term "0,0") (ifseqformula "1"))
   (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "9"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "arrayLengthNotNegative" (formula "7") (term "1,1,0,0"))
   (rule "assignment" (formula "13"))
   (rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_accumulateDatabase,savedHeapBefore_accumulateDatabase,accumulatorBefore_accumulateDatabase"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "variableDeclarationAssign" (formula "13") (term "1"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "accumulation"))
   (rule "assignment" (formula "13") (term "1"))
   (builtin "One Step Simplification" (formula "13"))
   (rule "for_to_while" (formula "13") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
   (rule "variableDeclarationAssign" (formula "13") (term "1"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "i"))
   (rule "assignment" (formula "13") (term "1"))
   (builtin "One Step Simplification" (formula "13"))
   (builtin "Loop Invariant" (formula "13") (newnames "variant,b,heapBefore_LOOP,iBefore_LOOP,i_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
   (branch "Invariant Initially Valid"
      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "1")))
      (rule "translateJavaAddInt" (formula "13") (term "1,1"))
      (rule "qeq_literals" (formula "13") (term "0"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "polySimp_addComm0" (formula "13") (term "1"))
      (rule "inEqSimp_leqRight" (formula "13"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "8"))
      (rule "qeq_literals" (formula "1") (term "0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Body Preserves Invariant"
      (builtin "One Step Simplification" (formula "11"))
      (builtin "One Step Simplification" (formula "15"))
      (rule "translateJavaAddInt" (formula "11") (term "1,1"))
      (rule "translateJavaSubInt" (formula "15") (term "0,1,1,1,0,1"))
      (rule "translateJavaSubInt" (formula "15") (term "0,1,0,1,1,0,1,1"))
      (rule "translateJavaAddInt" (formula "15") (term "1,1,0,0,0,1,1,0,1,1"))
      (rule "andLeft" (formula "11"))
      (rule "impRight" (formula "16"))
      (rule "eqSymm" (formula "17") (term "1,0,0,1,0,0,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "17") (term "0,1,1,1,0"))
      (rule "polySimp_elimSub" (formula "17") (term "0,1,0,1,1,0,1"))
      (rule "polySimp_addComm0" (formula "13") (term "1"))
      (rule "polySimp_addComm0" (formula "17") (term "1,1,0,0,0,1,1,0,1"))
      (rule "polySimp_addComm0" (formula "17") (term "0,1,1,1,0"))
      (rule "polySimp_addComm0" (formula "17") (term "0,1,0,1,1,0,1"))
      (rule "inEqSimp_homoInEq0" (formula "13"))
      (rule "polySimp_addComm1" (formula "13") (term "0"))
      (rule "inEqSimp_homoInEq0" (formula "17") (term "1,0,0,0,1,1,0,1"))
      (rule "polySimp_addComm1" (formula "17") (term "0,1,0,0,0,1,1,0,1"))
      (rule "pullOutSelect" (formula "17") (term "0,1,0,1,1,1,0") (inst "selectSK=Database_entries_1"))
      (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "4")))
      (rule "applyEqReverse" (formula "18") (term "0,1,0,1,1,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "14") (term "0,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,0,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0,1,1,0,1"))
      (rule "mul_literals" (formula "17") (term "0,1,1,0,0,0,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,0,1,1,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13"))
      (rule "polySimp_mulComm0" (formula "13") (term "1"))
      (rule "polySimp_rightDist" (formula "13") (term "1"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
      (rule "mul_literals" (formula "13") (term "0,1"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1"))
      (rule "boxToDiamond" (formula "1") (term "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "variableDeclarationAssign" (formula "13") (term "1"))
      (rule "variableDeclaration" (formula "13") (term "1") (newnames "b_2"))
      (rule "compound_less_equal_than_comparison_2" (formula "13") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
      (rule "variableDeclarationAssign" (formula "13") (term "1"))
      (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_2"))
      (rule "assignment" (formula "13") (term "1"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "variableDeclarationAssign" (formula "13") (term "1"))
      (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_3"))
      (rule "eval_order_array_access6" (formula "13") (term "1") (inst "#v0=e_arr"))
      (rule "variableDeclarationAssign" (formula "13") (term "1"))
      (rule "variableDeclaration" (formula "13") (term "1") (newnames "e_arr_1"))
      (rule "assignment_read_attribute_this" (formula "13") (term "1"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "replaceKnownSelect_taclet10_0" (formula "13") (term "0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_1" (formula "13") (term "0,1,0"))
      (rule "assignment_read_length" (formula "13") (term "1"))
      (branch "Normal Execution (e_arr_1 != null)"
         (builtin "One Step Simplification" (formula "14"))
         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")))
         (rule "false_right" (formula "13"))
         (rule "less_equal_than_comparison_simple" (formula "13") (term "1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,1,0"))
         (rule "methodCallEmpty" (formula "13") (term "1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "emptyModality" (formula "13") (term "1"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "notRight" (formula "13"))
         (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq0" (formula "13") (term "0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
         (rule "polySimp_addComm0" (formula "13") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0"))
         (rule "add_literals" (formula "13") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "13") (term "1,0,0"))
         (rule "add_zero_right" (formula "13") (term "0,0"))
         (rule "qeq_literals" (formula "13") (term "0"))
         (builtin "One Step Simplification" (formula "13"))
         (rule "true_left" (formula "13"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "exc_1"))
         (rule "assignment" (formula "16") (term "1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "thrownExc"))
         (rule "ifUnfold" (formula "16") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_4"))
         (rule "compound_less_equal_than_comparison_2" (formula "16") (term "1") (inst "#v1=x_6") (inst "#v0=x_5"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_5"))
         (rule "assignment" (formula "16") (term "1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_6"))
         (rule "eval_order_array_access6" (formula "16") (term "1") (inst "#v0=e_arr"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "e_arr_2"))
         (rule "assignment_read_attribute_this" (formula "16") (term "1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "replaceKnownSelect_taclet10_0" (formula "16") (term "0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_1" (formula "16") (term "0,1,0"))
         (rule "assignment_read_length" (formula "16") (term "1"))
         (branch "Normal Execution (e_arr_2 != null)"
            (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "13")))
            (rule "false_right" (formula "16"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "less_equal_than_comparison_simple" (formula "16") (term "1"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "ifSplit" (formula "16"))
            (branch "if x_4 true"
               (builtin "One Step Simplification" (formula "1"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_commuteLeq" (formula "1"))
               (rule "methodCallUnfoldArguments" (formula "16") (term "1"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "var"))
               (rule "assignment" (formula "16") (term "1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "var_1"))
               (rule "assignment" (formula "16") (term "1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "var_2"))
               (rule "eval_order_array_access4" (formula "16") (term "1") (inst "#v0=e_arr"))
               (rule "variableDeclarationAssign" (formula "16") (term "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "e_arr_3"))
               (rule "assignment_read_attribute_this" (formula "16") (term "1"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "replaceKnownSelect_taclet10_0" (formula "16") (term "0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10_1" (formula "16") (term "0,1,0"))
               (rule "assignment_array2" (formula "16") (term "1"))
               (branch "Normal Execution (e_arr_3 != null)"
                  (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "13")))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "orRight" (formula "16"))
                  (rule "inEqSimp_leqRight" (formula "16"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_ltRight" (formula "17"))
                  (rule "times_zero_1" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "pullOutSelect" (formula "18") (term "0,1,0") (inst "selectSK=arr_0"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "9")))
                  (rule "applyEqReverse" (formula "19") (term "0,1,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "14"))
                  (rule "leq_literals" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
                  (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
                  (rule "add_literals" (formula "2") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0"))
                  (rule "add_zero_right" (formula "2") (term "0,0"))
                  (rule "qeq_literals" (formula "2") (term "0"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "16") (term "0,1,0") (ifseqformula "2"))
                  (rule "allLeft" (formula "10") (inst "t=i_0"))
                  (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "10") (term "1,0") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1,0"))
                  (rule "add_literals" (formula "10") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "10") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "10") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "14"))
                  (rule "qeq_literals" (formula "10") (term "0,0"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "notLeft" (formula "10"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "14"))
                  (builtin "One Step Simplification" (formula "1"))
                  (builtin "Use Operation Contract" (formula "18") (newnames "heapBefore_accumulate,result_0,exc_0,heapAfter_accumulate,anon_heap_accumulate") (contract "Accumulator[Accumulator::accumulate(int,Entry)].JML normal_behavior operation contract.0"))
                  (branch "Post (accumulate)"
                     (builtin "One Step Simplification" (formula "15"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "andLeft" (formula "15"))
                     (rule "blockEmpty" (formula "21") (term "1"))
                     (rule "postincrement" (formula "21") (term "1"))
                     (rule "compound_int_cast_expression" (formula "21") (term "1") (inst "#v=x"))
                     (rule "variableDeclarationAssign" (formula "21") (term "1"))
                     (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_8"))
                     (rule "remove_parentheses_right" (formula "21") (term "1"))
                     (rule "assignmentAdditionInt" (formula "21") (term "1"))
                     (rule "translateJavaAddInt" (formula "21") (term "0,0,1"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "polySimp_addComm0" (formula "21") (term "0,1,0"))
                     (rule "widening_identity_cast_5" (formula "21") (term "1"))
                     (rule "assignment" (formula "21") (term "1"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "tryEmpty" (formula "21") (term "1"))
                     (rule "methodCallEmpty" (formula "21") (term "1"))
                     (rule "emptyModality" (formula "21") (term "1"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "eqSymm" (formula "21") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "0,0,1,0"))
                     (rule "mul_literals" (formula "21") (term "0,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "1,1,0,0,0"))
                     (rule "add_literals" (formula "21") (term "0,1,1,0,0,0"))
                     (rule "add_zero_left" (formula "21") (term "1,1,0,0,0"))
                     (rule "precOfInt" (formula "21") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "21") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,1,0"))
                     (rule "polySimp_mulAssoc" (formula "21") (term "0,1,0,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "0,0,1,0,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "0,1,0,0,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,1,1,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,0,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,1,1,0"))
                     (rule "polySimp_addComm1" (formula "21") (term "0,0,0,0,1,1,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,0,0,1,1,0"))
                     (rule "add_zero_left" (formula "21") (term "0,0,0,0,1,1,0"))
                     (rule "polySimp_pullOutFactor1" (formula "21") (term "0,0,0,1,1,0"))
                     (rule "add_literals" (formula "21") (term "1,0,0,0,1,1,0"))
                     (rule "times_zero_1" (formula "21") (term "0,0,0,1,1,0"))
                     (rule "add_zero_left" (formula "21") (term "0,0,1,1,0"))
                     (rule "inEqSimp_homoInEq1" (formula "21") (term "0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "21") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "21") (term "0,0,0,0,0"))
                     (rule "inEqSimp_homoInEq0" (formula "21") (term "0,1,0"))
                     (rule "mul_literals" (formula "21") (term "1,0,0,1,0"))
                     (rule "add_zero_right" (formula "21") (term "0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0"))
                     (rule "inEqSimp_invertInEq0" (formula "21") (term "0,0,0,0"))
                     (rule "mul_literals" (formula "21") (term "1,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,1,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,1,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,1,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,1,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,0,1,0"))
                     (rule "inEqSimp_subsumption1" (formula "21") (term "0,0,0,0") (ifseqformula "13"))
                     (rule "leq_literals" (formula "21") (term "0,0,0,0,0"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "pullOutSelect" (formula "21") (term "0,0,0,1,0") (inst "selectSK=Database_entries_2"))
                     (rule "applyEq" (formula "22") (term "0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "22") (term "0,0,1,1,0") (ifseqformula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")) (ifInst ""  (formula "5")))
                     (rule "replaceKnownSelect_taclet10_0" (formula "1") (term "2,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet10_1" (formula "1") (term "2,0"))
                     (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,0"))
                     (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")) (ifInst ""  (formula "5")))
                     (rule "applyEqReverse" (formula "22") (term "0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "22") (term "0,1,1,1,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "22") (term "0,0,0,1,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "inEqSimp_commuteGeq" (formula "21") (term "1,1,0"))
                     (rule "arrayLengthIsAnInt" (formula "21") (term "0,0,0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "arrayLengthNotNegative" (formula "21") (term "0,0,0,0"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,0,0,0,0") (ifseqformula "15"))
                     (rule "cut_direct" (formula "23") (term "0,0,0"))
                     (branch "CUT: self.entries@anon_heap_accumulate<<anonHeapFunction>>.length >= i_0 TRUE"
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "cut_direct" (formula "2") (term "0"))
                        (branch "CUT: self.entries@anon_heap_accumulate<<anonHeapFunction>> = null TRUE"
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "24") (term "0,0,0,1,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "24") (term "0,0,1,1,0") (ifseqformula "2"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0"))
                           (rule "cut_direct" (formula "24") (term "0,1,0"))
                           (branch "CUT: null.length >= 1 + i_0 TRUE"
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
                              (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
                              (rule "add_literals" (formula "2") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "2") (term "1,0,0"))
                              (rule "add_zero_right" (formula "2") (term "0,0"))
                              (rule "qeq_literals" (formula "2") (term "0"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "cut_direct" (formula "24") (term "1,0"))
                              (branch "CUT: self.entries.length >= null.length TRUE"
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "cut_direct" (formula "25") (term "1"))
                                 (branch "CUT: SETAccumulate(heapAfter_accumulate, null, accumulator) TRUE"
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "allRight" (formula "26") (inst "sk=f_1"))
                                    (rule "allRight" (formula "26") (inst "sk=o_1"))
                                    (rule "orRight" (formula "26"))
                                    (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=f_1_0"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "eqSymm" (formula "28"))
                                    (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_1_1"))
                                    (rule "simplifySelectOfAnon" (formula "1"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
                                    (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " !( !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_LOOP<<anonHeapFunction>> = TRUE)) & !f_1 = java.lang.Object::<created> | !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_LOOP<<anonHeapFunction>> = TRUE) TRUE"
                                       (rule "applyEqReverse" (formula "29") (term "1") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "eqSymm" (formula "28"))
                                       (rule "orLeft" (formula "1"))
                                       (branch " !( !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_LOOP<<anonHeapFunction>> = TRUE)) & !f_1 = java.lang.Object::<created>"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "cut_direct" (formula "28") (term "0,0"))
                                          (branch "CUT: o_1 = null TRUE"
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "false_right" (formula "29"))
                                             (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "false_right" (formula "24"))
                                             (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "1"))
                                             (rule "applyEqRigid" (formula "28") (term "1,1") (ifseqformula "1"))
                                             (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                                             (builtin "One Step Simplification" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (opengoal " ")
                                          )
                                          (branch "CUT: o_1 = null FALSE"
                                             (builtin "One Step Simplification" (formula "29"))
                                             (rule "notRight" (formula "29"))
                                             (rule "replace_known_left" (formula "24") (term "0,0,1") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "29")))
                                             (rule "false_right" (formula "24"))
                                             (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                                             (builtin "One Step Simplification" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (opengoal " ")
                                          )
                                       )
                                       (branch " !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_LOOP<<anonHeapFunction>> = TRUE)"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "22"))
                                          (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "24"))
                                          (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "22")))
                                          (rule "closeTrue" (formula "29"))
                                       )
                                    )
                                    (branch " !( !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_LOOP<<anonHeapFunction>> = TRUE)) & !f_1 = java.lang.Object::<created> | !o_1 = null & !( o_1.<created> = TRUE | o_1.<created>@anon_heap_LOOP<<anonHeapFunction>> = TRUE) FALSE"
                                       (rule "close" (formula "29") (ifseqformula "1"))
                                    )
                                 )
                                 (branch "CUT: SETAccumulate(heapAfter_accumulate, null, accumulator) FALSE"
                                    (builtin "One Step Simplification" (formula "26"))
                                    (rule "false_right" (formula "26"))
                                    (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
                                    (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                    (opengoal " ")
                                 )
                              )
                              (branch "CUT: self.entries.length >= null.length FALSE"
                                 (builtin "One Step Simplification" (formula "25"))
                                 (rule "false_right" (formula "25"))
                                 (rule "inEqSimp_geqRight" (formula "24"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "1"))
                                 (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                 (rule "mul_literals" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0,0"))
                                 (rule "add_literals" (formula "6") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                 (rule "polySimp_mulComm0" (formula "6") (term "1"))
                                 (rule "polySimp_rightDist" (formula "6") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                                 (rule "mul_literals" (formula "6") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                                 (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "6"))
                                 (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                                 (rule "add_literals" (formula "2") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "2") (term "0,0"))
                                 (rule "qeq_literals" (formula "2") (term "0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "1"))
                                 (rule "times_zero_1" (formula "13") (term "0,0"))
                                 (rule "add_zero_left" (formula "13") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                                 (rule "mul_literals" (formula "13") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "13"))
                                 (rule "leq_literals" (formula "3") (term "0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "arrayLengthNotNegative" (formula "1") (term "1,1"))
                                 (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "13"))
                                 (rule "leq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "arrayLengthIsAnInt" (formula "1") (term "1,1"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (opengoal " ")
                              )
                           )
                           (branch "CUT: null.length >= 1 + i_0 FALSE"
                              (builtin "One Step Simplification" (formula "25"))
                              (rule "false_right" (formula "25"))
                              (rule "inEqSimp_geqRight" (formula "24"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "1"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq0" (formula "1"))
                              (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,0"))
                              (rule "times_zero_1" (formula "1") (term "0"))
                              (rule "qeq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "2"))
                              (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                              (rule "add_literals" (formula "2") (term "1,0"))
                              (rule "times_zero_1" (formula "2") (term "0"))
                              (rule "leq_literals" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "1"))
                              (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "16"))
                              (rule "leq_literals" (formula "3") (term "0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "true_left" (formula "3"))
                              (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                              (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "16"))
                              (rule "leq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "arrayLengthIsAnInt" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (opengoal " ")
                           )
                        )
                        (branch "CUT: self.entries@anon_heap_accumulate<<anonHeapFunction>> = null FALSE"
                           (builtin "One Step Simplification" (formula "2"))
                           (rule "cut_direct" (formula "25") (term "1,1,0"))
                           (branch "CUT: self.entries@anon_heap_accumulate<<anonHeapFunction>>.length <= self.entries.length TRUE"
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                              (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "1"))
                              (rule "polySimp_elimOne" (formula "2") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "7"))
                              (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
                              (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
                              (rule "add_literals" (formula "2") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "2") (term "1,0,0"))
                              (rule "add_zero_right" (formula "2") (term "0,0"))
                              (rule "qeq_literals" (formula "2") (term "0"))
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                              (rule "times_zero_1" (formula "4") (term "0,0"))
                              (rule "add_zero_left" (formula "4") (term "0"))
                              (rule "cut_direct" (formula "26") (term "1,0"))
                              (branch "CUT: self.entries@anon_heap_accumulate<<anonHeapFunction>>.length >= 1 + i_0 TRUE"
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
                                 (rule "add_literals" (formula "3") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "3") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "3") (term "0,0"))
                                 (rule "qeq_literals" (formula "3") (term "0"))
                                 (builtin "One Step Simplification" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1"))
                                 (rule "mul_literals" (formula "1") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                 (rule "cut_direct" (formula "26") (term "1"))
                                 (branch "CUT: SETAccumulate(heapAfter_accumulate, null, accumulator) TRUE"
                                    (builtin "One Step Simplification" (formula "27"))
                                    (rule "allRight" (formula "27") (inst "sk=f_0"))
                                    (rule "allRight" (formula "27") (inst "sk=o_0"))
                                    (rule "orRight" (formula "27"))
                                    (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=f_0_0"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "eqSymm" (formula "29"))
                                    (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                                    (rule "simplifySelectOfAnon" (formula "1"))
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
                                    (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "ifthenelse_split" (formula "1") (term "0"))
                                    (branch " !( !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_LOOP<<anonHeapFunction>> = TRUE)) & !f_0 = java.lang.Object::<created> | !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_LOOP<<anonHeapFunction>> = TRUE) TRUE"
                                       (rule "applyEqReverse" (formula "30") (term "1") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "eqSymm" (formula "29"))
                                       (rule "orLeft" (formula "1"))
                                       (branch " !( !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_LOOP<<anonHeapFunction>> = TRUE)) & !f_0 = java.lang.Object::<created>"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "cut_direct" (formula "29") (term "0,0"))
                                          (branch "CUT: o_0 = null TRUE"
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "false_right" (formula "30"))
                                             (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "24"))
                                             (rule "false_right" (formula "24"))
                                             (rule "applyEq" (formula "29") (term "1,1") (ifseqformula "1"))
                                             (rule "applyEqRigid" (formula "29") (term "1,0") (ifseqformula "1"))
                                             (opengoal " ")
                                          )
                                          (branch "CUT: o_0 = null FALSE"
                                             (builtin "One Step Simplification" (formula "30"))
                                             (rule "notRight" (formula "30"))
                                             (rule "replace_known_left" (formula "24") (term "0,0,1") (ifseqformula "1"))
                                             (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "30")))
                                             (rule "false_right" (formula "24"))
                                             (opengoal " ")
                                          )
                                       )
                                       (branch " !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_LOOP<<anonHeapFunction>> = TRUE)"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "orRight" (formula "23"))
                                          (rule "replace_known_right" (formula "30") (term "0,1") (ifseqformula "23"))
                                          (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "22")))
                                          (rule "closeTrue" (formula "30"))
                                       )
                                    )
                                    (branch " !( !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_LOOP<<anonHeapFunction>> = TRUE)) & !f_0 = java.lang.Object::<created> | !o_0 = null & !( o_0.<created> = TRUE | o_0.<created>@anon_heap_LOOP<<anonHeapFunction>> = TRUE) FALSE"
                                       (rule "close" (formula "30") (ifseqformula "1"))
                                    )
                                 )
                                 (branch "CUT: SETAccumulate(heapAfter_accumulate, null, accumulator) FALSE"
                                    (builtin "One Step Simplification" (formula "27"))
                                    (rule "false_right" (formula "27"))
                                    (opengoal " ")
                                 )
                              )
                              (branch "CUT: self.entries@anon_heap_accumulate<<anonHeapFunction>>.length >= 1 + i_0 FALSE"
                                 (builtin "One Step Simplification" (formula "27"))
                                 (rule "false_right" (formula "27"))
                                 (rule "inEqSimp_geqRight" (formula "26"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1"))
                                 (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "1"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                                 (rule "inEqSimp_commuteLeq" (formula "2"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq0" (formula "1"))
                                 (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,0"))
                                 (rule "times_zero_1" (formula "1") (term "0"))
                                 (rule "qeq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "3"))
                                 (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                 (rule "add_literals" (formula "3") (term "1,0"))
                                 (rule "times_zero_1" (formula "3") (term "0"))
                                 (rule "leq_literals" (formula "3"))
                                 (rule "true_left" (formula "3"))
                                 (rule "applyEq" (formula "4") (term "0") (ifseqformula "2"))
                                 (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "17"))
                                 (rule "leq_literals" (formula "4") (term "0"))
                                 (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "5"))
                                 (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (opengoal " ")
                              )
                           )
                           (branch "CUT: self.entries@anon_heap_accumulate<<anonHeapFunction>>.length <= self.entries.length FALSE"
                              (builtin "One Step Simplification" (formula "26"))
                              (rule "false_right" (formula "26"))
                              (rule "inEqSimp_leqRight" (formula "25"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "mul_literals" (formula "1") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                              (opengoal " ")
                           )
                        )
                     )
                     (branch "CUT: self.entries@anon_heap_accumulate<<anonHeapFunction>>.length >= i_0 FALSE"
                        (builtin "One Step Simplification" (formula "24"))
                        (rule "false_right" (formula "24"))
                        (rule "inEqSimp_geqRight" (formula "23"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                        (rule "times_zero_1" (formula "3") (term "0,0"))
                        (rule "add_zero_left" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "mul_literals" (formula "3") (term "1"))
                        (rule "cut_direct" (formula "2") (term "0"))
                        (branch "CUT: self.entries@anon_heap_accumulate<<anonHeapFunction>> = null TRUE"
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "2"))
                           (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                           (rule "times_zero_1" (formula "3") (term "0,0"))
                           (rule "add_zero_left" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1"))
                           (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                           (rule "arrayLengthIsAnInt" (formula "1") (term "0"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (opengoal " ")
                        )
                        (branch "CUT: self.entries@anon_heap_accumulate<<anonHeapFunction>> = null FALSE"
                           (builtin "One Step Simplification" (formula "2"))
                           (opengoal " ")
                        )
                     )
                  )
                  (branch "Exceptional Post (accumulate)"
                     (builtin "One Step Simplification" (formula "15"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "andLeft" (formula "15"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "1,0") (ifseqformula "15"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "notLeft" (formula "16"))
                     (rule "close" (formula "18") (ifseqformula "17"))
                  )
                  (branch "Pre (accumulate)"
                     (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "14")) (ifInst ""  (formula "14")) (ifInst ""  (formula "1")))
                     (rule "wellFormedAnon" (formula "18"))
                     (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "3"))
                     (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "12")))
                     (rule "closeTrue" (formula "18"))
                  )
                  (branch "Null reference (var = null)"
                     (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
                     (rule "closeTrue" (formula "18"))
                  )
               )
               (branch "Null Reference (e_arr_3 = null)"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Index Out of Bounds (e_arr_3 != null, but i Out of Bounds!)"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
                  (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "1,1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "13"))
                  (rule "qeq_literals" (formula "1") (term "0,1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "1"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "2"))
                  (rule "applyEq" (formula "18") (term "1,0,1,1,1,0,0,0,0") (ifseqformula "2"))
                  (rule "polySimp_pullOutFactor2" (formula "18") (term "0,1,1,1,0,0,0,0"))
                  (rule "add_literals" (formula "18") (term "1,0,1,1,1,0,0,0,0"))
                  (rule "times_zero_1" (formula "18") (term "0,1,1,1,0,0,0,0"))
                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "3"))
                  (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "1,0"))
                  (rule "times_zero_1" (formula "3") (term "0"))
                  (rule "leq_literals" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq0" (formula "1"))
                  (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,0"))
                  (rule "times_zero_1" (formula "1") (term "0"))
                  (rule "qeq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "12"))
                  (rule "leq_literals" (formula "8") (term "0"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "throwUnfold" (formula "15") (term "1") (inst "#v0=a"))
                  (rule "variableDeclarationAssign" (formula "15") (term "1"))
                  (rule "variableDeclaration" (formula "15") (term "1") (newnames "a"))
                  (rule "instanceCreationAssignment" (formula "15") (term "1") (inst "#v0=a_1"))
                  (rule "variableDeclarationAssign" (formula "15") (term "1"))
                  (rule "variableDeclaration" (formula "15") (term "1") (newnames "a_1"))
                  (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "15") (term "1") (inst "#v0=a_2"))
                  (rule "variableDeclaration" (formula "15") (term "1") (newnames "a_2"))
                  (rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "variableDeclaration" (formula "15") (term "1") (newnames "__NEW__"))
                  (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "15") (term "1") (inst "#v0=a_3"))
                  (rule "variableDeclaration" (formula "15") (term "1") (newnames "a_3"))
                  (rule "allocateInstance" (formula "15"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "wellFormedAnon" (formula "1") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "4"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
                  (rule "notLeft" (formula "1"))
                  (rule "orRight" (formula "13"))
                  (rule "blockEmpty" (formula "19") (term "1"))
                  (rule "assignment" (formula "19") (term "1"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "assignment_write_attribute_this" (formula "19") (term "1"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "methodCallWithinClass" (formula "19") (term "1"))
                  (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "methodCallSuper" (formula "19") (term "1"))
                  (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "methodCallSuper" (formula "19") (term "1"))
                  (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "methodCallSuper" (formula "19") (term "1"))
                  (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "methodCallSuper" (formula "19") (term "1"))
                  (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "methodCallSuper" (formula "19") (term "1"))
                  (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<prepare>_3,savedHeapBefore_<prepare>_3"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "methodCallEmpty" (formula "19") (term "1"))
                  (rule "blockEmpty" (formula "19") (term "1"))
                  (rule "assignment_write_attribute_this" (formula "19") (term "1"))
                  (rule "castDel" (formula "19") (term "1,0,0,1"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "assignment_write_attribute_this" (formula "19") (term "1"))
                  (rule "castDel" (formula "19") (term "1,0,0,1"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "methodCallEmpty" (formula "19") (term "1"))
                  (rule "methodCallEmpty" (formula "19") (term "1"))
                  (rule "methodCallEmpty" (formula "19") (term "1"))
                  (rule "methodCallEmpty" (formula "19") (term "1"))
                  (rule "methodCallEmpty" (formula "19") (term "1"))
                  (rule "blockEmpty" (formula "19") (term "1"))
                  (rule "methodCallReturnIgnoreResult" (formula "19") (term "1"))
                  (rule "methodCallReturn" (formula "19") (term "1"))
                  (rule "assignment" (formula "19") (term "1"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "methodCallEmpty" (formula "19") (term "1"))
                  (rule "blockEmpty" (formula "19") (term "1"))
                  (rule "assignment" (formula "19") (term "1"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "methodCallSuper" (formula "19") (term "1"))
                  (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "methodCallSuper" (formula "19") (term "1"))
                  (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "methodCallSuper" (formula "19") (term "1"))
                  (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "methodCallSuper" (formula "19") (term "1"))
                  (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "methodCallSuper" (formula "19") (term "1"))
                  (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<init>_4,savedHeapBefore_<init>_4"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "methodCallEmpty" (formula "19") (term "1"))
                  (rule "blockEmpty" (formula "19") (term "1"))
                  (rule "assignment_write_attribute_this" (formula "19") (term "1"))
                  (rule "castDel" (formula "19") (term "1,0,0,1"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "assignment_write_attribute_this" (formula "19") (term "1"))
                  (rule "castDel" (formula "19") (term "1,0,0,1"))
                  (builtin "One Step Simplification" (formula "19"))
                  (rule "methodCallEmpty" (formula "19") (term "1"))
                  (rule "methodCallEmpty" (formula "19") (term "1"))
                  (rule "methodCallEmpty" (formula "19") (term "1"))
                  (rule "methodCallEmpty" (formula "19") (term "1"))
                  (rule "methodCallEmpty" (formula "19") (term "1"))
                  (rule "blockEmpty" (formula "19") (term "1"))
                  (rule "assignment_write_attribute" (formula "19") (term "1"))
                  (branch "Normal Execution (a_1 != null)"
                     (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "15")))
                     (rule "false_right" (formula "19"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "assignment" (formula "19") (term "1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "blockThrow" (formula "19") (term "1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "tryCatchThrow" (formula "19") (term "1"))
                     (rule "ifElseUnfold" (formula "19") (term "1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_7"))
                     (rule "equality_comparison_simple" (formula "19") (term "1"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "replace_known_right" (formula "19") (term "0,0,1,0") (ifseqformula "15"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "ifElseSplit" (formula "19"))
                     (branch "if x_7 true"
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if x_7 false"
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "ifElseSplit" (formula "19"))
                        (branch "if a instanceof java.lang.Throwable true"
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                           (rule "true_left" (formula "1"))
                           (rule "variableDeclaration" (formula "19") (term "1") (newnames "e"))
                           (rule "reference_type_cast" (formula "19") (term "1"))
                           (branch "Normal Execution (a instanceof java.lang.Throwable)"
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "assignment" (formula "19") (term "1"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "assignment" (formula "19") (term "1"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "methodCallEmpty" (formula "19") (term "1"))
                              (rule "emptyModality" (formula "19") (term "1"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "blockThrow" (formula "19") (term "1"))
                              (rule "blockThrow" (formula "19") (term "1"))
                              (rule "methodCallParamThrow" (formula "19") (term "1"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "tryCatchThrow" (formula "19") (term "1"))
                              (rule "ifElseUnfold" (formula "19") (term "1") (inst "#boolv=x"))
                              (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_9"))
                              (rule "equality_comparison_simple" (formula "19") (term "1"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "replace_known_right" (formula "19") (term "0,0,1,0") (ifseqformula "15"))
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "ifElseSplit" (formula "19"))
                              (branch "if x_9 true"
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if x_9 false"
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (builtin "One Step Simplification" (formula "19"))
                                 (rule "ifElseSplit" (formula "19"))
                                 (branch "if thrownExc instanceof java.lang.Throwable true"
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                                    (rule "true_left" (formula "1"))
                                    (rule "variableDeclaration" (formula "19") (term "1") (newnames "e_1"))
                                    (rule "reference_type_cast" (formula "19") (term "1"))
                                    (branch "Normal Execution (thrownExc instanceof java.lang.Throwable)"
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "assignment" (formula "19") (term "1"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "emptyModality" (formula "19") (term "1"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (opengoal " ")
                                    )
                                    (branch "ClassCastException (!(thrownExc instanceof java.lang.Throwable))"
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "closeTrue" (formula "19"))
                                    )
                                 )
                                 (branch "if thrownExc instanceof java.lang.Throwable false"
                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                           )
                           (branch "ClassCastException (!(a instanceof java.lang.Throwable))"
                              (builtin "One Step Simplification" (formula "19"))
                              (rule "closeTrue" (formula "19"))
                           )
                        )
                        (branch "if a instanceof java.lang.Throwable false"
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
                  (branch "Null Reference (a_1 = null)"
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
            (branch "if x_4 false"
               (builtin "One Step Simplification" (formula "1"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "notLeft" (formula "1"))
               (rule "inEqSimp_leqRight" (formula "13"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
               (rule "andLeft" (formula "1"))
               (rule "inEqSimp_homoInEq1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm0" (formula "1") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "leq_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Null Reference (e_arr_2 = null)"
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Null Reference (e_arr_1 = null)"
         (builtin "One Step Simplification" (formula "14"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Use Case"
      (builtin "One Step Simplification" (formula "15"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "translateJavaAddInt" (formula "11") (term "1,1"))
      (rule "andLeft" (formula "11"))
      (rule "polySimp_addComm0" (formula "12") (term "1"))
      (rule "inEqSimp_homoInEq0" (formula "12"))
      (rule "polySimp_addComm1" (formula "12") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "12"))
      (rule "polySimp_mulComm0" (formula "12") (term "1"))
      (rule "polySimp_rightDist" (formula "12") (term "1"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
      (rule "mul_literals" (formula "12") (term "0,1"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1"))
      (rule "pullOutSelect" (formula "12") (term "0,0") (inst "selectSK=Database_entries_0"))
      (rule "simplifySelectOfAnon" (formula "12"))
      (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "15")) (ifInst ""  (formula "2")))
      (rule "applyEqReverse" (formula "13") (term "0,0") (ifseqformula "12"))
      (rule "hideAuxiliaryEq" (formula "12"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "b_1"))
      (rule "compound_less_equal_than_comparison_2" (formula "16") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "x"))
      (rule "assignment" (formula "16") (term "1"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_1"))
      (rule "eval_order_array_access6" (formula "16") (term "1") (inst "#v0=e_arr"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "e_arr"))
      (rule "assignment_read_attribute_this" (formula "16") (term "1"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "replaceKnownSelect_taclet20_0" (formula "16") (term "0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_1" (formula "16") (term "0,1,0"))
      (rule "assignment_read_length" (formula "16") (term "1"))
      (branch "Normal Execution (e_arr != null)"
         (builtin "One Step Simplification" (formula "17"))
         (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "13")))
         (rule "false_right" (formula "16"))
         (rule "less_equal_than_comparison_simple" (formula "16") (term "1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1,0"))
         (rule "methodCallEmpty" (formula "16") (term "1"))
         (rule "emptyModality" (formula "16") (term "1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "impRight" (formula "16"))
         (rule "notLeft" (formula "1"))
         (rule "inEqSimp_geqRight" (formula "13"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "inEqSimp_antiSymm" (formula "13") (ifseqformula "1"))
         (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
         (rule "inEqSimp_homoInEq1" (formula "14"))
         (rule "polySimp_pullOutFactor1" (formula "14") (term "0"))
         (rule "add_literals" (formula "14") (term "1,0"))
         (rule "times_zero_1" (formula "14") (term "0"))
         (rule "leq_literals" (formula "14"))
         (rule "true_left" (formula "14"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "13"))
         (rule "inEqSimp_homoInEq0" (formula "1"))
         (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,0"))
         (rule "times_zero_1" (formula "1") (term "0"))
         (rule "qeq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "applyEq" (formula "8") (term "1,1,0,0") (ifseqformula "12"))
         (rule "applyEq" (formula "7") (term "0") (ifseqformula "12"))
         (rule "inEqSimp_sepPosMonomial1" (formula "7"))
         (rule "mul_literals" (formula "7") (term "1"))
         (rule "blockEmpty" (formula "15") (term "1"))
         (rule "methodCallReturn" (formula "15") (term "1"))
         (rule "assignment" (formula "15") (term "1"))
         (builtin "One Step Simplification" (formula "15"))
         (rule "methodCallEmpty" (formula "15") (term "1"))
         (rule "tryEmpty" (formula "15") (term "1"))
         (rule "emptyModality" (formula "15") (term "1"))
         (builtin "One Step Simplification" (formula "15"))
         (opengoal " ")
      )
      (branch "Null Reference (e_arr = null)"
         (builtin "One Step Simplification" (formula "17"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
         (rule "closeFalse" (formula "1"))
      )
   )
)
(branch "Show Axiom Satisfiability"
   (builtin "One Step Simplification" (formula "7"))
   (rule "closeTrue" (formula "7"))
)
)

}
