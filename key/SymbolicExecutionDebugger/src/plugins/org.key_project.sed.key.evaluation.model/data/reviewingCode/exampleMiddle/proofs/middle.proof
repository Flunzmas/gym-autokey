\profile "Java Profile for Symbolic Execution";

\settings {
"#Proof-Settings-Config-File
#Tue Aug 04 17:07:41 CEST 2015
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_INSTANTIATE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=Symbolic Execution Strategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Tue Aug 04 17:07:41 CEST 2015
name=middle(int, int, int)
addSymbolicExecutionLabel=true
addUninterpretedPredicate=true
class=de.uka.ilkd.key.symbolic_execution.po.ProgramMethodPO
method=IntegerUtil\\#middle(int, int, int)
";

\proof {
(keyLog "0" (keyUser "Martin" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "118198689")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,SETAccumulate"))
(rule "impRight" (formula "1"))
(rule "assignment" (formula "2"))
(rule "methodBodyExpand" (formula "2") (term "1") (newnames "heapBefore_middle,savedHeapBefore_middle"))
(builtin "One Step Simplification" (formula "2"))
(rule "ifElseUnfold" (formula "2") (term "1") (inst "#boolv=x_1"))
(rule "variableDeclaration" (formula "2") (term "1") (newnames "x_1"))
(rule "less_than_comparison_simple" (formula "2") (term "1"))
(builtin "One Step Simplification" (formula "2"))
(rule "ifElseSplit" (formula "2"))
(branch "if x_1 true"
   (builtin "One Step Simplification" (formula "1"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "inEqSimp_ltToLeq" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "ifElseUnfold" (formula "3") (term "1") (inst "#boolv=x_1"))
   (rule "variableDeclaration" (formula "3") (term "1") (newnames "x_3"))
   (rule "less_than_comparison_simple" (formula "3") (term "1"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "ifElseSplit" (formula "3"))
   (branch "if x_3 true"
      (builtin "One Step Simplification" (formula "1"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_ltToLeq" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "blockReturn" (formula "4") (term "1"))
      (rule "blockReturn" (formula "4") (term "1"))
      (rule "methodCallReturn" (formula "4") (term "1"))
      (rule "assignment" (formula "4") (term "1"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "methodCallEmpty" (formula "4") (term "1"))
      (rule "tryEmpty" (formula "4") (term "1"))
      (rule "emptyModality" (formula "4") (term "1"))
      (builtin "One Step Simplification" (formula "4"))
      (opengoal " ")
   )
   (branch "if x_3 false"
      (builtin "One Step Simplification" (formula "1"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_ltRight" (formula "3"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
      (rule "polySimp_addComm0" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "ifUnfold" (formula "4") (term "1") (inst "#boolv=x_1"))
      (rule "variableDeclaration" (formula "4") (term "1") (newnames "x_5"))
      (rule "less_than_comparison_simple" (formula "4") (term "1"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "ifSplit" (formula "4"))
      (branch "if x_5 true"
         (builtin "One Step Simplification" (formula "1"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "inEqSimp_ltToLeq" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "blockReturn" (formula "5") (term "1"))
         (rule "blockReturn" (formula "5") (term "1"))
         (rule "methodCallReturn" (formula "5") (term "1"))
         (rule "assignment" (formula "5") (term "1"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "methodCallEmpty" (formula "5") (term "1"))
         (rule "tryEmpty" (formula "5") (term "1"))
         (rule "emptyModality" (formula "5") (term "1"))
         (builtin "One Step Simplification" (formula "5"))
         (opengoal " ")
      )
      (branch "if x_5 false"
         (builtin "One Step Simplification" (formula "1"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "notLeft" (formula "1"))
         (rule "inEqSimp_ltRight" (formula "4"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
         (rule "polySimp_rightDist" (formula "3") (term "0,0"))
         (rule "mul_literals" (formula "3") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "3"))
         (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
         (rule "mul_literals" (formula "2") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
         (rule "polySimp_addComm0" (formula "2") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
         (rule "add_literals" (formula "2") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "2") (term "1,0,0"))
         (rule "add_zero_right" (formula "2") (term "0,0"))
         (rule "qeq_literals" (formula "2") (term "0"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "blockEmpty" (formula "5") (term "1"))
         (rule "methodCallReturn" (formula "5") (term "1"))
         (rule "assignment" (formula "5") (term "1"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "methodCallEmpty" (formula "5") (term "1"))
         (rule "tryEmpty" (formula "5") (term "1"))
         (rule "emptyModality" (formula "5") (term "1"))
         (builtin "One Step Simplification" (formula "5"))
         (opengoal " ")
      )
   )
)
(branch "if x_1 false"
   (builtin "One Step Simplification" (formula "1"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "notLeft" (formula "1"))
   (rule "inEqSimp_ltRight" (formula "2"))
   (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
   (rule "polySimp_addComm0" (formula "1") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "ifElseUnfold" (formula "3") (term "1") (inst "#boolv=x_1"))
   (rule "variableDeclaration" (formula "3") (term "1") (newnames "x_2"))
   (rule "greater_than_comparison_simple" (formula "3") (term "1"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "ifElseSplit" (formula "3"))
   (branch "if x_2 true"
      (builtin "One Step Simplification" (formula "1"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_gtToGeq" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "blockReturn" (formula "4") (term "1"))
      (rule "blockReturn" (formula "4") (term "1"))
      (rule "methodCallReturn" (formula "4") (term "1"))
      (rule "assignment" (formula "4") (term "1"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "methodCallEmpty" (formula "4") (term "1"))
      (rule "tryEmpty" (formula "4") (term "1"))
      (rule "emptyModality" (formula "4") (term "1"))
      (builtin "One Step Simplification" (formula "4"))
      (opengoal " ")
   )
   (branch "if x_2 false"
      (builtin "One Step Simplification" (formula "1"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_gtRight" (formula "3"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
      (rule "polySimp_addComm0" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "ifUnfold" (formula "4") (term "1") (inst "#boolv=x_1"))
      (rule "variableDeclaration" (formula "4") (term "1") (newnames "x_4"))
      (rule "greater_than_comparison_simple" (formula "4") (term "1"))
      (builtin "One Step Simplification" (formula "4"))
      (rule "ifSplit" (formula "4"))
      (branch "if x_4 true"
         (builtin "One Step Simplification" (formula "1"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "inEqSimp_gtToGeq" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "blockReturn" (formula "5") (term "1"))
         (rule "blockReturn" (formula "5") (term "1"))
         (rule "methodCallReturn" (formula "5") (term "1"))
         (rule "assignment" (formula "5") (term "1"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "methodCallEmpty" (formula "5") (term "1"))
         (rule "tryEmpty" (formula "5") (term "1"))
         (rule "emptyModality" (formula "5") (term "1"))
         (builtin "One Step Simplification" (formula "5"))
         (opengoal " ")
      )
      (branch "if x_4 false"
         (builtin "One Step Simplification" (formula "1"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "notLeft" (formula "1"))
         (rule "inEqSimp_gtRight" (formula "4"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "3"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
         (rule "polySimp_elimOne" (formula "1") (term "1"))
         (rule "blockEmpty" (formula "5") (term "1"))
         (rule "methodCallReturn" (formula "5") (term "1"))
         (rule "assignment" (formula "5") (term "1"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "methodCallEmpty" (formula "5") (term "1"))
         (rule "tryEmpty" (formula "5") (term "1"))
         (rule "emptyModality" (formula "5") (term "1"))
         (builtin "One Step Simplification" (formula "5"))
         (opengoal " ")
      )
   )
)
)

}
