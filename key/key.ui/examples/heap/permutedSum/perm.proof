\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Nov 06 10:33:12 CET 2014
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=1000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "src";

\proofObligation "#Proof Obligation Settings
#Thu Nov 06 10:33:12 CET 2014
name=Perm[Perm\\:\\:foo()].JML normal_behavior operation contract.0
contract=Perm[Perm\\:\\:foo()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "daniel" ) (keyVersion "4956f87ed075e796ede9c07514291303187f8ecb"))

(autoModeTime "11982")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "heapAtPre"))
(rule "translateJavaCastInt" (formula "1") (term "1,0,0,0,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "8") (term "0,0,0"))
(rule "assignment" (formula "8"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_foo,savedHeapBefore_foo"))
(builtin "One Step Simplification" (formula "8"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "s"))
(rule "assignment" (formula "8") (term "1"))
(builtin "One Step Simplification" (formula "8"))
(builtin "Loop Invariant" (formula "8") (newnames "variant,b,heapBefore_LOOP,sBefore_LOOP,s_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
(branch "Invariant Initially Valid"
   (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "1")) (ifInst ""  (formula "6")))
   (rule "translateJavaCastInt" (formula "8") (term "1"))
   (rule "eqSymm" (formula "8"))
   (rule "castedGetAny" (formula "8") (term "2,0"))
   (rule "applyEq" (formula "8") (term "1,0") (ifseqformula "5"))
   (rule "bsum_lower_equals_upper" (formula "8") (term "0"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "closeTrue" (formula "8"))
)
(branch "Body Preserves Invariant"
   (builtin "One Step Simplification" (formula "8"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "translateJavaCastInt" (formula "8") (term "1,0"))
   (rule "translateJavaCastInt" (formula "10") (term "1,0,0,0,1,1,0,1,1"))
   (rule "translateJavaSubInt" (formula "10") (term "0,1,1,1,0,1,1"))
   (rule "translateJavaSubInt" (formula "10") (term "0,1,1,1,0,1"))
   (rule "andLeft" (formula "8"))
   (rule "impRight" (formula "11"))
   (rule "eqSymm" (formula "9"))
   (rule "eqSymm" (formula "12") (term "1,0,0,1,0,1,1,0,1"))
   (rule "eqSymm" (formula "12") (term "0,0,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "12") (term "0,1,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "12") (term "0,1,1,1,0"))
   (rule "polySimp_addComm0" (formula "12") (term "0,1,1,1,0"))
   (rule "elementOfSingleton" (formula "12") (term "0,0,0,0,1,0,1,1,0,1"))
   (rule "castedGetAny" (formula "9") (term "2,0"))
   (rule "castedGetAny" (formula "12") (term "2,0,0,0,0,1,1,0,1"))
   (rule "pullOutSelect" (formula "12") (term "0,0,0,1,1,1,0") (inst "selectSK=Perm_pIdx_1"))
   (rule "simplifySelectOfAnon" (formula "1"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")) (ifInst ""  (formula "4")))
   (rule "replaceKnownSelect_taclet1_0" (formula "10") (term "1,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "9") (term "1,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "12") (term "0,0,0,1,1,1,0"))
   (rule "pullOutSelect" (formula "12") (term "0,1,0,1,1,1,0") (inst "selectSK=Perm_a_1"))
   (rule "simplifySelectOfAnon" (formula "1"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")) (ifInst ""  (formula "4")))
   (rule "polySimp_addComm0" (formula "13") (term "0,1,1,1,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "12") (term "0,0,0,1,1,1,0"))
   (rule "variableDeclarationAssign" (formula "1") (term "1"))
   (rule "variableDeclarationAssign" (formula "12") (term "1"))
   (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_2"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "exc_1"))
   (rule "assignment" (formula "12") (term "1"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "thrownExc"))
   (rule "blockThrow" (formula "12") (term "1,0,0,1"))
   (rule "pullOutSelect" (formula "9") (term "0,2,0") (inst "selectSK=Perm_c_1"))
   (rule "simplifySelectOfAnon" (formula "9"))
   (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "12")) (ifInst ""  (formula "3")))
   (rule "elementOfSingleton" (formula "9") (term "0,0"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "hideAuxiliaryEq" (formula "9"))
   (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "9") (term "0,2,0"))
   (rule "boxToDiamond" (formula "1") (term "1"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (builtin "Use Operation Contract" (formula "10") (newnames "heapBefore_hasNext_0,result_1,exc_2") (contract "Perm[Perm::hasNext()].JML normal_behavior operation contract.0"))
   (branch "Post (hasNext)"
      (builtin "One Step Simplification" (formula "10"))
      (rule "replaceKnownSelect_taclet1_0" (formula "10") (term "0,0,1,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "10") (term "0,0,1,0,1"))
      (rule "replaceKnownSelect_taclet1_2" (formula "10") (term "0,1,0,1,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "10") (term "0,1,0,1,0,1"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "11"))
      (rule "eqSymm" (formula "11"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0"))
      (rule "assignment" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
      (rule "methodCallEmpty" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "emptyModality" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "notRight" (formula "12"))
      (rule "ifUnfold" (formula "14") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "x"))
      (builtin "Use Operation Contract" (formula "14") (newnames "heapBefore_hasNext_1,result_2,exc_3") (contract "Perm[Perm::hasNext()].JML normal_behavior operation contract.0"))
      (branch "Post (hasNext)"
         (builtin "One Step Simplification" (formula "13"))
         (rule "replaceKnownSelect_taclet1_0" (formula "13") (term "0,0,1,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "13") (term "0,0,1,0,1"))
         (rule "replaceKnownSelect_taclet1_2" (formula "13") (term "0,1,0,1,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "13") (term "0,1,0,1,0,1"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "14"))
         (rule "eqSymm" (formula "14"))
         (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0"))
         (rule "assignment" (formula "16") (term "1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
         (rule "mul_literals" (formula "14") (term "0,1,0,0"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
         (rule "ifSplit" (formula "16"))
         (branch "if x true"
            (builtin "One Step Simplification" (formula "17"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "compound_assignment_op_plus" (formula "17") (term "1"))
            (rule "compound_int_cast_expression" (formula "17") (term "1") (inst "#v=x"))
            (rule "variableDeclarationAssign" (formula "17") (term "1"))
            (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_1"))
            (rule "remove_parentheses_right" (formula "17") (term "1"))
            (rule "compound_addition_2" (formula "17") (term "1") (inst "#v1=x_3") (inst "#v0=x_2"))
            (rule "variableDeclarationAssign" (formula "17") (term "1"))
            (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_2"))
            (rule "assignment" (formula "17") (term "1"))
            (builtin "One Step Simplification" (formula "17"))
            (rule "variableDeclarationAssign" (formula "17") (term "1"))
            (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_3"))
            (rule "remove_parentheses_right" (formula "17") (term "1"))
            (builtin "Use Operation Contract" (formula "17") (newnames "heapBefore_next,result_3,exc_4,heapAfter_next,anon_heap_next") (contract "Perm[Perm::next()].JML normal_behavior operation contract.0"))
            (branch "Post (next)"
               (builtin "One Step Simplification" (formula "17"))
               (builtin "One Step Simplification" (formula "19"))
               (rule "replaceKnownSelect_taclet1_0" (formula "17") (term "0,1,0,1,0,1,1"))
               (rule "replaceKnownSelect_taclet1_0" (formula "17") (term "1,0,1,0,0,1,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "17") (term "0,1,0,1,0,1,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "17") (term "1,0,1,0,0,1,1"))
               (rule "translateJavaAddInt" (formula "17") (term "1,0,1,0,1,1"))
               (rule "andLeft" (formula "17"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "19"))
               (rule "andLeft" (formula "20"))
               (rule "eqSymm" (formula "19"))
               (rule "polySimp_addComm0" (formula "20") (term "1"))
               (rule "castedGetAny" (formula "19") (term "0"))
               (rule "assignment" (formula "23") (term "1"))
               (builtin "One Step Simplification" (formula "23"))
               (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=Perm_pIdx_2"))
               (rule "simplifySelectOfAnonEQ" (formula "20") (ifseqformula "17"))
               (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "23")) (ifInst ""  (formula "4")))
               (rule "replaceKnownSelect_taclet1_0" (formula "20") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "20") (term "2,0"))
               (rule "polySimp_homoEq" (formula "21"))
               (rule "polySimp_addComm1" (formula "21") (term "0"))
               (rule "elementOfSingleton" (formula "20") (term "0,0"))
               (builtin "One Step Simplification" (formula "20"))
               (rule "hideAuxiliaryEq" (formula "20"))
               (rule "replaceKnownAuxiliaryConstant_taclet00001_7" (formula "20") (term "0,1,0,0"))
               (rule "polySimp_addComm1" (formula "20") (term "0"))
               (rule "polySimp_sepNegMonomial" (formula "20"))
               (rule "polySimp_mulLiterals" (formula "20") (term "0"))
               (rule "polySimp_elimOne" (formula "20") (term "0"))
               (rule "pullOutSelect" (formula "19") (term "0,0") (inst "selectSK=Perm_c_2"))
               (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "17"))
               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "23")) (ifInst ""  (formula "4")))
               (rule "replaceKnownSelect_taclet1_4" (formula "19") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "19") (term "2,0"))
               (rule "elementOfSingleton" (formula "19") (term "0,0"))
               (builtin "One Step Simplification" (formula "19"))
               (rule "hideAuxiliaryEq" (formula "19"))
               (rule "replaceKnownAuxiliaryConstant_taclet00001_9" (formula "19") (term "0,0"))
               (rule "assignmentAdditionInt" (formula "23") (term "1"))
               (builtin "One Step Simplification" (formula "23"))
               (rule "translateJavaAddInt" (formula "23") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "23") (term "0,1,0"))
               (rule "widening_identity_cast_5" (formula "23") (term "1"))
               (rule "assignment" (formula "23") (term "1"))
               (builtin "One Step Simplification" (formula "23"))
               (rule "tryEmpty" (formula "23") (term "1"))
               (rule "methodCallEmpty" (formula "23") (term "1"))
               (rule "emptyModality" (formula "23") (term "1"))
               (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "21")))
               (rule "replaceKnownSelect_taclet00001_6" (formula "23") (term "0,1,0,1"))
               (rule "replaceKnownSelect_taclet00001_6" (formula "23") (term "1,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00001_7" (formula "23") (term "0,1,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet00001_7" (formula "23") (term "1,0,0,0"))
               (rule "replaceKnownSelect_taclet00001_8" (formula "23") (term "0,2,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00001_9" (formula "23") (term "0,2,0,0,0"))
               (rule "eqSymm" (formula "23") (term "1,0,0,1,0"))
               (rule "polySimp_addComm0" (formula "23") (term "0,1"))
               (rule "precOfInt" (formula "23") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "1,1"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,1"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,1,1"))
               (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,1,1"))
               (rule "polySimp_mulComm0" (formula "23") (term "0,1,0,0,1,1"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,1"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,1,1"))
               (rule "inEqSimp_homoInEq0" (formula "23") (term "0,1"))
               (rule "times_zero_2" (formula "23") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "23") (term "0,0,1"))
               (rule "applyEq" (formula "23") (term "1,0,0,0") (ifseqformula "20"))
               (rule "bsum_induction_upper_concrete" (formula "23") (term "0,0,0"))
               (rule "polySimp_homoEq" (formula "23") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0"))
               (rule "polySimp_addComm0" (formula "23") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,1,0,0,0,0"))
               (rule "applyEq" (formula "15") (term "1") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "15"))
               (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "15"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "eqSymm" (formula "13"))
               (rule "applyEq" (formula "22") (term "0,1,0,0,0") (ifseqformula "10"))
               (rule "polySimp_addComm1" (formula "22") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,0,0"))
               (rule "add_literals" (formula "22") (term "1,1,0,0,0,0"))
               (rule "times_zero_1" (formula "22") (term "1,0,0,0,0"))
               (rule "add_zero_right" (formula "22") (term "0,0,0,0"))
               (rule "applyEq" (formula "22") (term "0,1,0,0,1,1") (ifseqformula "19"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,1"))
               (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,1"))
               (rule "mul_literals" (formula "22") (term "0,1,0,0,1,1"))
               (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,1"))
               (rule "polySimp_addComm1" (formula "22") (term "0,0,0,1,1"))
               (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1,1"))
               (rule "add_literals" (formula "22") (term "1,1,0,0,1,1"))
               (rule "times_zero_1" (formula "22") (term "1,0,0,1,1"))
               (rule "polySimp_addLiterals" (formula "22") (term "0,0,1,1"))
               (rule "polySimp_addComm1" (formula "22") (term "0,0,1,1"))
               (rule "add_literals" (formula "22") (term "0,0,0,1,1"))
               (rule "add_zero_left" (formula "22") (term "0,0,1,1"))
               (rule "applyEq" (formula "22") (term "0,0,0,0,1") (ifseqformula "19"))
               (rule "polySimp_mulComm0" (formula "22") (term "0,0,0,1"))
               (rule "polySimp_rightDist" (formula "22") (term "0,0,0,1"))
               (rule "mul_literals" (formula "22") (term "0,0,0,0,1"))
               (rule "applyEq" (formula "22") (term "1,0,1,0,0,0") (ifseqformula "18"))
               (rule "polySimp_sepNegMonomial" (formula "22") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "22") (term "0,0,0"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "eqSymm" (formula "22") (term "1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,1"))
               (rule "polySimp_rightDist" (formula "22") (term "1,0,1"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,1"))
               (rule "mul_literals" (formula "22") (term "0,1,0,1"))
               (rule "polySimp_elimOne" (formula "22") (term "1,1,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "22") (term "1,1,1"))
               (rule "pullOutSelect" (formula "22") (term "0,0,0,1") (inst "selectSK=Perm_a_2"))
               (rule "applyEq" (formula "23") (term "0,0,1,1") (ifseqformula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")) (ifInst ""  (formula "5")))
               (rule "replaceKnownSelect_taclet1_2" (formula "1") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "1") (term "2,0"))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "23") (term "0,0,1,1") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "23") (term "0,0,0,1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "inEqSimp_homoInEq0" (formula "22") (term "1,1"))
               (rule "polySimp_pullOutFactor1" (formula "22") (term "0,1,1"))
               (rule "add_literals" (formula "22") (term "1,0,1,1"))
               (rule "times_zero_1" (formula "22") (term "0,1,1"))
               (rule "qeq_literals" (formula "22") (term "1,1"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "inEqSimp_homoInEq1" (formula "22") (term "1"))
               (rule "polySimp_addComm1" (formula "22") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,1"))
               (rule "polySimp_rightDist" (formula "22") (term "1,1"))
               (rule "mul_literals" (formula "22") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "22") (term "1,1,1"))
               (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "14"))
               (builtin "One Step Simplification" (formula "22"))
               (rule "Class_invariant_axiom_for_Perm" (formula "8") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1") (inst "sk=sk_2") (ifseqformula "5"))
               (branch "Use Axiom"
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "9"))
                  (rule "notLeft" (formula "8"))
                  (rule "eqSymm" (formula "15") (term "1,0"))
                  (rule "eqSymm" (formula "14") (term "1,0"))
                  (rule "eqSymm" (formula "12"))
                  (rule "castedGetAny" (formula "15") (term "0,1,0"))
                  (rule "eqSymm" (formula "15") (term "1,0"))
                  (rule "castedGetAny" (formula "14") (term "1,1,0"))
                  (rule "castedGetAny" (formula "14") (term "1,0,0,1,0"))
                  (rule "castedGetAny" (formula "14") (term "0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "8"))
                  (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
                  (rule "qeq_literals" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
                  (rule "inEqSimp_commuteLeq" (formula "8"))
                  (rule "applyEq" (formula "14") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                  (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0") (ifseqformula "15"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                  (rule "eqSeqDef2" (formula "11") (inst "iv=iv") (ifseqformula "11"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "nnf_imp2or" (formula "13") (term "0"))
                  (rule "nnf_imp2or" (formula "12") (term "0"))
                  (rule "nnf_notAnd" (formula "13") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                  (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "13") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                  (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                  (rule "Class_invariant_axiom_for_Perm" (formula "26") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1") (inst "sk=sk_3") (ifseqformula "5"))
                  (branch "Use Axiom"
                     (builtin "One Step Simplification" (formula "26"))
                     (rule "replaceKnownSelect_taclet00001_10" (formula "26") (term "0,1,1"))
                     (rule "replaceKnownSelect_taclet00001_8" (formula "26") (term "0,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00001_11" (formula "26") (term "0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00001_9" (formula "26") (term "0,0,1"))
                     (rule "replaceKnownSelect_taclet00001_8" (formula "26") (term "1,1,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00001_9" (formula "26") (term "1,1,0,0,0"))
                     (rule "replaceKnownSelect_taclet00001_8" (formula "26") (term "0,0,1,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00001_9" (formula "26") (term "0,0,1,0,1,0"))
                     (rule "replaceKnownSelect_taclet00001_8" (formula "26") (term "0,1,1,0,0,1,0"))
                     (rule "replaceKnownSelect_taclet00001_8" (formula "26") (term "0,0,1,1,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00001_9" (formula "26") (term "0,1,1,0,0,1,0"))
                     (rule "replaceKnownSelect_taclet00001_10" (formula "26") (term "1,2,1,1,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet00001_8" (formula "26") (term "0,1,1,0,0,1,0,0"))
                     (rule "replaceKnownSelect_taclet00001_10" (formula "26") (term "0,1,1,1,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet00001_8" (formula "26") (term "0,0,0,1,0,1,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00001_9" (formula "26") (term "0,0,1,1,0,1,0"))
                     (rule "replaceKnownSelect_taclet00001_10" (formula "26") (term "0,1,1,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00001_11" (formula "26") (term "1,2,1,1,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00001_9" (formula "26") (term "0,1,1,0,0,1,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00001_11" (formula "26") (term "0,1,1,1,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00001_9" (formula "26") (term "0,0,0,1,0,1,0,0"))
                     (rule "replaceKnownSelect_taclet00001_6" (formula "26") (term "0,1,1,0,0,0,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet00001_10" (formula "26") (term "0,0,0,0,0,0,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet00001_6" (formula "26") (term "1,0,1,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00001_11" (formula "26") (term "0,1,1,0,0,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet00001_10" (formula "26") (term "0,1,1,1,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00001_7" (formula "26") (term "0,1,1,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00001_11" (formula "26") (term "0,0,0,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00001_7" (formula "26") (term "1,0,1,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00001_11" (formula "26") (term "0,1,1,1,0,0,0,0,0,0,0"))
                     (rule "andLeft" (formula "26"))
                     (rule "andLeft" (formula "26"))
                     (rule "andLeft" (formula "26"))
                     (rule "andLeft" (formula "26"))
                     (rule "andLeft" (formula "26"))
                     (rule "andLeft" (formula "26"))
                     (rule "andLeft" (formula "26"))
                     (rule "andLeft" (formula "26"))
                     (rule "andLeft" (formula "27"))
                     (rule "notLeft" (formula "26"))
                     (rule "eqSymm" (formula "33") (term "1,0"))
                     (rule "eqSymm" (formula "32") (term "1,0"))
                     (rule "eqSymm" (formula "30"))
                     (rule "castedGetAny" (formula "33") (term "0,1,0"))
                     (rule "eqSymm" (formula "33") (term "1,0"))
                     (rule "castedGetAny" (formula "32") (term "1,1,0"))
                     (rule "castedGetAny" (formula "32") (term "0,1,0"))
                     (rule "castedGetAny" (formula "32") (term "1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "33") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "26"))
                     (rule "applyEq" (formula "26") (term "0") (ifseqformula "25"))
                     (rule "applyEq" (formula "27") (term "0") (ifseqformula "25"))
                     (rule "inEqSimp_homoInEq0" (formula "27"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                     (rule "mul_literals" (formula "27") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0"))
                     (rule "polySimp_addComm0" (formula "27") (term "0,0"))
                     (rule "applyEq" (formula "33") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                     (rule "applyEq" (formula "32") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "26"))
                     (rule "mul_literals" (formula "26") (term "1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "27"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                     (rule "polySimp_elimOne" (formula "27") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "32") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "31") (term "0,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0"))
                     (rule "getOfSeqDefEQ" (formula "31") (term "0,1,0") (ifseqformula "29"))
                     (rule "castDel" (formula "31") (term "1,0,1,0"))
                     (rule "add_zero_right" (formula "31") (term "0,2,1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "31") (term "1,1,0,0,1,0"))
                     (rule "times_zero_2" (formula "31") (term "1,1,1,0,0,1,0"))
                     (rule "add_zero_right" (formula "31") (term "1,1,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1,0"))
                     (rule "eqSeqDef2" (formula "29") (inst "iv=iv") (ifseqformula "29"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "true_left" (formula "29"))
                     (rule "pullOutSelect" (formula "29") (term "0") (inst "selectSK=Perm_b_1"))
                     (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "22"))
                     (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "34")) (ifInst ""  (formula "4")))
                     (rule "elementOfSingleton" (formula "29") (term "0,0"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "simplifySelectOfAnon" (formula "29"))
                     (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "34")) (ifInst ""  (formula "4")))
                     (rule "elementOfSingleton" (formula "29") (term "0,0"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "29"))
                     (rule "hideAuxiliaryEq" (formula "29"))
                     (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=Perm_perm_1"))
                     (rule "applyEq" (formula "30") (term "0,0,2,1,0,1,0") (ifseqformula "28"))
                     (rule "applyEq" (formula "30") (term "0,0,1,0,0,1,0") (ifseqformula "28"))
                     (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "28"))
                     (rule "applyEq" (formula "30") (term "0,0,0,0,0,1,0") (ifseqformula "28"))
                     (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "22"))
                     (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "33")) (ifInst ""  (formula "4")))
                     (rule "elementOfSingleton" (formula "28") (term "0,0"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "simplifySelectOfAnon" (formula "28"))
                     (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "33")) (ifInst ""  (formula "4")))
                     (rule "elementOfSingleton" (formula "28") (term "0,0"))
                     (builtin "One Step Simplification" (formula "28"))
                     (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "28"))
                     (rule "applyEqReverse" (formula "29") (term "0,0,2,1,0,1,0") (ifseqformula "28"))
                     (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "28"))
                     (rule "applyEqReverse" (formula "28") (term "0,0,1,0,0,1,0") (ifseqformula "27"))
                     (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,1,0") (ifseqformula "27"))
                     (rule "hideAuxiliaryEq" (formula "27"))
                     (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "20"))
                     (rule "mul_literals" (formula "26") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "26") (term "0"))
                     (rule "add_literals" (formula "26") (term "0,0"))
                     (rule "add_zero_left" (formula "26") (term "0"))
                     (rule "nnf_imp2or" (formula "28") (term "0"))
                     (rule "nnf_imp2or" (formula "27") (term "0"))
                     (rule "nnf_notAnd" (formula "28") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0"))
                     (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "28") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                     (rule "mul_literals" (formula "28") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "28") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "27") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
                     (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "27") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                     (rule "mul_literals" (formula "27") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
                     (rule "Class_invariant_axiom_for_Perm" (formula "17") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1") (inst "sk=sk_4") (ifseqformula "5"))
                     (branch "Use Axiom"
                        (builtin "One Step Simplification" (formula "17"))
                        (rule "replaceKnownSelect_taclet1_2" (formula "17") (term "0,1,1"))
                        (rule "replaceKnownSelect_taclet1_4" (formula "17") (term "0,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "17") (term "0,1,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "17") (term "0,0,1"))
                        (rule "replaceKnownSelect_taclet1_4" (formula "17") (term "1,1,0,0,0"))
                        (rule "replaceKnownSelect_taclet0000001_13" (formula "17") (term "0,1,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "17") (term "1,1,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0000001_14" (formula "17") (term "0,1,0,0,0"))
                        (rule "replaceKnownSelect_taclet1_4" (formula "17") (term "0,0,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet0000001_13" (formula "17") (term "0,1,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "17") (term "0,0,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet1_4" (formula "17") (term "0,0,1,1,0,1,0"))
                        (rule "replaceKnownSelect_taclet1_4" (formula "17") (term "0,1,1,0,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0000001_14" (formula "17") (term "0,1,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet0000001_16" (formula "17") (term "0,1,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet1_4" (formula "17") (term "0,0,0,1,0,1,0,0"))
                        (rule "replaceKnownSelect_taclet0000001_13" (formula "17") (term "0,0,1,1,0,1,0,0"))
                        (rule "replaceKnownSelect_taclet1_4" (formula "17") (term "0,1,1,0,0,1,0,0"))
                        (rule "replaceKnownSelect_taclet1_2" (formula "17") (term "0,1,1,1,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet1_2" (formula "17") (term "1,2,1,1,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "17") (term "0,0,1,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "17") (term "0,1,1,0,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0000001_17" (formula "17") (term "0,1,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet1_2" (formula "17") (term "0,1,1,0,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet0000001_16" (formula "17") (term "0,0,1,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "17") (term "0,0,0,1,0,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0000001_14" (formula "17") (term "0,0,1,1,0,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_5" (formula "17") (term "0,1,1,0,0,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "17") (term "0,1,1,1,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "17") (term "1,2,1,1,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet1_0" (formula "17") (term "1,0,1,0,0,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet1_0" (formula "17") (term "0,1,1,0,0,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet1_2" (formula "17") (term "0,0,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownSelect_taclet0000001_16" (formula "17") (term "0,0,1,0,1,1,0,1,0,0"))
                        (rule "replaceKnownSelect_taclet1_2" (formula "17") (term "0,1,1,1,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "17") (term "0,1,1,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0000001_17" (formula "17") (term "0,0,1,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "17") (term "1,0,1,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "17") (term "0,1,1,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "17") (term "0,0,0,0,0,0,0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0000001_17" (formula "17") (term "0,0,1,0,1,1,0,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "17") (term "0,1,1,1,0,0,0,0,0,0,0"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "18"))
                        (rule "notLeft" (formula "17"))
                        (rule "eqSymm" (formula "21") (term "1,0"))
                        (rule "eqSymm" (formula "20") (term "1,0"))
                        (rule "eqSymm" (formula "19"))
                        (rule "castedGetAny" (formula "21") (term "0,1,0"))
                        (rule "eqSymm" (formula "21") (term "1,0"))
                        (rule "castedGetAny" (formula "20") (term "0,1,0"))
                        (rule "castedGetAny" (formula "20") (term "1,1,0"))
                        (rule "castedGetAny" (formula "20") (term "1,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "17"))
                        (rule "replace_known_left" (formula "34") (term "0,0") (ifseqformula "17"))
                        (builtin "One Step Simplification" (formula "34"))
                        (rule "allRight" (formula "34") (inst "sk=f_0"))
                        (rule "allRight" (formula "34") (inst "sk=o_0"))
                        (rule "orRight" (formula "34"))
                        (rule "orRight" (formula "34"))
                        (rule "applyEq" (formula "21") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                        (rule "applyEq" (formula "20") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
                        (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "17"))
                        (rule "leq_literals" (formula "30") (term "0"))
                        (builtin "One Step Simplification" (formula "30"))
                        (rule "true_left" (formula "30"))
                        (rule "inEqSimp_subsumption0" (formula "18") (ifseqformula "24"))
                        (rule "inEqSimp_homoInEq0" (formula "18") (term "0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "18") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0"))
                        (rule "add_literals" (formula "18") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "18") (term "1,0,0"))
                        (rule "add_zero_right" (formula "18") (term "0,0"))
                        (rule "qeq_literals" (formula "18") (term "0"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "getOfSeqDefEQ" (formula "12") (term "0,1,0") (ifseqformula "18"))
                        (rule "castDel" (formula "12") (term "1,0,1,0"))
                        (rule "add_zero_right" (formula "12") (term "0,2,1,0,1,0"))
                        (rule "polySimp_elimSub" (formula "12") (term "1,1,0,0,1,0"))
                        (rule "times_zero_2" (formula "12") (term "1,1,1,0,0,1,0"))
                        (rule "add_zero_right" (formula "12") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,1,0"))
                        (rule "eqSeqDef2" (formula "18") (inst "iv=iv") (ifseqformula "18"))
                        (builtin "One Step Simplification" (formula "18"))
                        (rule "true_left" (formula "18"))
                        (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=f_0_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "eqSymm" (formula "34"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "32"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "23"))
                        (rule "times_zero_1" (formula "18") (term "0,0"))
                        (rule "add_zero_left" (formula "18") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                        (rule "mul_literals" (formula "18") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "18"))
                        (rule "leq_literals" (formula "9") (term "0"))
                        (builtin "One Step Simplification" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
                        (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "33"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "nnf_imp2or" (formula "20") (term "0"))
                        (rule "nnf_imp2or" (formula "19") (term "0"))
                        (rule "nnf_notAnd" (formula "20") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
                        (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "20") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                        (rule "mul_literals" (formula "20") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "19") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                        (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                        (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                        (rule "arrayLengthIsAShort" (formula "22") (term "1,1"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "arrayLengthNotNegative" (formula "22") (term "1,1"))
                        (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "17"))
                        (rule "leq_literals" (formula "22") (term "0"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "lenNonNegative" (formula "14") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "14"))
                        (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
                        (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "18"))
                        (rule "leq_literals" (formula "14") (term "0"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "lenNonNegative" (formula "9") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "9"))
                        (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                        (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "18"))
                        (rule "leq_literals" (formula "9") (term "0"))
                        (builtin "One Step Simplification" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "ifthenelse_to_or_left" (formula "28") (term "1,0"))
                        (rule "eqSymm" (formula "28") (term "1,1,1,0"))
                        (rule "nnf_notAnd" (formula "28") (term "0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "28") (term "0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,1,0"))
                        (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0,1,0"))
                        (rule "add_literals" (formula "28") (term "0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,1,0"))
                        (rule "mul_literals" (formula "28") (term "1,0,0,0,1,0"))
                        (rule "commute_and" (formula "31"))
                        (rule "ifthenelse_to_or_left" (formula "12") (term "1,0"))
                        (rule "eqSymm" (formula "12") (term "1,1,1,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0,1,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,1,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,1,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,0,1,0"))
                        (rule "commute_or" (formula "28") (term "1,1,0"))
                        (rule "commute_or" (formula "12") (term "1,1,0"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) TRUE"
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "2"))
                           (rule "notLeft" (formula "1"))
                           (rule "orRight" (formula "30"))
                           (rule "applyEqReverse" (formula "36") (term "1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "eqSymm" (formula "35"))
                           (rule "replace_known_right" (formula "34") (term "0,1") (ifseqformula "29"))
                           (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "28")))
                           (rule "closeTrue" (formula "34"))
                        )
                        (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) FALSE"
                           (rule "close" (formula "34") (ifseqformula "1"))
                        )
                     )
                     (branch "Show Axiom Satisfiability"
                        (builtin "One Step Simplification" (formula "28"))
                        (rule "closeTrue" (formula "28"))
                     )
                  )
                  (branch "Show Axiom Satisfiability"
                     (builtin "One Step Simplification" (formula "27"))
                     (rule "closeTrue" (formula "27"))
                  )
               )
               (branch "Show Axiom Satisfiability"
                  (builtin "One Step Simplification" (formula "21"))
                  (rule "closeTrue" (formula "21"))
               )
            )
            (branch "Exceptional Post (next)"
               (builtin "One Step Simplification" (formula "17"))
               (builtin "One Step Simplification" (formula "19"))
               (rule "replaceKnownSelect_taclet1_0" (formula "17") (term "1,0,1,0,0,1,1"))
               (rule "replaceKnownSelect_taclet1_0" (formula "17") (term "0,1,0,1,0,1,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "17") (term "1,0,1,0,0,1,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "17") (term "0,1,0,1,0,1,1"))
               (rule "translateJavaAddInt" (formula "17") (term "1,0,1,0,1,1"))
               (rule "andLeft" (formula "17"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "1,0") (ifseqformula "17"))
               (builtin "One Step Simplification" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "18"))
               (rule "andLeft" (formula "20"))
               (rule "notLeft" (formula "18"))
               (rule "close" (formula "21") (ifseqformula "20"))
            )
            (branch "Pre (next)"
               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "11")))
               (rule "wellFormedAnon" (formula "17") (term "1"))
               (rule "replaceKnownSelect_taclet1_0" (formula "17") (term "0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "17") (term "0,0"))
               (rule "replaceKnownSelect_taclet1_2" (formula "17") (term "0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "17") (term "0,1,0"))
               (rule "replace_known_left" (formula "17") (term "1,1") (ifseqformula "9"))
               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "3")))
               (rule "inEqSimp_ltRight" (formula "17"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
               (rule "applyEq" (formula "14") (term "0") (ifseqformula "16"))
               (rule "applyEq" (formula "16") (term "1") (ifseqformula "2"))
               (builtin "One Step Simplification" (formula "16"))
               (rule "applyEq" (formula "14") (term "1") (ifseqformula "3"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "15"))
               (rule "andLeft" (formula "1"))
               (rule "inEqSimp_homoInEq1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm0" (formula "1") (term "0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "leq_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "if x false"
            (builtin "One Step Simplification" (formula "17"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "apply_eq_boolean" (formula "14") (term "1") (ifseqformula "15"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "notLeft" (formula "14"))
            (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "14"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "eqSymm" (formula "12"))
            (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "1")))
            (rule "closeFalse" (formula "12"))
         )
      )
      (branch "Exceptional Post (hasNext)"
         (builtin "One Step Simplification" (formula "13"))
         (rule "replaceKnownSelect_taclet1_0" (formula "13") (term "0,0,1,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "13") (term "0,0,1,0,1"))
         (rule "replaceKnownSelect_taclet1_2" (formula "13") (term "0,1,0,1,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "13") (term "0,1,0,1,0,1"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "13"))
         (rule "notLeft" (formula "13"))
         (rule "close" (formula "16") (ifseqformula "15"))
      )
      (branch "Pre (hasNext)"
         (builtin "One Step Simplification" (formula "14"))
         (rule "wellFormedAnon" (formula "14"))
         (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "8")))
         (rule "closeTrue" (formula "14"))
      )
   )
   (branch "Exceptional Post (hasNext)"
      (builtin "One Step Simplification" (formula "10"))
      (rule "replaceKnownSelect_taclet1_0" (formula "10") (term "0,0,1,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet1_1" (formula "10") (term "0,0,1,0,1"))
      (rule "replaceKnownSelect_taclet1_2" (formula "10") (term "0,1,0,1,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet1_3" (formula "10") (term "0,1,0,1,0,1"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "10"))
      (rule "close" (formula "13") (ifseqformula "12"))
   )
   (branch "Pre (hasNext)"
      (builtin "One Step Simplification" (formula "10"))
      (rule "wellFormedAnon" (formula "10"))
      (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "7")))
      (rule "closeTrue" (formula "10"))
   )
)
(branch "Use Case"
   (builtin "One Step Simplification" (formula "10"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "translateJavaCastInt" (formula "8") (term "1,0"))
   (rule "andLeft" (formula "8"))
   (rule "eqSymm" (formula "8"))
   (rule "castedGetAny" (formula "8") (term "2,0"))
   (rule "variableDeclarationAssign" (formula "11") (term "1"))
   (rule "variableDeclaration" (formula "11") (term "1") (newnames "b_1"))
   (rule "pullOutSelect" (formula "8") (term "1,0") (inst "selectSK=Perm_pIdx_0"))
   (rule "simplifySelectOfAnon" (formula "8"))
   (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "11")) (ifInst ""  (formula "2")))
   (rule "elementOfSingleton" (formula "8") (term "0,0"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "hideAuxiliaryEq" (formula "8"))
   (rule "replaceKnownAuxiliaryConstant_taclet2_1" (formula "8") (term "1,0"))
   (rule "pullOutSelect" (formula "8") (term "0,2,0") (inst "selectSK=Perm_c_0"))
   (rule "simplifySelectOfAnon" (formula "8"))
   (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "11")) (ifInst ""  (formula "2")))
   (rule "elementOfSingleton" (formula "8") (term "0,0"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "hideAuxiliaryEq" (formula "8"))
   (rule "replaceKnownAuxiliaryConstant_taclet2_3" (formula "8") (term "0,2,0"))
   (builtin "Use Operation Contract" (formula "11") (newnames "heapBefore_hasNext,result_0,exc_0") (contract "Perm[Perm::hasNext()].JML normal_behavior operation contract.0"))
   (branch "Post (hasNext)"
      (builtin "One Step Simplification" (formula "10"))
      (rule "replaceKnownSelect_taclet2_0" (formula "10") (term "0,0,1,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet2_1" (formula "10") (term "0,0,1,0,1"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "11"))
      (rule "eqSymm" (formula "11"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0"))
      (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
      (rule "assignment" (formula "13") (term "1"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "0,0,0"))
      (rule "pullOutSelect" (formula "11") (term "0,0,0,0") (inst "selectSK=Perm_a_0"))
      (rule "simplifySelectOfAnon" (formula "11"))
      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "13")) (ifInst ""  (formula "2")))
      (rule "elementOfSingleton" (formula "11") (term "0,0"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "hideAuxiliaryEq" (formula "11"))
      (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "11") (term "0,0,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "11") (term "0,0"))
      (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
      (rule "methodCallEmpty" (formula "13") (term "1"))
      (rule "emptyModality" (formula "13") (term "1"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "impRight" (formula "13"))
      (rule "notLeft" (formula "1"))
      (rule "apply_eq_boolean" (formula "11") (term "1") (ifseqformula "12"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "notLeft" (formula "11"))
      (rule "inEqSimp_leqRight" (formula "11"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
      (rule "polySimp_elimOne" (formula "1") (term "1"))
      (rule "methodCallReturn" (formula "14") (term "1"))
      (rule "assignment" (formula "14") (term "1"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "methodCallEmpty" (formula "14") (term "1"))
      (rule "tryEmpty" (formula "14") (term "1"))
      (rule "emptyModality" (formula "14") (term "1"))
      (rule "andRight" (formula "14"))
      (branch "Case 1"
         (rule "andRight" (formula "14"))
         (branch "Case 1"
            (builtin "One Step Simplification" (formula "14"))
            (rule "equal_bsum_perm2" (formula "14") (ifseqformula "9") (userinteraction))
            (rule "Class_invariant_axiom_for_Perm" (formula "7") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1") (inst "sk=sk_5") (ifseqformula "4") (userinteraction))
            (branch "Use Axiom"
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "8"))
               (rule "notLeft" (formula "7"))
               (rule "eqTermCut" (formula "23") (term "1") (inst "s=Seq::select(heap, self, Perm::$c)") (userinteraction))
               (branch "Assume seqDef{int i;}(0, self.pIdx@anon_heap_LOOP«anonHeapFunction», (int)self.c[i]) = self.c"
                  (rule "eqTermCut" (formula "24") (term "0") (inst "s=Seq::select(heap, self, Perm::$b)") (userinteraction))
                  (branch "Assume seqDef{int j;}(0, self.a@heap[anon({(self, Perm::$pIdx)})].length, self.a[j]@heap[anon({(self, Perm::$pIdx)})]) = self.b"
                     (rule "applyEq" (formula "25") (term "0") (ifseqformula "1") (userinteraction))
                     (rule "applyEq" (formula "25") (term "1") (ifseqformula "2") (userinteraction))
                     (rule "close" (formula "25") (ifseqformula "14") (userinteraction))
                  )
                  (branch "Assume seqDef{int j;}(0, self.a@heap[anon({(self, Perm::$pIdx)})].length, self.a[j]@heap[anon({(self, Perm::$pIdx)})]) != self.b"
                     (rule "notLeft" (formula "1") (userinteraction))
                     (rule "equalityToSeqGetAndSeqLenRight" (formula "21") (inst "iv=iv") (userinteraction))
                     (rule "selectOfAnon" (formula "21") (term "1,2,0,0,0"))
                     (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "24")) (ifInst ""  (formula "4")))
                     (rule "selectOfAnon" (formula "21") (term "2,0,0,0"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "elementOfSingleton" (formula "21") (term "0,0,2,0,0,0"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "selectOfAnon" (formula "21") (term "2,0,1,1,0,0,1"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "elementOfSingleton" (formula "21") (term "0,0,2,0,1,1,0,0,1"))
                     (builtin "One Step Simplification" (formula "21"))
                     (builtin "One Step Simplification" (formula "15"))
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "andRight" (formula "21") (userinteraction))
                     (branch "Case 1"
                        (rule "replaceKnownSelect_taclet02_4" (formula "26") (term "1,2,0"))
                        (rule "replaceKnownSelect_taclet02_4" (formula "26") (term "0,1,0"))
                        (rule "replaceKnownSelect_taclet02_4" (formula "25") (term "1,2,0"))
                        (rule "replaceKnownSelect_taclet02_4" (formula "25") (term "0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "26") (term "1,2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "26") (term "0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "25") (term "1,2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "25") (term "0,1,0"))
                        (rule "replaceKnownSelect_taclet02_4" (formula "21") (term "0,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "21") (term "0,1,0,0"))
                        (rule "eqSymm" (formula "12"))
                        (rule "eqSymm" (formula "15") (term "1,0"))
                        (rule "eqSymm" (formula "14") (term "1,0"))
                        (rule "elementOfSingleton" (formula "21") (term "0,1,2,2,0,0"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "castedGetAny" (formula "15") (term "0,1,0"))
                        (rule "eqSymm" (formula "15") (term "1,0"))
                        (rule "castedGetAny" (formula "14") (term "1,1,0"))
                        (rule "castedGetAny" (formula "14") (term "1,0,0,1,0"))
                        (rule "lenOfSeqDefEQ" (formula "15") (term "1,1,0,0") (ifseqformula "1"))
                        (rule "polySimp_elimSub" (formula "15") (term "1,1,1,0,0"))
                        (rule "times_zero_2" (formula "15") (term "1,1,1,1,0,0"))
                        (rule "add_zero_right" (formula "15") (term "1,1,1,0,0"))
                        (rule "lenOfSeqDefEQ" (formula "16") (term "0") (ifseqformula "1"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,0"))
                        (rule "times_zero_2" (formula "16") (term "1,1,0"))
                        (rule "add_zero_right" (formula "16") (term "1,0"))
                        (rule "lenOfSeqDefEQ" (formula "14") (term "1,1,0,0") (ifseqformula "1"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,1,1,0,0"))
                        (rule "times_zero_2" (formula "14") (term "1,1,1,1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "1,1,1,0,0"))
                        (rule "lenOfSeqDef" (formula "21") (term "0"))
                        (rule "polySimp_elimSub" (formula "21") (term "1,0"))
                        (rule "times_zero_2" (formula "21") (term "1,1,0"))
                        (rule "add_zero_right" (formula "21") (term "1,0"))
                        (rule "castedGetAny" (formula "14") (term "0,1,0"))
                        (rule "lenOfSeqDefEQ" (formula "21") (term "1") (ifseqformula "12"))
                        (rule "polySimp_elimSub" (formula "21") (term "1,1"))
                        (rule "times_zero_2" (formula "21") (term "1,1,1"))
                        (rule "add_zero_right" (formula "21") (term "1,1"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0"))
                        (rule "add_zero_right" (formula "21") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "8"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "21") (term "0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,1,0,0,1,0,0"))
                        (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "8"))
                        (rule "true_left" (formula "8"))
                        (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
                        (rule "inEqSimp_commuteLeq" (formula "8"))
                        (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "8"))
                        (builtin "One Step Simplification" (formula "20"))
                        (rule "orRight" (formula "20"))
                        (rule "eqSymm" (formula "21"))
                        (rule "inEqSimp_leqRight" (formula "20"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "applyEq" (formula "25") (term "1") (ifseqformula "2"))
                        (rule "applyEq" (formula "14") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                        (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0") (ifseqformula "16"))
                        (rule "inEqSimp_invertInEq1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "times_zero_2" (formula "1") (term "1"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                        (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "21"))
                        (rule "add_zero_right" (formula "1") (term "1"))
                        (rule "inEqSimp_contradEq3" (formula "21") (ifseqformula "1"))
                        (rule "times_zero_1" (formula "21") (term "1,0,0"))
                        (rule "add_literals" (formula "21") (term "0,0"))
                        (rule "qeq_literals" (formula "21") (term "0"))
                        (builtin "One Step Simplification" (formula "21"))
                        (rule "false_right" (formula "21"))
                        (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "9") (term "0"))
                        (builtin "One Step Simplification" (formula "9"))
                        (rule "closeFalse" (formula "9"))
                     )
                     (branch "Case 2"
                        (rule "replaceKnownSelect_taclet02_4" (formula "26") (term "1,2,0"))
                        (rule "replaceKnownSelect_taclet02_4" (formula "26") (term "0,1,0"))
                        (rule "replaceKnownSelect_taclet02_4" (formula "25") (term "1,2,0"))
                        (rule "replaceKnownSelect_taclet02_4" (formula "25") (term "0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "26") (term "1,2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "26") (term "0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "25") (term "1,2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "25") (term "0,1,0"))
                        (rule "replaceKnownSelect_taclet02_4" (formula "21") (term "1,2,0,0,1,0"))
                        (rule "replaceKnownSelect_taclet02_4" (formula "21") (term "0,1,0,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "21") (term "1,2,0,0,1,0"))
                        (rule "replaceKnownSelect_taclet02_4" (formula "21") (term "0,1,0,1,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "21") (term "0,1,0,0,1,0"))
                        (rule "replaceKnownSelect_taclet02_4" (formula "21") (term "1,2,2,0,1,1,0,0"))
                        (rule "replaceKnownSelect_taclet02_4" (formula "21") (term "1,1,2,0,1,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "21") (term "0,1,0,1,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "21") (term "1,2,2,0,1,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "21") (term "1,1,2,0,1,1,0,0"))
                        (rule "replaceKnownSelect_taclet02_4" (formula "21") (term "0,0,0,0,2,0,1,1,0,0"))
                        (rule "replaceKnownSelect_taclet02_4" (formula "21") (term "1,0,0,1,0,2,0,1,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "21") (term "0,0,0,0,2,0,1,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "21") (term "1,0,0,1,0,2,0,1,1,0,0"))
                        (rule "allRight" (formula "21") (inst "sk=iv_2"))
                        (rule "impRight" (formula "21"))
                        (rule "andLeft" (formula "1"))
                        (rule "eqSymm" (formula "14"))
                        (rule "eqSymm" (formula "16") (term "1,0"))
                        (rule "eqSymm" (formula "17") (term "1,0"))
                        (rule "replace_known_right" (formula "2") (term "0,0,0,2,0,1") (ifseqformula "24"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
                        (rule "getOfSeqDef" (formula "23") (term "0"))
                        (rule "castDel" (formula "23") (term "2,0"))
                        (rule "castDel" (formula "23") (term "1,0"))
                        (rule "add_zero_right" (formula "23") (term "0,2,1,0"))
                        (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "23"))
                        (rule "polySimp_elimSub" (formula "23") (term "1,0,0"))
                        (rule "times_zero_2" (formula "23") (term "1,1,0,0"))
                        (rule "add_zero_right" (formula "23") (term "1,0,0"))
                        (rule "castedGetAny" (formula "16") (term "1,0,0,1,0"))
                        (rule "eqSymm" (formula "16") (term "1,0"))
                        (rule "castedGetAny" (formula "17") (term "0,1,0"))
                        (rule "eqSymm" (formula "17") (term "1,0"))
                        (rule "lenOfSeqDef" (formula "2") (term "1"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,1"))
                        (rule "times_zero_2" (formula "2") (term "1,1,1"))
                        (rule "add_zero_right" (formula "2") (term "1,1"))
                        (rule "lenOfSeqDefEQ" (formula "18") (term "0") (ifseqformula "3"))
                        (rule "polySimp_elimSub" (formula "18") (term "1,0"))
                        (rule "times_zero_2" (formula "18") (term "1,1,0"))
                        (rule "add_zero_right" (formula "18") (term "1,0"))
                        (rule "castedGetAny" (formula "16") (term "1,1,0"))
                        (rule "castedGetAny" (formula "16") (term "0,1,0"))
                        (rule "eqSymm" (formula "16") (term "1,0"))
                        (rule "lenOfSeqDefEQ" (formula "17") (term "0,1,0,0,1,0,0") (ifseqformula "3"))
                        (rule "polySimp_elimSub" (formula "17") (term "1,0,1,0,0,1,0,0"))
                        (rule "times_zero_2" (formula "17") (term "1,1,0,1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "17") (term "1,0,1,0,0,1,0,0"))
                        (rule "lenOfSeqDefEQ" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "3"))
                        (rule "polySimp_elimSub" (formula "16") (term "1,0,1,0,0,1,0,0"))
                        (rule "times_zero_2" (formula "16") (term "1,1,0,1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "16") (term "1,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "23") (term "0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "0,1"))
                        (rule "add_zero_right" (formula "2") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "1"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,1,0,0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,1,0,0,1,0,0"))
                        (rule "applyEq" (formula "11") (term "0") (ifseqformula "9"))
                        (rule "inEqSimp_commuteLeq" (formula "11"))
                        (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
                        (rule "qeq_literals" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "applyEq" (formula "26") (term "1") (ifseqformula "3"))
                        (rule "applyEq" (formula "16") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                        (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0") (ifseqformula "17"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "getOfSeqDefEQ" (formula "3") (term "2,0") (ifseqformula "3"))
                        (rule "castDel" (formula "3") (term "1,2,0"))
                        (rule "add_zero_right" (formula "3") (term "1,1,2,0"))
                        (rule "polySimp_elimSub" (formula "3") (term "1,1,0,2,0"))
                        (rule "mul_literals" (formula "3") (term "1,1,1,0,2,0"))
                        (rule "add_zero_right" (formula "3") (term "1,1,0,2,0"))
                        (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,2,0"))
                        (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,2,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,2,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,1,0,2,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,2,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,1,0,2,0"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,2,0"))
                        (rule "getOfSeqDefEQ" (formula "22") (term "1") (ifseqformula "13"))
                        (rule "castDel" (formula "22") (term "2,1"))
                        (rule "castDel" (formula "22") (term "1,1"))
                        (rule "add_zero_right" (formula "22") (term "0,2,1,1"))
                        (rule "eqSymm" (formula "22"))
                        (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0"))
                        (rule "times_zero_2" (formula "22") (term "1,1,1,0,0"))
                        (rule "add_zero_right" (formula "22") (term "1,1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "22") (term "0,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                        (rule "replace_known_left" (formula "22") (term "0,0,0") (ifseqformula "1"))
                        (builtin "One Step Simplification" (formula "22"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "0,0,0"))
                        (rule "eqSymm" (formula "22"))
                        (rule "eqSeqDef2" (formula "13") (inst "iv=iv") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "getOfSeqDefEQ" (formula "14") (term "1,1,0") (ifseqformula "3"))
                        (rule "castDel" (formula "14") (term "1,1,1,0"))
                        (rule "add_zero_right" (formula "14") (term "0,1,0,1,1,1,0"))
                        (rule "add_zero_right" (formula "14") (term "1,1,1,1,1,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0,0,1,1,1,0"))
                        (rule "eqSymm" (formula "14") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,1,0,0,1,0"))
                        (rule "times_zero_2" (formula "14") (term "1,1,1,0,0,1,0"))
                        (rule "add_zero_right" (formula "14") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0"))
                        (rule "getOfSeqDefEQ" (formula "15") (term "0,1,0") (ifseqformula "3"))
                        (rule "castDel" (formula "15") (term "2,0,1,0"))
                        (rule "castDel" (formula "15") (term "1,0,1,0"))
                        (rule "add_zero_right" (formula "15") (term "1,1,1,0,1,0"))
                        (rule "add_zero_right" (formula "15") (term "0,1,0,1,0,1,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0,0,1,0,1,0"))
                        (rule "polySimp_elimSub" (formula "15") (term "1,1,0,0,1,0"))
                        (rule "times_zero_2" (formula "15") (term "1,1,1,0,0,1,0"))
                        (rule "add_zero_right" (formula "15") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0"))
                        (rule "getOfSeqDefEQ" (formula "15") (term "1,1,0") (ifseqformula "3"))
                        (rule "castDel" (formula "15") (term "1,1,1,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0,0,1,1,1,0"))
                        (rule "add_zero_right" (formula "15") (term "0,1,0,1,1,1,0"))
                        (rule "add_zero_right" (formula "15") (term "1,1,1,1,1,0"))
                        (rule "eqSymm" (formula "15") (term "1,0"))
                        (rule "polySimp_elimSub" (formula "15") (term "1,1,0,0,1,0"))
                        (rule "times_zero_2" (formula "15") (term "1,1,1,0,0,1,0"))
                        (rule "add_zero_right" (formula "15") (term "1,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,0"))
                        (rule "getOfSeqDefEQ" (formula "18") (term "2,0") (ifseqformula "3"))
                        (rule "castDel" (formula "18") (term "1,2,0"))
                        (rule "add_zero_right" (formula "18") (term "1,1,1,2,0"))
                        (rule "add_zero_right" (formula "18") (term "0,0,0,1,2,0"))
                        (rule "add_zero_right" (formula "18") (term "0,1,0,1,2,0"))
                        (rule "polySimp_elimSub" (formula "18") (term "1,1,0,2,0"))
                        (rule "times_zero_2" (formula "18") (term "1,1,1,0,2,0"))
                        (rule "add_zero_right" (formula "18") (term "1,1,0,2,0"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,2,0"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,2,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,2,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,2,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,1,0,2,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,1,0,2,0"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,2,0"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,2,0"))
                        (rule "eqSeqDef2" (formula "3") (inst "iv=iv") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "pullOutSelect" (formula "20") (term "1,0") (inst "selectSK=arr_19"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
                        (rule "eqSymm" (formula "21"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "nnf_imp2or" (formula "14") (term "0"))
                        (rule "nnf_imp2or" (formula "15") (term "0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "15") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                        (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "15") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                        (rule "Class_invariant_axiom_for_Perm" (formula "19") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1") (inst "sk=sk_10") (ifseqformula "7"))
                        (branch "Use Axiom"
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "replaceKnownSelect_taclet02_4" (formula "19") (term "0,1,1"))
                           (rule "replaceKnownSelect_taclet2_2" (formula "19") (term "0,0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "19") (term "0,1,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet2_3" (formula "19") (term "0,0,1"))
                           (rule "replaceKnownSelect_taclet2_2" (formula "19") (term "1,1,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet2_3" (formula "19") (term "1,1,0,0,0"))
                           (rule "replaceKnownSelect_taclet2_2" (formula "19") (term "0,0,1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet2_3" (formula "19") (term "0,0,1,0,1,0"))
                           (rule "replaceKnownSelect_taclet2_2" (formula "19") (term "0,1,1,0,0,1,0"))
                           (rule "replaceKnownSelect_taclet2_2" (formula "19") (term "0,0,1,1,0,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet2_3" (formula "19") (term "0,1,1,0,0,1,0"))
                           (rule "replaceKnownSelect_taclet02_4" (formula "19") (term "0,1,1,1,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet2_3" (formula "19") (term "0,0,1,1,0,1,0"))
                           (rule "replaceKnownSelect_taclet02_4" (formula "19") (term "1,2,1,1,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet2_2" (formula "19") (term "0,0,0,1,0,1,0,0"))
                           (rule "replaceKnownSelect_taclet2_2" (formula "19") (term "0,1,1,0,0,1,0,0"))
                           (rule "replaceKnownSelect_taclet02_4" (formula "19") (term "0,1,1,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "19") (term "0,1,1,1,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "19") (term "1,2,1,1,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet2_3" (formula "19") (term "0,0,0,1,0,1,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet2_3" (formula "19") (term "0,1,1,0,0,1,0,0"))
                           (rule "replaceKnownSelect_taclet2_0" (formula "19") (term "0,1,1,0,0,0,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet2_0" (formula "19") (term "1,0,1,0,0,0,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet02_4" (formula "19") (term "0,0,0,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "19") (term "0,1,1,0,0,0,0,0,0"))
                           (rule "replaceKnownSelect_taclet02_4" (formula "19") (term "0,1,1,1,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet2_1" (formula "19") (term "0,1,1,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet2_1" (formula "19") (term "1,0,1,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "19") (term "0,0,0,0,0,0,0,0,0,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "19") (term "0,1,1,1,0,0,0,0,0,0,0"))
                           (rule "andLeft" (formula "19"))
                           (rule "andLeft" (formula "19"))
                           (rule "andLeft" (formula "19"))
                           (rule "andLeft" (formula "19"))
                           (rule "andLeft" (formula "19"))
                           (rule "andLeft" (formula "19"))
                           (rule "andLeft" (formula "19"))
                           (rule "andLeft" (formula "19"))
                           (rule "andLeft" (formula "20"))
                           (rule "notLeft" (formula "19"))
                           (rule "eqSymm" (formula "26") (term "1,0"))
                           (rule "eqSymm" (formula "25") (term "1,0"))
                           (rule "eqSymm" (formula "23"))
                           (rule "castedGetAny" (formula "26") (term "0,1,0"))
                           (rule "eqSymm" (formula "26") (term "1,0"))
                           (rule "castedGetAny" (formula "25") (term "0,1,0"))
                           (rule "castedGetAny" (formula "25") (term "1,1,0"))
                           (rule "castedGetAny" (formula "25") (term "1,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "19"))
                           (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "applyEq" (formula "15") (term "1,1,1,0,0,1,0") (ifseqformula "16"))
                           (rule "eqSymm" (formula "15") (term "1,0"))
                           (rule "applyEq" (formula "14") (term "1,1,1,0,1,0,1,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "19") (term "0") (ifseqformula "16"))
                           (rule "applyEq" (formula "19") (term "0") (ifseqformula "16"))
                           (rule "inEqSimp_homoInEq0" (formula "19"))
                           (rule "polySimp_pullOutFactor1" (formula "19") (term "0"))
                           (rule "add_literals" (formula "19") (term "1,0"))
                           (rule "times_zero_1" (formula "19") (term "0"))
                           (rule "qeq_literals" (formula "19"))
                           (rule "true_left" (formula "19"))
                           (rule "applyEq" (formula "18") (term "1,1,1,0,1,2,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "18") (term "1,1,1,0,2,0") (ifseqformula "16"))
                           (rule "applyEq" (formula "4") (term "0") (ifseqformula "16"))
                           (rule "inEqSimp_homoInEq1" (formula "4"))
                           (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "1,0"))
                           (rule "times_zero_1" (formula "4") (term "0"))
                           (rule "leq_literals" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "applyEq" (formula "13") (term "1,1,1,0,0,1,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "24"))
                           (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "24"))
                           (rule "applyEq" (formula "14") (term "1,1,1,0,1,0,1,0") (ifseqformula "15"))
                           (rule "applyEq" (formula "14") (term "1,1,1,0,0,1,0") (ifseqformula "15"))
                           (rule "eqSymm" (formula "14") (term "1,0"))
                           (rule "applyEq" (formula "14") (term "1,1,1,0,1,0,1,0") (ifseqformula "15"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                           (rule "getOfSeqDefEQ" (formula "22") (term "0,1,0") (ifseqformula "20"))
                           (rule "castDel" (formula "22") (term "1,0,1,0"))
                           (rule "add_zero_right" (formula "22") (term "0,2,1,0,1,0"))
                           (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0,1,0"))
                           (rule "times_zero_2" (formula "22") (term "1,1,1,0,0,1,0"))
                           (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0"))
                           (rule "eqSeqDef2" (formula "20") (inst "iv=iv") (ifseqformula "20"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=Perm_b_6"))
                           (rule "simplifySelectOfAnon" (formula "20"))
                           (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "29")) (ifInst ""  (formula "5")))
                           (rule "elementOfSingleton" (formula "20") (term "0,0"))
                           (builtin "One Step Simplification" (formula "20"))
                           (rule "applyEqReverse" (formula "21") (term "0") (ifseqformula "20"))
                           (rule "hideAuxiliaryEq" (formula "20"))
                           (rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=Perm_perm_6"))
                           (rule "applyEq" (formula "21") (term "0,0,0,0,0,1,0") (ifseqformula "19"))
                           (rule "applyEq" (formula "21") (term "0,0,1,0,0,1,0") (ifseqformula "19"))
                           (rule "applyEq" (formula "21") (term "0,0,2,1,0,1,0") (ifseqformula "19"))
                           (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "19"))
                           (rule "simplifySelectOfAnon" (formula "19"))
                           (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "28")) (ifInst ""  (formula "5")))
                           (rule "elementOfSingleton" (formula "19") (term "0,0"))
                           (builtin "One Step Simplification" (formula "19"))
                           (rule "applyEqReverse" (formula "20") (term "0") (ifseqformula "19"))
                           (rule "applyEqReverse" (formula "20") (term "0,0,2,1,0,1,0") (ifseqformula "19"))
                           (rule "applyEqReverse" (formula "18") (term "0,0") (ifseqformula "19"))
                           (rule "applyEqReverse" (formula "19") (term "0,0,1,0,0,1,0") (ifseqformula "18"))
                           (rule "applyEqReverse" (formula "19") (term "0,0,0,0,0,1,0") (ifseqformula "18"))
                           (rule "hideAuxiliaryEq" (formula "18"))
                           (rule "nnf_imp2or" (formula "19") (term "0"))
                           (rule "nnf_imp2or" (formula "18") (term "0"))
                           (rule "nnf_notAnd" (formula "19") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                           (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "19") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "18") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "18") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                           (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "18") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                           (rule "ifthenelse_split" (formula "3") (term "0"))
                           (branch "self.a.length ≥ 1 TRUE"
                              (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "4"))
                              (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "4")))
                              (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "3"))
                              (rule "leq_literals" (formula "10") (term "0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "arrayLengthNotNegative" (formula "10") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "3"))
                              (rule "leq_literals" (formula "10") (term "0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "arrayLengthIsAShort" (formula "10") (term "1"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "lenNonNegative" (formula "10") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "10"))
                              (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
                              (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "3"))
                              (rule "leq_literals" (formula "10") (term "0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch "self.a.<created> = TRUE TRUE"
                                 (rule "close" (formula "23") (ifseqformula "2"))
                              )
                              (branch "self.a.<created> = TRUE FALSE"
                                 (rule "referencedObjectIsCreatedRight" (formula "22") (ifseqformula "24"))
                                 (rule "close" (formula "22") (ifseqformula "5"))
                              )
                           )
                           (branch "self.a.length ≥ 1 FALSE"
                              (rule "inEqSimp_geqRight" (formula "22"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "4"))
                              (rule "times_zero_2" (formula "4") (term "1,0"))
                              (rule "add_zero_right" (formula "4") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                              (rule "mul_literals" (formula "4") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "3") (term "0"))
                              (builtin "One Step Simplification" (formula "3"))
                              (rule "closeFalse" (formula "3"))
                           )
                        )
                        (branch "Show Axiom Satisfiability"
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "closeTrue" (formula "21"))
                        )
                     )
                  )
               )
               (branch "Assume seqDef{int i;}(0, self.pIdx@anon_heap_LOOP«anonHeapFunction», (int)self.c[i]) != self.c"
                  (builtin "One Step Simplification" (formula "15"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "replaceKnownSelect_taclet02_4" (formula "24") (term "1,2,0"))
                  (rule "replaceKnownSelect_taclet02_4" (formula "24") (term "0,1,0"))
                  (rule "replaceKnownSelect_taclet02_4" (formula "25") (term "1,2,0"))
                  (rule "replaceKnownSelect_taclet02_4" (formula "25") (term "0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "24") (term "1,2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "24") (term "0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "25") (term "1,2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "25") (term "0,1,0"))
                  (rule "notLeft" (formula "1"))
                  (rule "eqSymm" (formula "11"))
                  (rule "eqSymm" (formula "14") (term "1,0"))
                  (rule "eqSymm" (formula "13") (term "1,0"))
                  (rule "castedGetAny" (formula "14") (term "0,1,0"))
                  (rule "eqSymm" (formula "14") (term "1,0"))
                  (rule "castedGetAny" (formula "13") (term "0,1,0"))
                  (rule "castedGetAny" (formula "13") (term "1,1,0"))
                  (rule "castedGetAny" (formula "13") (term "1,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "7"))
                  (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
                  (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                  (rule "qeq_literals" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                  (rule "inEqSimp_commuteLeq" (formula "7"))
                  (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                  (rule "applyEq" (formula "12") (term "0,1,0,0,1,0,0") (ifseqformula "14"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
                  (rule "equalityToSeqGetAndSeqLenRight" (formula "19") (inst "iv=iv"))
                  (rule "getOfSeqDef" (formula "19") (term "0,1,0,1"))
                  (rule "castDel" (formula "19") (term "1,0,1,0,1"))
                  (rule "castDel" (formula "19") (term "2,0,1,0,1"))
                  (rule "add_zero_right" (formula "19") (term "1,1,0,1,0,1"))
                  (rule "polySimp_elimSub" (formula "19") (term "1,1,0,0,1,0,1"))
                  (rule "times_zero_2" (formula "19") (term "1,1,1,0,0,1,0,1"))
                  (rule "add_zero_right" (formula "19") (term "1,1,0,0,1,0,1"))
                  (rule "lenOfSeqDef" (formula "19") (term "1,1,0,0,1"))
                  (rule "polySimp_elimSub" (formula "19") (term "1,1,1,0,0,1"))
                  (rule "times_zero_2" (formula "19") (term "1,1,1,1,0,0,1"))
                  (rule "add_zero_right" (formula "19") (term "1,1,1,0,0,1"))
                  (rule "lenOfSeqDef" (formula "19") (term "0,0"))
                  (rule "polySimp_elimSub" (formula "19") (term "1,0,0"))
                  (rule "times_zero_2" (formula "19") (term "1,1,0,0"))
                  (rule "add_zero_right" (formula "19") (term "1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "19") (term "0,1,1,0,0,1"))
                  (rule "add_zero_right" (formula "19") (term "0,0,1,1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,1,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
                  (rule "add_zero_right" (formula "19") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0,1"))
                  (rule "applyEq" (formula "19") (term "1,0") (ifseqformula "14"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0,1"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0,1"))
                  (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0,1"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "19") (term "0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "0,0,1,0,0,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "0,0,0,1,0,0,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "19") (term "0,0,0,1,0,0,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1"))
                  (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1"))
                  (rule "eqSeqDef2" (formula "10") (inst "iv=iv") (ifseqformula "10"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "nnf_imp2or" (formula "12") (term "0"))
                  (rule "nnf_imp2or" (formula "11") (term "0"))
                  (rule "nnf_imp2or" (formula "18") (term "0,1"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                  (rule "mul_literals" (formula "12") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "11") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "18") (term "0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,1"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,1"))
                  (rule "add_literals" (formula "18") (term "0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,1"))
                  (rule "mul_literals" (formula "18") (term "1,0,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,1"))
                  (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1"))
                  (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,1"))
                  (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1"))
                  (rule "Class_invariant_axiom_for_Perm" (formula "16") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1") (inst "sk=sk_6") (ifseqformula "4"))
                  (branch "Use Axiom"
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "replaceKnownSelect_taclet02_4" (formula "16") (term "0,1,1"))
                     (rule "replaceKnownSelect_taclet2_2" (formula "16") (term "0,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "16") (term "0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet2_3" (formula "16") (term "0,0,1"))
                     (rule "replaceKnownSelect_taclet2_2" (formula "16") (term "1,1,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet2_3" (formula "16") (term "1,1,0,0,0"))
                     (rule "replaceKnownSelect_taclet2_2" (formula "16") (term "0,0,1,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet2_3" (formula "16") (term "0,0,1,0,1,0"))
                     (rule "replaceKnownSelect_taclet2_2" (formula "16") (term "0,1,1,0,0,1,0"))
                     (rule "replaceKnownSelect_taclet2_2" (formula "16") (term "0,0,1,1,0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet2_3" (formula "16") (term "0,1,1,0,0,1,0"))
                     (rule "replaceKnownSelect_taclet2_2" (formula "16") (term "0,0,0,1,0,1,0,0"))
                     (rule "replaceKnownSelect_taclet2_2" (formula "16") (term "0,1,1,0,0,1,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet2_3" (formula "16") (term "0,0,1,1,0,1,0"))
                     (rule "replaceKnownSelect_taclet02_4" (formula "16") (term "1,2,1,1,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet02_4" (formula "16") (term "0,1,1,1,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet02_4" (formula "16") (term "0,1,1,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet2_3" (formula "16") (term "0,0,0,1,0,1,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet2_3" (formula "16") (term "0,1,1,0,0,1,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "16") (term "1,2,1,1,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "16") (term "0,1,1,1,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet02_4" (formula "16") (term "0,0,0,0,0,0,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet2_0" (formula "16") (term "0,1,1,0,0,0,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet2_0" (formula "16") (term "1,0,1,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "16") (term "0,1,1,0,0,0,0,0,0"))
                     (rule "replaceKnownSelect_taclet02_4" (formula "16") (term "0,1,1,1,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "16") (term "0,0,0,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet2_1" (formula "16") (term "0,1,1,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet2_1" (formula "16") (term "1,0,1,0,0,0,0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet02_5" (formula "16") (term "0,1,1,1,0,0,0,0,0,0,0"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "notLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "eqSymm" (formula "23") (term "1,0"))
                     (rule "eqSymm" (formula "22") (term "1,0"))
                     (rule "eqSymm" (formula "20"))
                     (rule "castedGetAny" (formula "23") (term "0,1,0"))
                     (rule "eqSymm" (formula "23") (term "1,0"))
                     (rule "castedGetAny" (formula "22") (term "0,1,0"))
                     (rule "castedGetAny" (formula "22") (term "1,1,0"))
                     (rule "castedGetAny" (formula "22") (term "1,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "16"))
                     (rule "applyEq" (formula "22") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
                     (rule "applyEq" (formula "23") (term "0,1,0,0,1,0,0") (ifseqformula "13"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
                     (rule "getOfSeqDefEQ" (formula "22") (term "0,1,0") (ifseqformula "20"))
                     (rule "castDel" (formula "22") (term "1,0,1,0"))
                     (rule "add_zero_right" (formula "22") (term "0,2,1,0,1,0"))
                     (rule "polySimp_elimSub" (formula "22") (term "1,1,0,0,1,0"))
                     (rule "times_zero_2" (formula "22") (term "1,1,1,0,0,1,0"))
                     (rule "add_zero_right" (formula "22") (term "1,1,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0"))
                     (rule "eqSeqDef2" (formula "20") (inst "iv=iv") (ifseqformula "20"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "true_left" (formula "20"))
                     (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=Perm_b_2"))
                     (rule "simplifySelectOfAnon" (formula "20"))
                     (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "28")) (ifInst ""  (formula "3")))
                     (rule "elementOfSingleton" (formula "20") (term "0,0"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "applyEqReverse" (formula "21") (term "0") (ifseqformula "20"))
                     (rule "hideAuxiliaryEq" (formula "20"))
                     (rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=Perm_perm_2"))
                     (rule "applyEq" (formula "21") (term "0,0,0,0,0,1,0") (ifseqformula "19"))
                     (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "19"))
                     (rule "applyEq" (formula "21") (term "0,0,1,0,0,1,0") (ifseqformula "19"))
                     (rule "applyEq" (formula "21") (term "0,0,2,1,0,1,0") (ifseqformula "19"))
                     (rule "simplifySelectOfAnon" (formula "19"))
                     (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "27")) (ifInst ""  (formula "3")))
                     (rule "elementOfSingleton" (formula "19") (term "0,0"))
                     (builtin "One Step Simplification" (formula "19"))
                     (rule "applyEqReverse" (formula "21") (term "0,0,2,1,0,1,0") (ifseqformula "19"))
                     (rule "applyEqReverse" (formula "21") (term "0,0,1,0,0,1,0") (ifseqformula "19"))
                     (rule "applyEqReverse" (formula "18") (term "0,0") (ifseqformula "19"))
                     (rule "applyEqReverse" (formula "20") (term "0,0,0,0,0,1,0") (ifseqformula "18"))
                     (rule "applyEqReverse" (formula "19") (term "0") (ifseqformula "18"))
                     (rule "hideAuxiliaryEq" (formula "18"))
                     (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "17"))
                     (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq0" (formula "18"))
                     (rule "polySimp_pullOutFactor1" (formula "18") (term "0"))
                     (rule "add_literals" (formula "18") (term "1,0"))
                     (rule "times_zero_1" (formula "18") (term "0"))
                     (rule "qeq_literals" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "applyEq" (formula "21") (term "0,0,1,1,0,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "21") (term "0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "2"))
                     (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "1,0"))
                     (rule "times_zero_1" (formula "2") (term "0"))
                     (rule "leq_literals" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "applyEq" (formula "20") (term "1,1,1,0,0,1,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "24") (term "1,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "20") (term "1,1,1,0,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "20") (term "1,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "eqSymm" (formula "20") (term "1,0"))
                     (rule "applyEq" (formula "16") (term "0") (ifseqformula "1"))
                     (rule "nnf_imp2or" (formula "17") (term "0"))
                     (rule "nnf_imp2or" (formula "16") (term "0"))
                     (rule "nnf_notAnd" (formula "17") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "17") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                     (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "17") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "16") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                     (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                     (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                     (rule "commute_or" (formula "18") (term "0"))
                     (rule "inEqSimp_or_weaken1" (formula "18") (term "0"))
                     (rule "add_zero_right" (formula "18") (term "1,0,0"))
                     (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "7")))
                     (rule "allRight" (formula "18") (inst "sk=iv_0"))
                     (rule "orRight" (formula "18"))
                     (rule "orRight" (formula "18"))
                     (rule "inEqSimp_geqRight" (formula "19"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "19"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "replace_known_left" (formula "20") (term "0,0,0") (ifseqformula "1"))
                     (builtin "One Step Simplification" (formula "20"))
                     (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,0,0"))
                     (rule "mul_literals" (formula "20") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                     (rule "arrayLengthNotNegative" (formula "10") (term "1"))
                     (rule "lenNonNegative" (formula "10") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "10"))
                     (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
                     (rule "arrayLengthIsAShort" (formula "15") (term "1"))
                     (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "lenNonNegative" (formula "15") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "15"))
                     (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                     (rule "ifthenelse_to_or_left" (formula "18") (term "1,0"))
                     (rule "eqSymm" (formula "18") (term "1,1,1,0"))
                     (rule "nnf_notAnd" (formula "18") (term "0,0,1,0"))
                     (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,1,0"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,1,0"))
                     (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,1,0"))
                     (rule "mul_literals" (formula "18") (term "1,0,0,0,1,0"))
                     (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,1,0"))
                     (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,1,0"))
                     (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1,0"))
                     (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1,0"))
                     (rule "commute_or" (formula "18") (term "1,1,0"))
                     (rule "equal_bsum2" (formula "25") (ifseqformula "17"))
                     (rule "allRight" (formula "25") (inst "sk=i_2"))
                     (rule "impRight" (formula "25"))
                     (rule "andLeft" (formula "1"))
                     (rule "eqSymm" (formula "27"))
                     (rule "inEqSimp_ltToLeq" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=arr_3"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                     (rule "eqSymm" (formula "28"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "bsum_equal_split4" (formula "29") (ifseqformula "20"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "bsum_lower_equals_upper" (formula "29") (term "0,2,1"))
                     (rule "bsum_lower_equals_upper" (formula "29") (term "1,1,1"))
                     (rule "less_literals" (formula "29") (term "0,1"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "eqSymm" (formula "29") (term "1"))
                     (rule "polySimp_elimSub" (formula "29") (term "2,0,1"))
                     (rule "polySimp_addComm0" (formula "29") (term "2,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "29") (term "0"))
                     (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "12"))
                     (builtin "One Step Simplification" (formula "29"))
                     (rule "bsum_equal_split2" (formula "30") (ifseqformula "20"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "bsum_lower_equals_upper" (formula "30") (term "0,1,1"))
                     (rule "bsum_lower_equals_upper" (formula "30") (term "1,2,1"))
                     (rule "eqSymm" (formula "30") (term "1,1"))
                     (rule "polySimp_elimSub" (formula "30") (term "2,0,2,1"))
                     (rule "polySimp_elimSub" (formula "30") (term "2,0,1,1"))
                     (rule "polySimp_addComm0" (formula "30") (term "2,0,1,1"))
                     (rule "replace_known_right" (formula "30") (term "1,1") (ifseqformula "29"))
                     (rule "inEqSimp_ltToLeq" (formula "30") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,1"))
                     (rule "polySimp_pullOutFactor2b" (formula "30") (term "0,0,1"))
                     (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
                     (rule "add_literals" (formula "30") (term "0,0,1"))
                     (rule "leq_literals" (formula "30") (term "0,1"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "inEqSimp_commuteLeq" (formula "30") (term "0"))
                     (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "12"))
                     (builtin "One Step Simplification" (formula "30"))
                     (rule "cnf_rightDist" (formula "21") (term "1,1,0"))
                     (rule "cnf_rightDist" (formula "21") (term "0"))
                     (rule "distr_forallAnd" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "commute_or" (formula "22") (term "0"))
                     (rule "shift_paren_or" (formula "21") (term "0"))
                     (rule "commute_or" (formula "22") (term "1,1,0"))
                     (rule "shift_paren_or" (formula "21") (term "0,0"))
                     (rule "cnf_rightDist" (formula "22") (term "0"))
                     (rule "distr_forallAnd" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "commute_or_2" (formula "23") (term "0"))
                     (rule "shift_paren_or" (formula "22") (term "0"))
                     (rule "commute_or" (formula "23") (term "0,0"))
                     (rule "ifthenelse_split" (formula "5") (term "0"))
                     (branch "self.a.length ≥ 1 TRUE"
                        (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "6"))
                        (builtin "One Step Simplification" (formula "26"))
                        (rule "eqSymm" (formula "26"))
                        (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "5"))
                        (rule "leq_literals" (formula "13") (term "0"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "true_left" (formula "13"))
                        (rule "bsum_zero_right" (formula "31"))
                        (rule "allRight" (formula "31") (inst "sk=j_1"))
                        (rule "impRight" (formula "31"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "33"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1"))
                        (rule "polySimp_elimOne" (formula "33") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=arr_4"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
                        (rule "eqSymm" (formula "34"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "bsum_zero_right" (formula "36"))
                        (rule "allRight" (formula "36") (inst "sk=i_3"))
                        (rule "impRight" (formula "36"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "polySimp_sepNegMonomial" (formula "38"))
                        (rule "polySimp_mulLiterals" (formula "38") (term "0"))
                        (rule "polySimp_elimOne" (formula "38") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=arr_5"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
                        (rule "eqSymm" (formula "39"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "ifthenelse_split" (formula "7") (term "0"))
                        (branch "self.a.<created> = TRUE TRUE"
                           (rule "applyEqReverse" (formula "37") (term "1") (ifseqformula "8"))
                           (rule "hideAuxiliaryEq" (formula "8"))
                           (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "7"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "39") (term "1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "6"))
                           (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "36") (term "1") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "allLeft" (formula "21") (inst "t=iv_0"))
                           (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "10"))
                           (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                           (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "21") (term "0,0,1"))
                           (rule "leq_literals" (formula "21") (term "0,1"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "21"))
                           (rule "qeq_literals" (formula "8") (term "0"))
                           (builtin "One Step Simplification" (formula "8"))
                           (rule "closeFalse" (formula "8"))
                        )
                        (branch "self.a.<created> = TRUE FALSE"
                           (rule "referencedObjectIsCreatedRight" (formula "31") (ifseqformula "33"))
                           (rule "close" (formula "31") (ifseqformula "14"))
                        )
                     )
                     (branch "self.a.length ≥ 1 FALSE"
                        (rule "inEqSimp_geqRight" (formula "25"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "mul_literals" (formula "6") (term "1,0"))
                        (rule "add_zero_right" (formula "6") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "mul_literals" (formula "6") (term "1"))
                        (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "5") (term "0"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "closeFalse" (formula "5"))
                     )
                  )
                  (branch "Show Axiom Satisfiability"
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "closeTrue" (formula "18"))
                  )
               )
            )
            (branch "Show Axiom Satisfiability"
               (builtin "One Step Simplification" (formula "12"))
               (rule "closeTrue" (formula "12"))
            )
         )
         (branch "Case 2"
            (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "10")))
            (rule "closeTrue" (formula "14"))
         )
      )
      (branch "Case 2"
         (builtin "One Step Simplification" (formula "14"))
         (rule "closeTrue" (formula "14"))
      )
   )
   (branch "Exceptional Post (hasNext)"
      (builtin "One Step Simplification" (formula "10"))
      (rule "replaceKnownSelect_taclet2_0" (formula "10") (term "0,0,1,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet2_1" (formula "10") (term "0,0,1,0,1"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "10"))
      (rule "close" (formula "13") (ifseqformula "12"))
   )
   (branch "Pre (hasNext)"
      (builtin "One Step Simplification" (formula "11"))
      (rule "wellFormedAnon" (formula "11"))
      (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "7")))
      (rule "closeTrue" (formula "11"))
   )
)
)

}
