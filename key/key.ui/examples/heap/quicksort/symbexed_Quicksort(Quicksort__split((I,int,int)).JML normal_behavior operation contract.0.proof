\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Nov 12 17:45:56 CET 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource ".";

\proofObligation "#Proof Obligation Settings
#Tue Nov 12 17:45:56 CET 2019
contract=Quicksort[Quicksort\\:\\:split([I,int,int)].JML normal_behavior operation contract.0
name=Quicksort[Quicksort\\:\\:split([I,int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Andy" ) (keyVersion "2bbea99a67"))

(autoModeTime "1002")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "array,from,to,self,result,exc,heapAtPre,o,f"))
(rule "translateJavaSubInt" (formula "1") (term "1,0,0,1,1,1,1,1,0,0,0,1,1"))
(rule "translateJavaSubInt" (formula "1") (term "1,0,0,1,1,1,0"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,1,1,0,1,0,1,1,1,1,1,0,0,0,1,1"))
(rule "translateJavaSubInt" (formula "1") (term "0,2,0,1,0,1,0,1,1,1,1,0,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,2,1,1,0,1,0,1,1,1,0"))
(rule "translateJavaSubInt" (formula "1") (term "1,1,0,1,0"))
(rule "translateJavaSubInt" (formula "1") (term "0,2,0,1,0,1,0,1,1,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "12"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "14") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "13"))
 (builtin "One Step Simplification" (formula "4"))
(rule "polySimp_elimSub" (formula "14") (term "0,2,0,1,0,1,0,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "14") (term "1,0,2,0,1,0,1,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "14") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "14") (term "1,1,0,0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "8") (term "1"))
(rule "mul_literals" (formula "8") (term "1,1"))
(rule "polySimp_elimSub" (formula "9") (term "0,2,0,1,0,1"))
(rule "mul_literals" (formula "9") (term "1,0,2,0,1,0,1"))
(rule "polySimp_elimSub" (formula "10") (term "1,0"))
(rule "mul_literals" (formula "10") (term "1,1,0"))
(rule "polySimp_addComm0" (formula "14") (term "0,2,1,1,0,1,0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "10") (term "0,2,1,1,0,1"))
(rule "polySimp_addComm0" (formula "14") (term "0,2,0,1,0,1,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "14") (term "1,0,0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "8") (term "1"))
(rule "polySimp_addComm0" (formula "9") (term "0,2,0,1,0,1"))
(rule "polySimp_addComm0" (formula "10") (term "1,0"))
(rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0,1,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1"))
(rule "assignment" (formula "14") (term "1"))
 (builtin "One Step Simplification" (formula "14"))
(rule "array2seqDef" (formula "14") (term "0,0,0,0,0,1") (inst "u=u"))
(rule "array2seqDef" (formula "14") (term "1,0,0,0,0,1") (inst "u=u"))
(rule "elementOfArrayRange" (formula "14") (term "0,0,0,0,1,0,1") (inst "iv=iv"))
(rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,1,0,0,0,0,1,0,1"))
(rule "Class_invariant_axiom_for_Quicksort" (formula "11") (inst "sk=sk_0") (ifseqformula "3"))
(branch "Use Axiom"
   (rule "true_left" (formula "11"))
   (rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_split,savedHeapBefore_split,_arrayBefore_split,_fromBefore_split,_toBefore_split"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "variableDeclarationAssign" (formula "13") (term "1"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "i"))
   (rule "assignment" (formula "13") (term "1"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "variableDeclarationAssign" (formula "13") (term "1"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "pivot"))
   (rule "assignment_array2" (formula "13"))
   (branch "Normal Execution (_array != null)"
       (builtin "One Step Simplification" (formula "13"))
      (rule "for_to_while" (formula "13") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
      (rule "variableDeclarationAssign" (formula "13") (term "1"))
      (rule "variableDeclaration" (formula "13") (term "1") (newnames "j"))
      (rule "assignment" (formula "13") (term "1"))
       (builtin "One Step Simplification" (formula "13"))
       (builtin "Loop Invariant" (formula "13") (newnames "variant,b,heapBefore_LOOP,jBefore_LOOP,iBefore_LOOP,j_0,i_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
      (branch "Invariant Initially Valid"
          (opengoal " ")
      )
      (branch "Body Preserves Invariant"
          (builtin "One Step Simplification" (formula "15"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "translateJavaAddInt" (formula "15") (term "0,1,1,1,0,1,1"))
         (rule "translateJavaAddInt" (formula "15") (term "0,0,0,0,1,1,1,0,1"))
         (rule "translateJavaSubInt" (formula "15") (term "2,2,0,0,0,0,1,0,1,1,0,1,1"))
         (rule "translateJavaSubInt" (formula "15") (term "1,0,1,0,0,1,1,0,1,1"))
         (rule "translateJavaSubInt" (formula "15") (term "0,2,0,1,0,1,1,0,0,0,1,1,0,1,1"))
         (rule "translateJavaSubInt" (formula "15") (term "2,1,0,1,0,1,1,0,1"))
         (rule "translateJavaAddInt" (formula "15") (term "0,2,1,1,0,1,1,0,0,1,1,0,1,1"))
         (rule "translateJavaSubInt" (formula "15") (term "2,1,0,1,1,0,0"))
         (rule "translateJavaSubInt" (formula "12") (term "2,1,0,0,1,0,0,0,0"))
         (rule "translateJavaSubInt" (formula "12") (term "2,1,0,0,1,0,1,1,0"))
         (rule "translateJavaSubInt" (formula "12") (term "2,1,0,0,1,0,1,0,0,0"))
         (rule "translateJavaSubInt" (formula "12") (term "2,1,0,0,1,0,1,0,0"))
         (rule "translateJavaAddInt" (formula "12") (term "0,2,1,1,0,1,1"))
         (rule "translateJavaSubInt" (formula "12") (term "0,2,0,1,0,1,1,0"))
         (rule "translateJavaSubInt" (formula "12") (term "2,1,0,1,1,0,1,1"))
         (rule "translateJavaSubInt" (formula "12") (term "2,1,0,1,1,0,1,1,0"))
         (rule "translateJavaSubInt" (formula "12") (term "2,1,0,0,1,0,1,1"))
         (rule "translateJavaSubInt" (formula "12") (term "1,0,1"))
         (rule "translateJavaAddInt" (formula "15") (term "0,0,0,0,1,1,1,0,1,1"))
         (rule "translateJavaSubInt" (formula "15") (term "0,0,0,1,1,1,0,1"))
         (rule "translateJavaSubInt" (formula "15") (term "0,0,0,1,1,1,0,1,1"))
         (rule "translateJavaSubInt" (formula "15") (term "0,0,1,1,1,0,1"))
         (rule "translateJavaSubInt" (formula "15") (term "0,0,1,1,1,0,1,1"))
         (rule "translateJavaAddInt" (formula "15") (term "0,1,1,1,0,1"))
         (rule "andLeft" (formula "12"))
         (rule "impRight" (formula "16"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "15"))
         (rule "eqSymm" (formula "24") (term "1,0,0,1,0,1,1,0,1"))
         (rule "polySimp_elimSub" (formula "21") (term "1,0"))
         (rule "mul_literals" (formula "21") (term "1,1,0"))
         (rule "polySimp_elimSub" (formula "21") (term "2,1,0,0,1,0,1"))
         (rule "mul_literals" (formula "21") (term "1,2,1,0,0,1,0,1"))
         (rule "polySimp_elimSub" (formula "21") (term "2,1,0,1,1,0,1"))
         (rule "mul_literals" (formula "21") (term "1,2,1,0,1,1,0,1"))
         (rule "polySimp_pullOutFactor3" (formula "24") (term "0,0,0,0,1,1,1,0,1"))
         (rule "polySimp_elimSub" (formula "24") (term "2,2,0,0,0,0,1,0,1,1,0,1"))
         (rule "mul_literals" (formula "24") (term "1,2,2,0,0,0,0,1,0,1,1,0,1"))
         (rule "polySimp_elimSub" (formula "24") (term "0,2,0,1,0,1,1,0,0,0,1,1,0,1"))
         (rule "mul_literals" (formula "24") (term "1,0,2,0,1,0,1,1,0,0,0,1,1,0,1"))
         (rule "polySimp_elimSub" (formula "24") (term "2,1,0,1,0,1,1,0"))
         (rule "mul_literals" (formula "24") (term "1,2,1,0,1,0,1,1,0"))
         (rule "polySimp_elimSub" (formula "24") (term "1,0,1,0,0,1,1,0,1"))
         (rule "mul_literals" (formula "24") (term "1,1,0,1,0,0,1,1,0,1"))
         (rule "polySimp_elimSub" (formula "24") (term "0,0,1,1,1,0"))
         (rule "polySimp_elimSub" (formula "1") (term "2,1,0,1,1,0"))
         (rule "mul_literals" (formula "1") (term "1,2,1,0,1,1,0"))
         (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,0,1"))
         (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,0,1"))
         (rule "polySimp_elimSub" (formula "20") (term "2,1,0,1,1,0,1"))
         (rule "mul_literals" (formula "20") (term "1,2,1,0,1,1,0,1"))
         (rule "polySimp_elimSub" (formula "20") (term "0,2,0,1,0,1"))
         (rule "mul_literals" (formula "20") (term "1,0,2,0,1,0,1"))
         (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,0"))
         (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,0"))
         (rule "polySimp_elimSub" (formula "18") (term "2,1,0,0,1,0"))
         (rule "mul_literals" (formula "18") (term "1,2,1,0,0,1,0"))
         (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0"))
         (rule "mul_literals" (formula "17") (term "1,2,1,0,0"))
         (rule "polySimp_elimSub" (formula "24") (term "0,0,1,1,1,0,1"))
         (rule "polySimp_pullOutFactor3" (formula "24") (term "0,0,0,0,1,1,1,0"))
         (rule "polySimp_elimSub" (formula "24") (term "0,0,0,1,1,1,0,1"))
         (rule "polySimp_elimSub" (formula "24") (term "0,0,0,1,1,1,0"))
         (rule "polySimp_addComm0" (formula "21") (term "0,2,1,1,0,1"))
         (rule "polySimp_addComm0" (formula "24") (term "0,2,1,1,0,1,1,0,0,1,1,0,1"))
         (rule "polySimp_addComm0" (formula "21") (term "1,0"))
         (rule "polySimp_addComm0" (formula "21") (term "2,1,0,0,1,0,1"))
         (rule "polySimp_addComm0" (formula "21") (term "2,1,0,1,1,0,1"))
         (rule "polySimp_addComm0" (formula "24") (term "2,2,0,0,0,0,1,0,1,1,0,1"))
         (rule "polySimp_addComm0" (formula "24") (term "0,2,0,1,0,1,1,0,0,0,1,1,0,1"))
         (rule "polySimp_addComm0" (formula "24") (term "2,1,0,1,0,1,1,0"))
         (rule "polySimp_addComm0" (formula "24") (term "1,0,1,0,0,1,1,0,1"))
         (rule "polySimp_addComm0" (formula "1") (term "2,1,0,1,1,0"))
         (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,0,1"))
         (rule "polySimp_addComm0" (formula "20") (term "2,1,0,1,1,0,1"))
         (rule "polySimp_addComm0" (formula "20") (term "0,2,0,1,0,1"))
         (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,0"))
         (rule "polySimp_addComm0" (formula "18") (term "2,1,0,0,1,0"))
         (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0"))
         (rule "polySimp_addComm1" (formula "24") (term "0,1,1,1,0,1"))
         (rule "polySimp_addComm1" (formula "24") (term "0,1,1,1,0"))
         (rule "polySimp_addComm1" (formula "24") (term "0,0,1,1,1,0,1"))
         (rule "polySimp_addComm1" (formula "24") (term "0,0,1,1,1,0"))
         (rule "polySimp_addComm1" (formula "24") (term "0,1,1,1,0,1"))
         (rule "polySimp_addComm1" (formula "24") (term "0,1,1,1,0"))
         (rule "polySimp_addComm0" (formula "24") (term "0,0,0,1,1,1,0,1"))
         (rule "polySimp_addComm0" (formula "24") (term "0,0,0,1,1,1,0"))
         (rule "polySimp_addComm1" (formula "24") (term "0,0,1,1,1,0"))
         (rule "polySimp_addComm1" (formula "24") (term "0,1,1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,1,0,0,0,1,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,1,0,0,1,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0,0,0,0,0,1,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1,0,0,0,0,0,0,0,1,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0,0,0,0,1,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0,0,0,0,0,0,1,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,0,0,0,0,0,0,0,1,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "13"))
         (rule "inEqSimp_commuteLeq" (formula "14"))
         (rule "inEqSimp_commuteLeq" (formula "15"))
         (rule "inEqSimp_commuteLeq" (formula "16"))
         (rule "variableDeclarationAssign" (formula "1") (term "1"))
         (rule "variableDeclarationAssign" (formula "24") (term "1"))
         (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_1"))
         (rule "variableDeclaration" (formula "24") (term "1") (newnames "exc_1"))
         (rule "assignment" (formula "24") (term "1"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "variableDeclaration" (formula "24") (term "1") (newnames "thrownExc"))
         (rule "blockThrow" (formula "24") (term "1,0,0,1"))
         (rule "blockThrow" (formula "24") (term "1,0,0,1"))
         (rule "array2seqDef" (formula "17") (term "1") (inst "u=u"))
         (rule "narrowSelectArrayType" (formula "17") (term "2,1") (ifseqformula "2") (ifseqformula "23"))
         (rule "array2seqDef" (formula "17") (term "0") (inst "u=u"))
         (rule "array2seqDef" (formula "24") (term "1,1,0,0,0,0,0,0,1,1,0,1") (inst "u=u"))
         (rule "elementOfArrayRange" (formula "24") (term "0,0,0,0,1,0,1,1,0,1") (inst "iv=iv"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,0,1,0,0,0,0,1,0,1,1,0,1"))
         (rule "array2seqDef" (formula "24") (term "0,1,0,0,0,0,0,0,1,1,0,1") (inst "u=u"))
         (rule "pullOutSelect" (formula "21") (term "1,1,0,1") (inst "selectSK=arr_0"))
         (rule "simplifySelectOfAnon" (formula "21"))
          (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "24")) (ifInst ""  (formula "5")))
         (rule "elementOfArrayRangeConcrete" (formula "21") (term "0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "pullOutSelect" (formula "20") (term "0,1,0,1") (inst "selectSK=arr_1"))
         (rule "simplifySelectOfAnon" (formula "20"))
          (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "25")) (ifInst ""  (formula "5")))
         (rule "elementOfArrayRangeConcrete" (formula "20") (term "0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "boxToDiamond" (formula "1") (term "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "commute_and" (formula "18") (term "0,0"))
         (rule "commute_and" (formula "17") (term "0,0"))
         (rule "less_than_comparison_simple" (formula "23") (term "1"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "methodCallEmpty" (formula "23") (term "1"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "emptyModality" (formula "23") (term "1"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "notRight" (formula "23"))
         (rule "arrayLengthNotNegative" (formula "9") (term "1,1"))
         (rule "arrayLengthIsAShort" (formula "10") (term "1,1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "ifUnfold" (formula "27") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "27") (term "1") (newnames "x"))
         (rule "less_than_comparison_simple" (formula "27") (term "1"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "replace_known_left" (formula "27") (term "0,0,1,0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "ifSplit" (formula "27"))
         (branch "if x true"
             (builtin "One Step Simplification" (formula "1"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "true_left" (formula "1"))
            (rule "ifUnfold" (formula "27") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "27") (term "1") (newnames "x_1"))
            (rule "compound_less_equal_than_comparison_1" (formula "27") (term "1") (inst "#v0=x_2"))
            (rule "variableDeclarationAssign" (formula "27") (term "1"))
            (rule "variableDeclaration" (formula "27") (term "1") (newnames "x_2"))
            (rule "assignment_array2" (formula "27"))
            (branch "Normal Execution (_array != null)"
                (builtin "One Step Simplification" (formula "27"))
               (rule "pullOutSelect" (formula "27") (term "0,1,0") (inst "selectSK=arr_2"))
               (rule "simplifySelectOfAnon" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")) (ifInst ""  (formula "6")))
               (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "less_equal_than_comparison_simple" (formula "28") (term "1"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,1,0"))
               (rule "ifSplit" (formula "28"))
               (branch "if x_1 true"
                   (builtin "One Step Simplification" (formula "29"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "variableDeclarationAssign" (formula "29") (term "1"))
                  (rule "variableDeclaration" (formula "29") (term "1") (newnames "t"))
                  (rule "assignment_array2" (formula "29"))
                  (branch "Normal Execution (_array != null)"
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "pullOutSelect" (formula "29") (term "0,1,0") (inst "selectSK=arr_3"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")) (ifInst ""  (formula "8")))
                     (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
                     (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "eval_order_array_access3" (formula "30") (term "1") (inst "#v1=x_1") (inst "#v2=x") (inst "#v0=x_arr"))
                     (rule "variableDeclarationAssign" (formula "30") (term "1"))
                     (rule "variableDeclaration" (formula "30") (term "1") (newnames "x_arr"))
                     (rule "assignment" (formula "30") (term "1"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "variableDeclarationAssign" (formula "30") (term "1"))
                     (rule "variableDeclaration" (formula "30") (term "1") (newnames "x_3"))
                     (rule "assignment" (formula "30") (term "1"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "variableDeclarationAssign" (formula "30") (term "1"))
                     (rule "variableDeclaration" (formula "30") (term "1") (newnames "x_4"))
                     (rule "assignment_array2" (formula "30"))
                     (branch "Normal Execution (_array != null)"
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "replaceKnownSelect_taclet00100_2" (formula "30") (term "0,1,0"))
                        (rule "assignment_to_primitive_array_component" (formula "30"))
                        (branch "Normal Execution (x_arr != null)"
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "assignment_to_primitive_array_component" (formula "30"))
                           (branch "Normal Execution (_array != null)"
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "postincrement" (formula "30") (term "1"))
                              (rule "compound_int_cast_expression" (formula "30") (term "1") (inst "#v=x"))
                              (rule "variableDeclarationAssign" (formula "30") (term "1"))
                              (rule "variableDeclaration" (formula "30") (term "1") (newnames "x_5"))
                              (rule "remove_parentheses_right" (formula "30") (term "1"))
                              (rule "assignmentAdditionInt" (formula "30") (term "1"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "translateJavaAddInt" (formula "30") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "30") (term "0,1,0"))
                              (rule "widening_identity_cast_5" (formula "30") (term "1"))
                              (rule "assignment" (formula "30") (term "1"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "blockEmpty" (formula "30") (term "1"))
                              (rule "postincrement" (formula "30") (term "1"))
                              (rule "compound_int_cast_expression" (formula "30") (term "1") (inst "#v=x"))
                              (rule "variableDeclarationAssign" (formula "30") (term "1"))
                              (rule "variableDeclaration" (formula "30") (term "1") (newnames "x_6"))
                              (rule "remove_parentheses_right" (formula "30") (term "1"))
                              (rule "assignmentAdditionInt" (formula "30") (term "1"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "translateJavaAddInt" (formula "30") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "30") (term "0,1,0"))
                              (rule "widening_identity_cast_5" (formula "30") (term "1"))
                              (rule "assignment" (formula "30") (term "1"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "tryEmpty" (formula "30") (term "1"))
                              (rule "methodCallEmpty" (formula "30") (term "1"))
                              (rule "emptyModality" (formula "30") (term "1"))
                               (builtin "One Step Simplification" (formula "30"))
                               (opengoal " ")
                           )
                           (branch "Null Reference (_array = null)"
                               (opengoal " ")
                           )
                           (branch "Index Out of Bounds (_array != null, but j Out of Bounds!)"
                               (opengoal " ")
                           )
                        )
                        (branch "Null Reference (x_arr = null)"
                            (opengoal " ")
                        )
                        (branch "Index Out of Bounds (x_arr != null, but x_3 Out of Bounds!)"
                            (opengoal " ")
                        )
                     )
                     (branch "Null Reference (_array = null)"
                         (opengoal " ")
                     )
                     (branch "Index Out of Bounds (_array != null, but j Out of Bounds!)"
                         (opengoal " ")
                     )
                  )
                  (branch "Null Reference (_array = null)"
                      (opengoal " ")
                  )
                  (branch "Index Out of Bounds (_array != null, but i Out of Bounds!)"
                      (opengoal " ")
                  )
               )
               (branch "if x_1 false"
                   (builtin "One Step Simplification" (formula "29"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "blockEmpty" (formula "29") (term "1"))
                  (rule "postincrement" (formula "29") (term "1"))
                  (rule "compound_int_cast_expression" (formula "29") (term "1") (inst "#v=x"))
                  (rule "variableDeclarationAssign" (formula "29") (term "1"))
                  (rule "variableDeclaration" (formula "29") (term "1") (newnames "x_3"))
                  (rule "remove_parentheses_right" (formula "29") (term "1"))
                  (rule "assignmentAdditionInt" (formula "29") (term "1"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "translateJavaAddInt" (formula "29") (term "0,1,0"))
                  (rule "polySimp_addComm0" (formula "29") (term "0,1,0"))
                  (rule "widening_identity_cast_5" (formula "29") (term "1"))
                  (rule "assignment" (formula "29") (term "1"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "tryEmpty" (formula "29") (term "1"))
                  (rule "methodCallEmpty" (formula "29") (term "1"))
                  (rule "emptyModality" (formula "29") (term "1"))
                   (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "15")))
                   (opengoal " ")
               )
            )
            (branch "Null Reference (_array = null)"
                (opengoal " ")
            )
            (branch "Index Out of Bounds (_array != null, but j Out of Bounds!)"
                (opengoal " ")
            )
         )
         (branch "if x false"
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Use Case"
          (builtin "One Step Simplification" (formula "12"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "translateJavaSubInt" (formula "12") (term "2,1,0,0,1,0,1,1"))
         (rule "translateJavaSubInt" (formula "12") (term "2,1,0,0,1,0,1,0,0,0"))
         (rule "translateJavaSubInt" (formula "12") (term "0,2,0,1,0,1,1,0"))
         (rule "translateJavaSubInt" (formula "12") (term "2,1,0,0,1,0,1,1,0"))
         (rule "translateJavaSubInt" (formula "12") (term "1,0,1"))
         (rule "translateJavaAddInt" (formula "12") (term "0,2,1,1,0,1,1"))
         (rule "translateJavaSubInt" (formula "12") (term "2,1,0,1,1,0,1,1"))
         (rule "translateJavaSubInt" (formula "12") (term "2,1,0,0,1,0,1,0,0"))
         (rule "translateJavaSubInt" (formula "12") (term "2,1,0,1,1,0,1,1,0"))
         (rule "translateJavaSubInt" (formula "12") (term "2,1,0,0,1,0,0,0,0"))
         (rule "translateJavaSubInt" (formula "15") (term "2,1,0,1,1,0"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "14"))
         (rule "polySimp_elimSub" (formula "23") (term "2,1,0,1,1,0"))
         (rule "mul_literals" (formula "23") (term "1,2,1,0,1,1,0"))
         (rule "polySimp_elimSub" (formula "20") (term "2,1,0,0,1,0,1"))
         (rule "mul_literals" (formula "20") (term "1,2,1,0,0,1,0,1"))
         (rule "polySimp_elimSub" (formula "20") (term "1,0"))
         (rule "mul_literals" (formula "20") (term "1,1,0"))
         (rule "polySimp_elimSub" (formula "20") (term "2,1,0,1,1,0,1"))
         (rule "mul_literals" (formula "20") (term "1,2,1,0,1,1,0,1"))
         (rule "polySimp_elimSub" (formula "19") (term "2,1,0,0,1,0,1"))
         (rule "mul_literals" (formula "19") (term "1,2,1,0,0,1,0,1"))
         (rule "polySimp_elimSub" (formula "19") (term "0,2,0,1,0,1"))
         (rule "mul_literals" (formula "19") (term "1,0,2,0,1,0,1"))
         (rule "polySimp_elimSub" (formula "19") (term "2,1,0,1,1,0,1"))
         (rule "mul_literals" (formula "19") (term "1,2,1,0,1,1,0,1"))
         (rule "polySimp_elimSub" (formula "18") (term "2,1,0,0,1,0"))
         (rule "mul_literals" (formula "18") (term "1,2,1,0,0,1,0"))
         (rule "polySimp_elimSub" (formula "17") (term "2,1,0,0,1,0"))
         (rule "mul_literals" (formula "17") (term "1,2,1,0,0,1,0"))
         (rule "polySimp_elimSub" (formula "16") (term "2,1,0,0"))
         (rule "mul_literals" (formula "16") (term "1,2,1,0,0"))
         (rule "polySimp_addComm0" (formula "20") (term "0,2,1,1,0,1"))
         (rule "polySimp_addComm0" (formula "23") (term "2,1,0,1,1,0"))
         (rule "polySimp_addComm0" (formula "20") (term "2,1,0,0,1,0,1"))
         (rule "polySimp_addComm0" (formula "20") (term "1,0"))
         (rule "polySimp_addComm0" (formula "20") (term "2,1,0,1,1,0,1"))
         (rule "polySimp_addComm0" (formula "19") (term "2,1,0,0,1,0,1"))
         (rule "polySimp_addComm0" (formula "19") (term "0,2,0,1,0,1"))
         (rule "polySimp_addComm0" (formula "19") (term "2,1,0,1,1,0,1"))
         (rule "polySimp_addComm0" (formula "18") (term "2,1,0,0,1,0"))
         (rule "polySimp_addComm0" (formula "17") (term "2,1,0,0,1,0"))
         (rule "polySimp_addComm0" (formula "16") (term "2,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "12"))
         (rule "inEqSimp_commuteLeq" (formula "13"))
         (rule "inEqSimp_commuteLeq" (formula "14"))
         (rule "inEqSimp_commuteLeq" (formula "15"))
         (rule "variableDeclarationAssign" (formula "23") (term "1"))
         (rule "variableDeclaration" (formula "23") (term "1") (newnames "b_1"))
         (rule "blockEmpty" (formula "23") (term "1,0,1"))
         (rule "eval_order_array_access3" (formula "23") (term "1,0,1") (inst "#v1=x_1") (inst "#v2=x") (inst "#v0=x_arr"))
         (rule "variableDeclarationAssign" (formula "23") (term "1,0,1"))
         (rule "variableDeclaration" (formula "23") (term "1,0,1") (newnames "x_arr"))
         (rule "assignment" (formula "23") (term "1,0,1"))
         (rule "variableDeclarationAssign" (formula "23") (term "1,1,0,1"))
         (rule "variableDeclaration" (formula "23") (term "1,1,0,1") (newnames "x"))
         (rule "assignment" (formula "23") (term "1,1,0,1"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "variableDeclarationAssign" (formula "23") (term "1,1,0,1"))
         (rule "variableDeclaration" (formula "23") (term "1,1,0,1") (newnames "x_1"))
         (rule "array2seqDef" (formula "16") (term "1") (inst "u=u"))
         (rule "narrowSelectArrayType" (formula "16") (term "2,1") (ifseqformula "1") (ifseqformula "22"))
         (rule "array2seqDef" (formula "16") (term "0") (inst "u=u"))
         (rule "pullOutSelect" (formula "20") (term "1,1,0,1") (inst "selectSK=arr_0"))
         (rule "simplifySelectOfAnon" (formula "20"))
          (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "23")) (ifInst ""  (formula "4")))
         (rule "elementOfArrayRangeConcrete" (formula "20") (term "0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "pullOutSelect" (formula "19") (term "0,1,0,1") (inst "selectSK=arr_1"))
         (rule "simplifySelectOfAnon" (formula "19"))
          (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "24")) (ifInst ""  (formula "4")))
         (rule "elementOfArrayRangeConcrete" (formula "19") (term "0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "commute_and" (formula "18") (term "0,0"))
         (rule "commute_and" (formula "17") (term "0,0"))
         (rule "less_than_comparison_simple" (formula "25") (term "1"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "methodCallEmpty" (formula "25") (term "1"))
         (rule "emptyModality" (formula "25") (term "1"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "impRight" (formula "25"))
         (rule "notLeft" (formula "1"))
         (rule "assignment_array2" (formula "26"))
         (branch "Normal Execution (_array != null)"
             (builtin "One Step Simplification" (formula "26"))
            (rule "pullOutSelect" (formula "26") (term "0,1,0") (inst "selectSK=arr_2"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "5")))
            (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
            (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "13"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "assignment_to_primitive_array_component" (formula "27"))
            (branch "Normal Execution (x_arr != null)"
                (builtin "One Step Simplification" (formula "27"))
               (rule "assignment_to_primitive_array_component" (formula "27"))
               (branch "Normal Execution (_array != null)"
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "methodCallReturn" (formula "27") (term "1"))
                  (rule "assignment" (formula "27") (term "1"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "methodCallEmpty" (formula "27") (term "1"))
                  (rule "tryEmpty" (formula "27") (term "1"))
                  (rule "emptyModality" (formula "27") (term "1"))
                   (opengoal " ")
               )
               (branch "Null Reference (_array = null)"
                   (opengoal " ")
               )
               (branch "Index Out of Bounds (_array != null, but i Out of Bounds!)"
                   (opengoal " ")
               )
            )
            (branch "Null Reference (x_arr = null)"
                (opengoal " ")
            )
            (branch "Index Out of Bounds (x_arr != null, but x Out of Bounds!)"
                (opengoal " ")
            )
         )
         (branch "Null Reference (_array = null)"
             (opengoal " ")
         )
         (branch "Index Out of Bounds (_array != null, but i Out of Bounds!)"
             (opengoal " ")
         )
      )
   )
   (branch "Null Reference (_array = null)"
       (opengoal " ")
   )
   (branch "Index Out of Bounds (_array != null, but _to Out of Bounds!)"
       (opengoal " ")
   )
)
(branch "Show Axiom Satisfiability"
    (builtin "One Step Simplification" (formula "12"))
   (rule "closeTrue" (formula "12"))
)
)
}
