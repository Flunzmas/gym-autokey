\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Nov 10 15:29:10 CET 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:on , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "src";

\programVariables {
   MyClass self;
   int[] a;
}

\functions {
   Heap heapAtPre;
}


\problem {
     !self = null
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & !a = null
   &   boolean::select(heap,
                       a,
                       java.lang.Object::<created>)
     = TRUE
   & wellFormed(heap)
   & heap = heapAtPre
->   \<{
         self.loop2(a)@MyClass;
       }\> \forall int x;
             (   leq(Z(0(#)), x) & lt(x, length(a))
              ->   int::select(heap, a, arr(x))
                 = int::select(heapAtPre,
                               self,
                               MyClass::$attr2))
   & \forall java.lang.Object o;
       \forall Field f;
         (  o = a & \exists int i; f = arr(i)
          |   any::select(heap, o, f)
            = any::select(heapAtPre, o, f))

}

\proof {
(keyLog "0" (keyUser "Andy" ) (keyVersion "2bbea99a67"))

(autoModeTime "628")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "eqSymm" (formula "7") (term "1,0,0,1"))
(rule "eqSymm" (formula "4"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,0,0"))
(rule "andRight" (formula "7"))
(branch "Case 1"
   (rule "methodBodyExpand" (formula "7") (newnames "heapBefore_loop2,savedHeapBefore_loop2,aBefore_loop2"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "j"))
   (rule "assignment" (formula "7") (term "1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "for_to_while" (formula "7") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "i"))
   (rule "assignment" (formula "7") (term "1"))
    (builtin "One Step Simplification" (formula "7"))
    (builtin "Loop Invariant" (formula "7") (newnames "variant,b,heapBefore_LOOP,iBefore_LOOP,i_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
   (branch "Well-Definedness"
       (opengoal "     !self = null    &   boolean::select(heap,                        self,                        java.lang.Object::<created>)      = TRUE    & !a = null    &   boolean::select(heap,                        a,                        java.lang.Object::<created>)      = TRUE    & wellFormed(heap)    & heap = heapAtPre ->   \\<{          self.loop2(a)@MyClass;        }\\> \\forall int x;              (   leq(Z(0(#)), x) & lt(x, length(a))               ->   int::select(heap, a, arr(x))                  = int::select(heapAtPre,                                self,                                MyClass::$attr2))    & \\forall java.lang.Object o;        \\forall Field f;          (  o = a & \\exists int i; f = arr(i)           |   any::select(heap, o, f)             = any::select(heapAtPre, o, f)) ")
   )
   (branch "Invariant Initially Valid"
       (opengoal "     !self = null    &   boolean::select(heap,                        self,                        java.lang.Object::<created>)      = TRUE    & !a = null    &   boolean::select(heap,                        a,                        java.lang.Object::<created>)      = TRUE    & wellFormed(heap)    & heap = heapAtPre ->   \\<{          self.loop2(a)@MyClass;        }\\> \\forall int x;              (   leq(Z(0(#)), x) & lt(x, length(a))               ->   int::select(heap, a, arr(x))                  = int::select(heapAtPre,                                self,                                MyClass::$attr2))    & \\forall java.lang.Object o;        \\forall Field f;          (  o = a & \\exists int i; f = arr(i)           |   any::select(heap, o, f)             = any::select(heapAtPre, o, f)) ")
   )
   (branch "Body Preserves Invariant"
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "translateJavaSubInt" (formula "9") (term "0,1,1,1,0,1"))
      (rule "translateJavaSubInt" (formula "9") (term "0,1,1,1,0,1,1"))
      (rule "andLeft" (formula "6"))
      (rule "impRight" (formula "10"))
      (rule "andLeft" (formula "7"))
      (rule "eqSymm" (formula "12") (term "1,0,0,1,0,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "12") (term "0,1,1,1,0"))
      (rule "polySimp_elimSub" (formula "12") (term "0,1,1,1,0,1"))
      (rule "polySimp_addComm0" (formula "12") (term "0,1,1,1,0"))
      (rule "polySimp_addComm0" (formula "12") (term "0,1,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,1,0,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "7"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "variableDeclarationAssign" (formula "1") (term "1"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_1"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "exc"))
      (rule "assignment" (formula "12") (term "1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "thrownExc"))
      (rule "blockThrow" (formula "12") (term "1,0,0,1"))
      (rule "boxToDiamond" (formula "1") (term "1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "commute_and_2" (formula "8") (term "0,0"))
      (rule "commute_and" (formula "8") (term "0,0,0"))
      (rule "commute_and_2" (formula "8") (term "0,0"))
      (rule "compound_less_than_comparison_2" (formula "9") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
      (rule "variableDeclarationAssign" (formula "9") (term "1"))
      (rule "variableDeclaration" (formula "9") (term "1") (newnames "x"))
      (rule "assignment" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "variableDeclarationAssign" (formula "9") (term "1"))
      (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_1"))
      (rule "assignment_read_length" (formula "9") (term "1"))
      (branch "Normal Execution (a != null)"
          (builtin "One Step Simplification" (formula "10"))
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "12")))
         (rule "false_right" (formula "9"))
         (rule "less_than_comparison_simple" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "methodCallEmpty" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "emptyModality" (formula "9") (term "1"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "notRight" (formula "9"))
         (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_2"))
         (rule "compound_less_than_comparison_2" (formula "12") (term "1") (inst "#v1=x_4") (inst "#v0=x_3"))
         (rule "variableDeclarationAssign" (formula "12") (term "1"))
         (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_3"))
         (rule "assignment" (formula "12") (term "1"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "variableDeclarationAssign" (formula "12") (term "1"))
         (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_4"))
         (rule "assignment_read_length" (formula "12") (term "1"))
         (branch "Normal Execution (a != null)"
             (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "11")))
             (builtin "One Step Simplification" (formula "13"))
            (rule "false_right" (formula "12"))
            (rule "less_than_comparison_simple" (formula "12") (term "1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "replace_known_left" (formula "12") (term "0,0,1,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "ifSplit" (formula "12"))
            (branch "if x_2 true"
                (builtin "One Step Simplification" (formula "13"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "eval_order_array_access3" (formula "12") (term "1") (inst "#v1=x_1") (inst "#v2=x") (inst "#v0=x_arr"))
               (rule "variableDeclarationAssign" (formula "12") (term "1"))
               (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_arr"))
               (rule "assignment" (formula "12") (term "1"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "variableDeclarationAssign" (formula "12") (term "1"))
               (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_5"))
               (rule "assignment" (formula "12") (term "1"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "variableDeclarationAssign" (formula "12") (term "1"))
               (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_6"))
               (rule "compound_addition_2" (formula "12") (term "1") (inst "#v1=x_8") (inst "#v0=x_7"))
               (rule "variableDeclarationAssign" (formula "12") (term "1"))
               (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_7"))
               (rule "assignment" (formula "12") (term "1"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "variableDeclarationAssign" (formula "12") (term "1"))
               (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_8"))
               (rule "assignment_read_attribute_this" (formula "12") (term "1"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "pullOutSelect" (formula "12") (term "0,1,0") (inst "selectSK=MyClass_attr2_0"))
               (rule "simplifySelectOfAnon" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")) (ifInst ""  (formula "3")))
               (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replaceKnownAuxiliaryConstant_taclet00020_1" (formula "12") (term "0,1,0"))
               (rule "assignmentAdditionInt" (formula "12") (term "1"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "translateJavaAddInt" (formula "12") (term "0,1,0"))
               (rule "add_zero_left" (formula "12") (term "0,1,0"))
               (rule "assignment_to_primitive_array_component" (formula "12") (term "1"))
               (branch "Normal Execution (x_arr != null)"
                   (builtin "One Step Simplification" (formula "13"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")) (ifInst ""  (formula "2")) (ifInst ""  (formula "8")))
                  (rule "true_left" (formula "1"))
                  (rule "blockEmpty" (formula "12") (term "1"))
                  (rule "postincrement" (formula "12") (term "1"))
                  (rule "compound_int_cast_expression" (formula "12") (term "1") (inst "#v=x"))
                  (rule "variableDeclarationAssign" (formula "12") (term "1"))
                  (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_9"))
                  (rule "remove_parentheses_right" (formula "12") (term "1"))
                  (rule "assignmentAdditionInt" (formula "12") (term "1"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "translateJavaAddInt" (formula "12") (term "0,1,0"))
                  (rule "polySimp_addComm0" (formula "12") (term "0,1,0"))
                  (rule "widening_identity_cast_5" (formula "12") (term "1"))
                  (rule "assignment" (formula "12") (term "1"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "tryEmpty" (formula "12") (term "1"))
                  (rule "methodCallEmpty" (formula "12") (term "1"))
                  (rule "emptyModality" (formula "12") (term "1"))
                   (builtin "One Step Simplification" (formula "12"))
                   (opengoal "     !self = null    &   boolean::select(heap,                        self,                        java.lang.Object::<created>)      = TRUE    & !a = null    &   boolean::select(heap,                        a,                        java.lang.Object::<created>)      = TRUE    & wellFormed(heap)    & heap = heapAtPre ->   \\<{          self.loop2(a)@MyClass;        }\\> \\forall int x;              (   leq(Z(0(#)), x) & lt(x, length(a))               ->   int::select(heap, a, arr(x))                  = int::select(heapAtPre,                                self,                                MyClass::$attr2))    & \\forall java.lang.Object o;        \\forall Field f;          (  o = a & \\exists int i; f = arr(i)           |   any::select(heap, o, f)             = any::select(heapAtPre, o, f)) ")
               )
               (branch "Null Reference (x_arr = null)"
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Index Out of Bounds (x_arr != null, but x_5 Out of Bounds!)"
                   (builtin "One Step Simplification" (formula "13"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
                  (rule "blockThrow" (formula "13") (term "1"))
                  (rule "commute_or" (formula "1"))
                  (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                  (rule "arrayLengthIsAnInt" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "arrayLengthNotNegative" (formula "1") (term "0,1"))
                  (rule "arrayLengthIsAnInt" (formula "1") (term "0,1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "methodCallThrow" (formula "14") (term "1,0,0,1"))
                  (rule "throwDiamond" (formula "14") (term "1,0,0,1"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "throwUnfold" (formula "14") (term "1") (inst "#v0=a"))
                  (rule "variableDeclarationAssign" (formula "14") (term "1"))
                  (rule "variableDeclaration" (formula "14") (term "1") (newnames "a_1"))
                  (rule "instanceCreationAssignment" (formula "14") (term "1") (inst "#v0=a_2"))
                  (rule "variableDeclarationAssign" (formula "14") (term "1"))
                  (rule "variableDeclaration" (formula "14") (term "1") (newnames "a_2"))
                  (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "14") (term "1") (inst "#v0=a_3"))
                  (rule "variableDeclaration" (formula "14") (term "1") (newnames "a_3"))
                  (rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "variableDeclaration" (formula "14") (term "1") (newnames "__NEW__"))
                  (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "14") (term "1") (inst "#v0=a_4"))
                  (rule "variableDeclaration" (formula "14") (term "1") (newnames "a_4"))
                  (rule "allocateInstance" (formula "14"))
                   (builtin "One Step Simplification" (formula "15"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "wellFormedAnon" (formula "1") (term "0,1,0"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "9"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
                  (rule "notLeft" (formula "1"))
                  (rule "orRight" (formula "13"))
                  (rule "blockEmpty" (formula "18") (term "1"))
                  (rule "assignment" (formula "18") (term "1"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "assignment_write_attribute_this" (formula "18") (term "1"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "methodCallWithinClass" (formula "18") (term "1"))
                  (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "methodCallSuper" (formula "18") (term "1"))
                  (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "methodCallSuper" (formula "18") (term "1"))
                  (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "methodCallSuper" (formula "18") (term "1"))
                  (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "methodCallSuper" (formula "18") (term "1"))
                  (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "methodCallSuper" (formula "18") (term "1"))
                  (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<prepare>_3,savedHeapBefore_<prepare>_3"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "methodCallEmpty" (formula "18") (term "1"))
                  (rule "blockEmpty" (formula "18") (term "1"))
                  (rule "assignment_write_attribute_this" (formula "18") (term "1"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "assignment_write_attribute_this" (formula "18") (term "1"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "methodCallEmpty" (formula "18") (term "1"))
                  (rule "methodCallEmpty" (formula "18") (term "1"))
                  (rule "methodCallEmpty" (formula "18") (term "1"))
                  (rule "methodCallEmpty" (formula "18") (term "1"))
                  (rule "methodCallEmpty" (formula "18") (term "1"))
                  (rule "blockEmpty" (formula "18") (term "1"))
                  (rule "methodCallReturnIgnoreResult" (formula "18") (term "1"))
                  (rule "methodCallReturn" (formula "18") (term "1"))
                  (rule "assignment" (formula "18") (term "1"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "methodCallEmpty" (formula "18") (term "1"))
                  (rule "blockEmpty" (formula "18") (term "1"))
                  (rule "assignment" (formula "18") (term "1"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "methodCallSuper" (formula "18") (term "1"))
                  (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "methodCallSuper" (formula "18") (term "1"))
                  (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "methodCallSuper" (formula "18") (term "1"))
                  (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "methodCallSuper" (formula "18") (term "1"))
                  (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "methodCallSuper" (formula "18") (term "1"))
                  (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<init>_4,savedHeapBefore_<init>_4"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "methodCallEmpty" (formula "18") (term "1"))
                  (rule "blockEmpty" (formula "18") (term "1"))
                  (rule "assignment_write_attribute_this" (formula "18") (term "1"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "assignment_write_attribute_this" (formula "18") (term "1"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "methodCallEmpty" (formula "18") (term "1"))
                  (rule "methodCallEmpty" (formula "18") (term "1"))
                  (rule "methodCallEmpty" (formula "18") (term "1"))
                  (rule "methodCallEmpty" (formula "18") (term "1"))
                  (rule "methodCallEmpty" (formula "18") (term "1"))
                  (rule "blockEmpty" (formula "18") (term "1"))
                  (rule "assignment_write_attribute" (formula "18") (term "1"))
                  (branch "Normal Execution (a_2 != null)"
                      (builtin "One Step Simplification" (formula "19"))
                      (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "15")))
                     (rule "false_right" (formula "18"))
                     (rule "assignment" (formula "18") (term "1"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "tryCatchThrow" (formula "18") (term "1"))
                     (rule "ifElseUnfold" (formula "18") (term "1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_9"))
                     (rule "equality_comparison_simple" (formula "18") (term "1"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "replace_known_right" (formula "18") (term "0,0,1,0") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "ifElseSplit" (formula "18"))
                     (branch "if x_9 true"
                         (builtin "One Step Simplification" (formula "19"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if x_9 false"
                         (builtin "One Step Simplification" (formula "19"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "ifElseSplit" (formula "18"))
                        (branch "if a_1 instanceof java.lang.Throwable true"
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                           (rule "true_left" (formula "1"))
                           (rule "variableDeclaration" (formula "18") (term "1") (newnames "e"))
                           (rule "delete_unnecessary_cast" (formula "18") (term "1"))
                            (builtin "One Step Simplification" (formula "19"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "assignment" (formula "18") (term "1"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "assignment" (formula "18") (term "1"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "methodCallEmpty" (formula "18") (term "1"))
                           (rule "emptyModality" (formula "18") (term "1"))
                            (opengoal "     !self = null    &   boolean::select(heap,                        self,                        java.lang.Object::<created>)      = TRUE    & !a = null    &   boolean::select(heap,                        a,                        java.lang.Object::<created>)      = TRUE    & wellFormed(heap)    & heap = heapAtPre ->   \\<{          self.loop2(a)@MyClass;        }\\> \\forall int x;              (   leq(Z(0(#)), x) & lt(x, length(a))               ->   int::select(heap, a, arr(x))                  = int::select(heapAtPre,                                self,                                MyClass::$attr2))    & \\forall java.lang.Object o;        \\forall Field f;          (  o = a & \\exists int i; f = arr(i)           |   any::select(heap, o, f)             = any::select(heapAtPre, o, f)) ")
                        )
                        (branch "if a_1 instanceof java.lang.Throwable false"
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
                  (branch "Null Reference (a_2 = null)"
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
            (branch "if x_2 false"
                (builtin "One Step Simplification" (formula "13"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Null Reference (a = null)"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Null Reference (a = null)"
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Use Case"
       (builtin "One Step Simplification" (formula "6"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "7"))
      (rule "inEqSimp_commuteLeq" (formula "6"))
      (rule "variableDeclarationAssign" (formula "11") (term "1"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "b_1"))
      (rule "commute_and_2" (formula "8") (term "0,0"))
      (rule "commute_and" (formula "8") (term "0,0,0"))
      (rule "commute_and_2" (formula "8") (term "0,0"))
      (rule "compound_less_than_comparison_2" (formula "11") (term "1") (inst "#v1=x_1") (inst "#v0=x"))
      (rule "variableDeclarationAssign" (formula "11") (term "1"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "x"))
      (rule "assignment" (formula "11") (term "1"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "variableDeclarationAssign" (formula "11") (term "1"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_1"))
      (rule "assignment_read_length" (formula "11") (term "1"))
      (branch "Normal Execution (a != null)"
          (builtin "One Step Simplification" (formula "12"))
          (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "10")))
         (rule "false_right" (formula "11"))
         (rule "less_than_comparison_simple" (formula "11") (term "1"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "methodCallEmpty" (formula "11") (term "1"))
         (rule "emptyModality" (formula "11") (term "1"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "impRight" (formula "11"))
         (rule "notLeft" (formula "1"))
         (rule "methodCallEmpty" (formula "12") (term "1"))
         (rule "emptyModality" (formula "12") (term "1"))
          (opengoal "     !self = null    &   boolean::select(heap,                        self,                        java.lang.Object::<created>)      = TRUE    & !a = null    &   boolean::select(heap,                        a,                        java.lang.Object::<created>)      = TRUE    & wellFormed(heap)    & heap = heapAtPre ->   \\<{          self.loop2(a)@MyClass;        }\\> \\forall int x;              (   leq(Z(0(#)), x) & lt(x, length(a))               ->   int::select(heap, a, arr(x))                  = int::select(heapAtPre,                                self,                                MyClass::$attr2))    & \\forall java.lang.Object o;        \\forall Field f;          (  o = a & \\exists int i; f = arr(i)           |   any::select(heap, o, f)             = any::select(heapAtPre, o, f)) ")
      )
      (branch "Null Reference (a = null)"
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
         (rule "closeFalse" (formula "1"))
      )
   )
)
(branch "Case 2"
    (opengoal "     !self = null    &   boolean::select(heap,                        self,                        java.lang.Object::<created>)      = TRUE    & !a = null    &   boolean::select(heap,                        a,                        java.lang.Object::<created>)      = TRUE    & wellFormed(heap)    & heap = heapAtPre ->   \\<{          self.loop2(a)@MyClass;        }\\> \\forall int x;              (   leq(Z(0(#)), x) & lt(x, length(a))               ->   int::select(heap, a, arr(x))                  = int::select(heapAtPre,                                self,                                MyClass::$attr2))    & \\forall java.lang.Object o;        \\forall Field f;          (  o = a & \\exists int i; f = arr(i)           |   any::select(heap, o, f)             = any::select(heapAtPre, o, f)) ")
)
)
}
