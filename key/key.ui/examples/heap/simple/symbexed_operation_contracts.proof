\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Nov 10 15:30:07 CET 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:on , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "src";


\programVariables {
  MyClient self;
  Heap heapAtPre;
  int result;
  java.lang.Exception exc;  
}


\rules {
  Class_invariant_axiom {  
  \schemaVar \term Heap h;  
  \find ( java.lang.Object::<inv>(h, self) )
  \replacewith (
      {heap:=h} (!self.(MyClient::mc) = null
                 & java.lang.Object::<inv>(heap, self.(MyClient::mc))
       		 & disjoint(allFields(self), self.(MyClient::mc).(MyClass::footprint))) 
  )
  \heuristics ( simplify )
  };
}


\problem {
     wellFormed(heap)
   & !self = null
   &   boolean::select(heap,
                       self,
                       java.lang.Object::<created>)
     = TRUE
   & MyClient::exactInstance(self) = TRUE
   & java.lang.Object::<inv>(heap, self)
-> {heapAtPre:=heap}
     \[{
         exc=null;try {
           result=self.operationContracts()@MyClient;
         }   catch (java.lang.Throwable e) {
           exc=e;
         }
       }\] (  (   exc = null
               ->   result = Z(8(8(3(#))))
                  & java.lang.Object::<inv>(heap, self))
            & exc = null
            & \forall java.lang.Object o;
                \forall Field f;
                  (  elementOf(o,
                               f,
                               union(union(singleton(self,
                                                     MyClient::$i),
                                           MyClass::$footprint(heapAtPre,
                                                               MyClass::select(heapAtPre,
                                                                               self,
                                                                               MyClient::$mc))),
                                     freshLocs(heapAtPre)))
                   |   any::select(heap, o, f)
                     = any::select(heapAtPre, o, f)))

}

\proof {
(keyLog "0" (keyUser "Andy" ) (keyVersion "2bbea99a67"))

(autoModeTime "158")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "6") (term "1,0,0,1,0,1"))
(rule "Class_invariant_axiom" (formula "6") (term "1,1,0,0,0,1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "Class_invariant_axiom" (formula "4"))
 (builtin "One Step Simplification" (formula "4"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "4"))
(rule "notLeft" (formula "4"))
(rule "disjointDefinition" (formula "8") (term "1,1,1,0,0,0,1"))
(rule "disjointDefinition" (formula "5"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "elementOfUnion" (formula "8") (term "0,0,0,1,0,1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "elementOfUnion" (formula "8") (term "0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "8") (term "0,0,0,0,0,1,0,1"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_operationContracts,savedHeapBefore_operationContracts"))
 (builtin "One Step Simplification" (formula "8"))
(rule "assignment_write_attribute_this" (formula "8"))
 (builtin "One Step Simplification" (formula "8"))
(rule "eval_order_access4_this" (formula "8") (term "1") (inst "#v1=x"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "x"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "8") (term "1") (inst "#v0=m"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "m"))
(rule "assignment_read_attribute_this" (formula "8"))
 (builtin "One Step Simplification" (formula "8"))
(rule "dismissNonSelectedField" (formula "8") (term "0,1,0"))
(rule "methodCallWithAssignmentUnfoldArguments" (formula "8") (term "1"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "var"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "var_1"))
(rule "preincrement_assignment_attribute" (formula "8") (term "1") (inst "#v=m"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "m_1"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "eval_order_access4" (formula "8") (term "1") (inst "#v1=x_1") (inst "#v0=m_2"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "m_2"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "x_1"))
(rule "compound_int_cast_expression" (formula "8") (term "1") (inst "#v=x_2"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "x_2"))
(rule "remove_parentheses_right" (formula "8") (term "1"))
(rule "compound_addition_1" (formula "8") (term "1") (inst "#v=x_3"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "x_3"))
(rule "assignment_read_attribute" (formula "8"))
(branch "Normal Execution (m_1 != null)"
    (builtin "One Step Simplification" (formula "8"))
   (rule "pullOutSelect" (formula "8") (term "0,1,0") (inst "selectSK=MyClient_i_0"))
   (rule "simplifySelectOfStore" (formula "1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "castDel" (formula "1") (term "0"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "8") (term "0,1,0"))
   (rule "assignmentAdditionInt" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "translateJavaAddInt" (formula "8") (term "0,1,0"))
   (rule "add_literals" (formula "8") (term "0,1,0"))
   (rule "widening_identity_cast_5" (formula "8") (term "1"))
   (rule "assignment" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "assignment_write_attribute" (formula "8"))
   (branch "Normal Execution (m_2 != null)"
       (builtin "One Step Simplification" (formula "8"))
      (rule "assignment_read_attribute" (formula "8"))
      (branch "Normal Execution (m_1 != null)"
          (builtin "One Step Simplification" (formula "8"))
         (rule "pullOutSelect" (formula "8") (term "0,1,0") (inst "selectSK=MyClient_i_1"))
         (rule "simplifySelectOfStore" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "0"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replaceKnownAuxiliaryConstant_taclet000_3" (formula "8") (term "0,1,0"))
          (builtin "Use Operation Contract" (formula "8") (newnames "heapBefore_add27,result_0,exc_0,heapAfter_add27,anon_heap_add27") (contract "MyClass[MyClass::add27(int)].JML normal_behavior operation contract.0"))
         (branch "Post (add27)"
             (builtin "One Step Simplification" (formula "10"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "translateJavaAddInt" (formula "7") (term "1,0,0,0,1,1"))
            (rule "add_literals" (formula "7") (term "1,0,0,0,1,1"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "9"))
            (rule "assignment" (formula "15") (term "1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "blockEmpty" (formula "15") (term "1"))
            (rule "assignment_write_attribute_this" (formula "15"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=MyClass_attr_0"))
            (rule "simplifySelectOfAnonEQ" (formula "10") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "14")))
            (rule "eqSymm" (formula "11"))
            (rule "hideAuxiliaryEq" (formula "11"))
            (rule "replaceKnownAuxiliaryConstant_taclet0000_5" (formula "10") (term "1"))
            (rule "dismissNonSelectedField" (formula "10") (term "2,0"))
            (rule "dismissNonSelectedField" (formula "10") (term "0,0,1,0,0"))
            (rule "commuteUnion" (formula "11") (term "1"))
            (rule "commute_or" (formula "10") (term "0,0"))
            (rule "returnUnfold" (formula "15") (term "1") (inst "#v0=x"))
            (rule "variableDeclarationAssign" (formula "15") (term "1"))
            (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_4"))
            (rule "assignment_read_attribute_this" (formula "15"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "pullOutSelect" (formula "15") (term "0,1,0") (inst "selectSK=MyClient_i_2"))
            (rule "simplifySelectOfStore" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "castDel" (formula "1") (term "0"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replaceKnownAuxiliaryConstant_taclet0000_7" (formula "15") (term "0,1,0"))
            (rule "methodCallReturn" (formula "15") (term "1"))
            (rule "assignment" (formula "15") (term "1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "methodCallEmpty" (formula "15") (term "1"))
            (rule "tryEmpty" (formula "15") (term "1"))
            (rule "emptyModality" (formula "15") (term "1"))
             (opengoal "     wellFormed(heap)    & !self = null    &   boolean::select(heap,                        self,                        java.lang.Object::<created>)      = TRUE    & MyClient::exactInstance(self) = TRUE    & java.lang.Object::<inv>(heap, self) -> {heapAtPre:=heap}      \\[{          exc=null;try {            result=self.operationContracts()@MyClient;          }   catch (java.lang.Throwable e) {            exc=e;          }        }\\] (  (   exc = null                ->   result = Z(8(8(3(#))))                   & java.lang.Object::<inv>(heap, self))             & exc = null             & \\forall java.lang.Object o;                 \\forall Field f;                   (  elementOf(o,                                f,                                union(union(singleton(self,                                                      MyClient::$i),                                            MyClass::$footprint(heapAtPre,                                                                MyClass::select(heapAtPre,                                                                                self,                                                                                MyClient::$mc))),                                      freshLocs(heapAtPre)))                    |   any::select(heap, o, f)                      = any::select(heapAtPre, o, f))) ")
         )
         (branch "Exceptional Post (add27)"
             (builtin "One Step Simplification" (formula "10"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "translateJavaAddInt" (formula "7") (term "1,0,0,0,1,1"))
            (rule "add_literals" (formula "7") (term "1,0,0,0,1,1"))
            (rule "andLeft" (formula "7"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "8") (term "1,0") (ifseqformula "7"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "10"))
            (rule "notLeft" (formula "8"))
            (rule "close" (formula "11") (ifseqformula "10"))
         )
         (branch "Pre (add27)"
             (opengoal "     wellFormed(heap)    & !self = null    &   boolean::select(heap,                        self,                        java.lang.Object::<created>)      = TRUE    & MyClient::exactInstance(self) = TRUE    & java.lang.Object::<inv>(heap, self) -> {heapAtPre:=heap}      \\[{          exc=null;try {            result=self.operationContracts()@MyClient;          }   catch (java.lang.Throwable e) {            exc=e;          }        }\\] (  (   exc = null                ->   result = Z(8(8(3(#))))                   & java.lang.Object::<inv>(heap, self))             & exc = null             & \\forall java.lang.Object o;                 \\forall Field f;                   (  elementOf(o,                                f,                                union(union(singleton(self,                                                      MyClient::$i),                                            MyClass::$footprint(heapAtPre,                                                                MyClass::select(heapAtPre,                                                                                self,                                                                                MyClient::$mc))),                                      freshLocs(heapAtPre)))                    |   any::select(heap, o, f)                      = any::select(heapAtPre, o, f))) ")
         )
         (branch "Null reference (var = null)"
             (opengoal "     wellFormed(heap)    & !self = null    &   boolean::select(heap,                        self,                        java.lang.Object::<created>)      = TRUE    & MyClient::exactInstance(self) = TRUE    & java.lang.Object::<inv>(heap, self) -> {heapAtPre:=heap}      \\[{          exc=null;try {            result=self.operationContracts()@MyClient;          }   catch (java.lang.Throwable e) {            exc=e;          }        }\\] (  (   exc = null                ->   result = Z(8(8(3(#))))                   & java.lang.Object::<inv>(heap, self))             & exc = null             & \\forall java.lang.Object o;                 \\forall Field f;                   (  elementOf(o,                                f,                                union(union(singleton(self,                                                      MyClient::$i),                                            MyClass::$footprint(heapAtPre,                                                                MyClass::select(heapAtPre,                                                                                self,                                                                                MyClient::$mc))),                                      freshLocs(heapAtPre)))                    |   any::select(heap, o, f)                      = any::select(heapAtPre, o, f))) ")
         )
      )
      (branch "Null Reference (m_1 = null)"
          (opengoal "     wellFormed(heap)    & !self = null    &   boolean::select(heap,                        self,                        java.lang.Object::<created>)      = TRUE    & MyClient::exactInstance(self) = TRUE    & java.lang.Object::<inv>(heap, self) -> {heapAtPre:=heap}      \\[{          exc=null;try {            result=self.operationContracts()@MyClient;          }   catch (java.lang.Throwable e) {            exc=e;          }        }\\] (  (   exc = null                ->   result = Z(8(8(3(#))))                   & java.lang.Object::<inv>(heap, self))             & exc = null             & \\forall java.lang.Object o;                 \\forall Field f;                   (  elementOf(o,                                f,                                union(union(singleton(self,                                                      MyClient::$i),                                            MyClass::$footprint(heapAtPre,                                                                MyClass::select(heapAtPre,                                                                                self,                                                                                MyClient::$mc))),                                      freshLocs(heapAtPre)))                    |   any::select(heap, o, f)                      = any::select(heapAtPre, o, f))) ")
      )
   )
   (branch "Null Reference (m_2 = null)"
       (opengoal "     wellFormed(heap)    & !self = null    &   boolean::select(heap,                        self,                        java.lang.Object::<created>)      = TRUE    & MyClient::exactInstance(self) = TRUE    & java.lang.Object::<inv>(heap, self) -> {heapAtPre:=heap}      \\[{          exc=null;try {            result=self.operationContracts()@MyClient;          }   catch (java.lang.Throwable e) {            exc=e;          }        }\\] (  (   exc = null                ->   result = Z(8(8(3(#))))                   & java.lang.Object::<inv>(heap, self))             & exc = null             & \\forall java.lang.Object o;                 \\forall Field f;                   (  elementOf(o,                                f,                                union(union(singleton(self,                                                      MyClient::$i),                                            MyClass::$footprint(heapAtPre,                                                                MyClass::select(heapAtPre,                                                                                self,                                                                                MyClient::$mc))),                                      freshLocs(heapAtPre)))                    |   any::select(heap, o, f)                      = any::select(heapAtPre, o, f))) ")
   )
)
(branch "Null Reference (m_1 = null)"
    (opengoal "     wellFormed(heap)    & !self = null    &   boolean::select(heap,                        self,                        java.lang.Object::<created>)      = TRUE    & MyClient::exactInstance(self) = TRUE    & java.lang.Object::<inv>(heap, self) -> {heapAtPre:=heap}      \\[{          exc=null;try {            result=self.operationContracts()@MyClient;          }   catch (java.lang.Throwable e) {            exc=e;          }        }\\] (  (   exc = null                ->   result = Z(8(8(3(#))))                   & java.lang.Object::<inv>(heap, self))             & exc = null             & \\forall java.lang.Object o;                 \\forall Field f;                   (  elementOf(o,                                f,                                union(union(singleton(self,                                                      MyClient::$i),                                            MyClass::$footprint(heapAtPre,                                                                MyClass::select(heapAtPre,                                                                                self,                                                                                MyClient::$mc))),                                      freshLocs(heapAtPre)))                    |   any::select(heap, o, f)                      = any::select(heapAtPre, o, f))) ")
)
)
}
