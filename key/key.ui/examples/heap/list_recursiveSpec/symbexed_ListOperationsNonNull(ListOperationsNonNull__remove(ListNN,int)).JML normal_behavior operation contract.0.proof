\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Nov 10 13:37:16 CET 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:on , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_LEMMA_ON
[Strategy]MaximumNumberOfAutomaticApplications=30000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "src";

\proofObligation "#Proof Obligation Settings
#Sun Nov 10 13:37:16 CET 2019
contract=ListOperationsNonNull[ListOperationsNonNull\\:\\:remove(ListNN,int)].JML normal_behavior operation contract.0
name=ListOperationsNonNull[ListOperationsNonNull\\:\\:remove(ListNN,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Andy" ) (keyVersion "2bbea99a67"))

(autoModeTime "142")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "o,i,self,exc,heapAtPre,o_0,f"))
(rule "translateJavaAddInt" (formula "1") (term "3,0,1,0,0,1,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "3,1,1,0,0,1,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,3,0,1,0,0,1,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,3,1,1,0,0,1,0,0,1,1"))
(rule "translateJavaAddInt" (formula "1") (term "0,0,3,1,1,0,0,1,0,0,1,1"))
(rule "polySimp_addLiterals" (formula "1") (term "3,1,1,0,0,1,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "11"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "12") (term "1,1,0,0,0,0,1"))
(rule "eqSymm" (formula "12") (term "1,0,0,1,0,0,1"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "11"))
 (builtin "One Step Simplification" (formula "4"))
(rule "polySimp_addComm1" (formula "12") (term "3,1,1,0,0,1,0,0,1"))
(rule "polySimp_addComm1" (formula "12") (term "3,0,1,0,0,1,0,0,1"))
(rule "polySimp_addComm0" (formula "12") (term "0,3,1,1,0,0,1,0,0,1"))
(rule "polySimp_addComm0" (formula "12") (term "0,3,0,1,0,0,1,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,1,0,0,1"))
(rule "assignment" (formula "12") (term "1"))
 (builtin "One Step Simplification" (formula "12"))
(rule "Class_invariant_axiom_for_ListOperationsNonNull" (formula "9") (ifseqformula "3"))
(rule "true_left" (formula "9"))
(rule "commute_and" (formula "6") (term "0,0"))
(rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_remove,savedHeapBefore_remove"))
 (builtin "One Step Simplification" (formula "11"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "n"))
 (builtin "Use Operation Contract" (formula "11") (newnames "heapBefore_getNextContractNN,result,exc_0") (contract "ListOperationsNonNull[ListOperationsNonNull::getNextContractNN(ListNN,int)].JML normal_behavior operation contract.0"))
(branch "Post (getNextContractNN)"
    (builtin "One Step Simplification" (formula "9"))
   (rule "translateJavaSubInt" (formula "9") (term "3,1,1,1,1,0,0,1"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "12"))
   (rule "notLeft" (formula "13"))
   (rule "eqSymm" (formula "11") (term "1"))
   (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "polySimp_elimSub" (formula "11") (term "3,1,0,1"))
   (rule "mul_literals" (formula "11") (term "1,3,1,0,1"))
   (rule "polySimp_addComm0" (formula "11") (term "3,1,0,1"))
   (rule "assignment" (formula "17") (term "1"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "Class_invariant_axiom_for_ListOperationsNonNull" (formula "12") (ifseqformula "3"))
   (rule "true_left" (formula "12"))
   (rule "methodCallUnfoldArguments" (formula "16") (term "1"))
   (rule "variableDeclarationAssign" (formula "16") (term "1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "var"))
   (rule "assignment" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "variableDeclarationAssign" (formula "16") (term "1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "var_1"))
   (rule "assignmentSubtractionInt" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "translateJavaSubInt" (formula "16") (term "0,1,0"))
   (rule "polySimp_elimSub" (formula "16") (term "0,1,0"))
   (rule "mul_literals" (formula "16") (term "1,0,1,0"))
   (rule "polySimp_addComm0" (formula "16") (term "0,1,0"))
    (builtin "Use Operation Contract" (formula "16") (newnames "heapBefore_lem_gNNNexpand2,exc_1") (contract "ListOperationsNonNull[ListOperationsNonNull::lem_gNNNexpand2(ListNN,int)].JML normal_behavior operation contract.0"))
   (branch "Post (lem_gNNNexpand2)"
       (builtin "One Step Simplification" (formula "17"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "translateJavaAddInt" (formula "13") (term "3,0,1,0,0,0,1"))
      (rule "translateJavaAddInt" (formula "13") (term "3,0,1,0,0,1"))
      (rule "translateJavaAddInt" (formula "13") (term "3,1,1,1,0,0,0,1"))
      (rule "translateJavaAddInt" (formula "13") (term "3,1,1,1,0,0,1"))
      (rule "translateJavaAddInt" (formula "13") (term "3,0,0,0,0,0,1"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "eqSymm" (formula "16"))
      (rule "eqSymm" (formula "15"))
      (rule "eqSymm" (formula "14"))
      (rule "polySimp_addComm1" (formula "16") (term "3,1"))
      (rule "add_literals" (formula "16") (term "0,3,1"))
      (rule "polySimp_addComm1" (formula "16") (term "3,1,0"))
      (rule "add_literals" (formula "16") (term "0,3,1,0"))
      (rule "polySimp_addComm1" (formula "15") (term "3,1,0"))
      (rule "add_literals" (formula "15") (term "0,3,1,0"))
      (rule "add_zero_left" (formula "15") (term "3,1,0"))
      (rule "polySimp_addComm1" (formula "15") (term "3,1"))
      (rule "add_literals" (formula "15") (term "0,3,1"))
      (rule "polySimp_addComm1" (formula "14") (term "3,1"))
      (rule "add_literals" (formula "14") (term "0,3,1"))
      (rule "add_zero_left" (formula "14") (term "3,1"))
      (rule "blockEmpty" (formula "21") (term "1"))
      (rule "eval_order_access4" (formula "21") (term "1") (inst "#v1=l_1") (inst "#v0=l"))
      (rule "variableDeclarationAssign" (formula "21") (term "1"))
      (rule "variableDeclaration" (formula "21") (term "1") (newnames "l"))
      (rule "assignment" (formula "21") (term "1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "variableDeclarationAssign" (formula "21") (term "1"))
      (rule "variableDeclaration" (formula "21") (term "1") (newnames "l_1"))
      (rule "eval_order_access2" (formula "21") (term "1") (inst "#v0=l_2"))
      (rule "variableDeclarationAssign" (formula "21") (term "1"))
      (rule "variableDeclaration" (formula "21") (term "1") (newnames "l_2"))
      (rule "assignment_read_attribute" (formula "21"))
      (branch "Normal Execution (n != null)"
          (builtin "One Step Simplification" (formula "21"))
         (rule "assignment_read_attribute" (formula "21"))
         (branch "Normal Execution (l_2 != null)"
             (builtin "One Step Simplification" (formula "21"))
            (rule "assignment_write_attribute" (formula "21"))
            (branch "Normal Execution (l != null)"
                (builtin "One Step Simplification" (formula "21"))
               (rule "Class_invariant_axiom_for_ListOperationsNonNull" (formula "17") (ifseqformula "3"))
               (rule "true_left" (formula "17"))
               (rule "methodCallEmpty" (formula "20") (term "1"))
               (rule "tryEmpty" (formula "20") (term "1"))
               (rule "emptyModality" (formula "20") (term "1"))
                (opengoal " ")
            )
            (branch "Null Reference (l = null)"
                (opengoal " ")
            )
         )
         (branch "Null Reference (l_2 = null)"
             (opengoal " ")
         )
      )
      (branch "Null Reference (n = null)"
          (opengoal " ")
      )
   )
   (branch "Exceptional Post (lem_gNNNexpand2)"
       (builtin "One Step Simplification" (formula "17"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "translateJavaAddInt" (formula "13") (term "3,0,1,0,0,1"))
      (rule "translateJavaAddInt" (formula "13") (term "3,0,0,0,0,0,1"))
      (rule "translateJavaAddInt" (formula "13") (term "3,1,1,1,0,0,0,1"))
      (rule "translateJavaAddInt" (formula "13") (term "3,0,1,0,0,0,1"))
      (rule "translateJavaAddInt" (formula "13") (term "3,1,1,1,0,0,1"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "15"))
      (rule "notLeft" (formula "13"))
      (rule "close" (formula "16") (ifseqformula "15"))
   )
   (branch "Pre (lem_gNNNexpand2)"
       (opengoal " ")
   )
)
(branch "Exceptional Post (getNextContractNN)"
    (builtin "One Step Simplification" (formula "9"))
   (rule "translateJavaSubInt" (formula "9") (term "3,1,1,1,1,0,0,1"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "9"))
   (rule "close" (formula "12") (ifseqformula "11"))
)
(branch "Pre (getNextContractNN)"
    (opengoal " ")
)
)
}
