\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Nov 10 15:34:31 CET 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:on , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "src";

\proofObligation "#Proof Obligation Settings
#Sun Nov 10 15:34:31 CET 2019
contract=SparseArray[SparseArray\\:\\:get(int)].JML normal_behavior operation contract.0
name=SparseArray[SparseArray\\:\\:get(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "Andy" ) (keyVersion "2bbea99a67"))

(autoModeTime "811")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "i,self,result,exc,heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "9") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "9") (term "0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "assignment" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "Class_invariant_axiom_for_SparseArray" (formula "7") (inst "x=x") (inst "x_0=x_0") (inst "x_1=x_1") (ifseqformula "3"))
 (builtin "One Step Simplification" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "12"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "11"))
(rule "notLeft" (formula "11"))
(rule "notLeft" (formula "8"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "eqSymm" (formula "7"))
(rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "12"))
(rule "inEqSimp_commuteLeq" (formula "13"))
(rule "commuteUnion" (formula "8") (term "1,1,1,1,1"))
(rule "commuteUnion" (formula "8") (term "0,1,1,1,1,1"))
(rule "commute_and" (formula "15") (term "0,0"))
(rule "commute_and" (formula "14") (term "0,0"))
(rule "commute_and" (formula "11") (term "0,0"))
(rule "commute_and" (formula "11") (term "1,0"))
(rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_get,savedHeapBefore_get"))
 (builtin "One Step Simplification" (formula "23"))
(rule "associativeLawUnion" (formula "8") (term "1"))
(rule "commuteUnion" (formula "8") (term "0,1"))
(rule "associativeLawUnion" (formula "8") (term "1"))
(rule "commuteUnion" (formula "8") (term "0,1"))
(rule "associativeLawUnion" (formula "8") (term "1"))
(rule "associativeLawUnion" (formula "8") (term "1"))
(rule "commuteUnion_2" (formula "8") (term "0,1"))
(rule "associativeLawUnion" (formula "8") (term "0,0,1"))
(rule "commuteUnion_2" (formula "8") (term "0,0,0,1"))
(rule "associativeLawUnion" (formula "8") (term "0,0,0,1"))
(rule "commuteUnion_2" (formula "8") (term "0,0,1"))
(rule "commuteUnion_2" (formula "8") (term "0,1"))
(rule "ifElseUnfold" (formula "23") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "23") (term "1") (newnames "x"))
(rule "compound_assignment_3_nonsimple" (formula "23") (term "1"))
(rule "ifElseUnfold" (formula "23") (term "1") (inst "#boolv=x_1"))
(rule "variableDeclaration" (formula "23") (term "1") (newnames "x_1"))
(rule "compound_assignment_2" (formula "23") (term "1") (inst "#v=x_2"))
(rule "variableDeclarationAssign" (formula "23") (term "1"))
(rule "variableDeclaration" (formula "23") (term "1") (newnames "x_2"))
(rule "compound_less_than_comparison_2" (formula "23") (term "1") (inst "#v1=x_4") (inst "#v0=x_3"))
(rule "variableDeclarationAssign" (formula "23") (term "1"))
(rule "variableDeclaration" (formula "23") (term "1") (newnames "x_3"))
(rule "eval_order_array_access4" (formula "23") (term "1") (inst "#v0=x_arr"))
(rule "variableDeclarationAssign" (formula "23") (term "1"))
(rule "variableDeclaration" (formula "23") (term "1") (newnames "x_arr"))
(rule "assignment_read_attribute_this" (formula "23"))
 (builtin "One Step Simplification" (formula "23"))
(rule "assignment_array2" (formula "23"))
(branch "Normal Execution (x_arr != null)"
    (builtin "One Step Simplification" (formula "23"))
   (rule "variableDeclarationAssign" (formula "23") (term "1"))
   (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_4"))
   (rule "assignment_read_attribute_this" (formula "23"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "less_than_comparison_simple" (formula "23") (term "1"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "compound_assignment_1_new" (formula "23") (term "1"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "arrayLengthNotNegative" (formula "10") (term "1"))
   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
   (rule "arrayLengthIsAnInt" (formula "12") (term "1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "arrayLengthIsAnInt" (formula "12") (term "0"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "arrayLengthIsAnInt" (formula "9") (term "0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "arrayLengthNotNegative" (formula "9") (term "0"))
   (rule "ifElseSplit" (formula "26"))
   (branch "if x_1 true"
       (builtin "One Step Simplification" (formula "27"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "ifElseSkipThen" (formula "27") (term "1"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "assignment" (formula "27") (term "1"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "blockReturn" (formula "27") (term "1"))
      (rule "methodCallReturn" (formula "27") (term "1"))
      (rule "assignment" (formula "27") (term "1"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "methodCallEmpty" (formula "27") (term "1"))
      (rule "tryEmpty" (formula "27") (term "1"))
      (rule "emptyModality" (formula "27") (term "1"))
       (opengoal " ")
   )
   (branch "if x_1 false"
       (builtin "One Step Simplification" (formula "27"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "compound_equality_comparison_1" (formula "27") (term "1") (inst "#v0=x_1"))
      (rule "variableDeclarationAssign" (formula "27") (term "1"))
      (rule "variableDeclaration" (formula "27") (term "1") (newnames "x_5"))
      (rule "eval_order_array_access4" (formula "27") (term "1") (inst "#v0=x_arr"))
      (rule "variableDeclarationAssign" (formula "27") (term "1"))
      (rule "variableDeclaration" (formula "27") (term "1") (newnames "x_arr_1"))
      (rule "assignment_read_attribute_this" (formula "27"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "eval_order_array_access5" (formula "27") (term "1") (inst "#v1=x_6") (inst "#ar1=x_arr_2"))
      (rule "variableDeclarationAssign" (formula "27") (term "1"))
      (rule "variableDeclaration" (formula "27") (term "1") (newnames "x_arr_2"))
      (rule "assignment" (formula "27") (term "1"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "variableDeclarationAssign" (formula "27") (term "1"))
      (rule "variableDeclaration" (formula "27") (term "1") (newnames "x_6"))
      (rule "eval_order_array_access4" (formula "27") (term "1") (inst "#v0=x_arr_3"))
      (rule "variableDeclarationAssign" (formula "27") (term "1"))
      (rule "variableDeclaration" (formula "27") (term "1") (newnames "x_arr_3"))
      (rule "assignment_read_attribute_this" (formula "27"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "assignment_array2" (formula "27"))
      (branch "Normal Execution (x_arr_3 != null)"
          (builtin "One Step Simplification" (formula "27"))
         (rule "assignment_array2" (formula "27"))
         (branch "Normal Execution (x_arr_2 != null)"
             (builtin "One Step Simplification" (formula "27"))
            (rule "equality_comparison_simple" (formula "27") (term "1"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "blockEmpty" (formula "27") (term "1"))
            (rule "ifElseSplit" (formula "27"))
            (branch "if x true"
                (builtin "One Step Simplification" (formula "28"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "returnUnfold" (formula "28") (term "1") (inst "#v0=x"))
               (rule "variableDeclarationAssign" (formula "28") (term "1"))
               (rule "variableDeclaration" (formula "28") (term "1") (newnames "x_7"))
               (rule "eval_order_array_access4" (formula "28") (term "1") (inst "#v0=x_arr"))
               (rule "variableDeclarationAssign" (formula "28") (term "1"))
               (rule "variableDeclaration" (formula "28") (term "1") (newnames "x_arr_4"))
               (rule "assignment_read_attribute_this" (formula "28"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "assignment_array2" (formula "28"))
               (branch "Normal Execution (x_arr_4 != null)"
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "methodCallReturn" (formula "28") (term "1"))
                  (rule "assignment" (formula "28") (term "1"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "methodCallEmpty" (formula "28") (term "1"))
                  (rule "tryEmpty" (formula "28") (term "1"))
                  (rule "emptyModality" (formula "28") (term "1"))
                   (opengoal " ")
               )
               (branch "Null Reference (x_arr_4 = null)"
                   (opengoal " ")
               )
               (branch "Index Out of Bounds (x_arr_4 != null, but _i Out of Bounds!)"
                   (opengoal " ")
               )
            )
            (branch "if x false"
                (builtin "One Step Simplification" (formula "28"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "blockReturn" (formula "28") (term "1"))
               (rule "methodCallReturn" (formula "28") (term "1"))
               (rule "assignment" (formula "28") (term "1"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "methodCallEmpty" (formula "28") (term "1"))
               (rule "tryEmpty" (formula "28") (term "1"))
               (rule "emptyModality" (formula "28") (term "1"))
                (opengoal " ")
            )
         )
         (branch "Null Reference (x_arr_2 = null)"
             (opengoal " ")
         )
         (branch "Index Out of Bounds (x_arr_2 != null, but x_6 Out of Bounds!)"
             (opengoal " ")
         )
      )
      (branch "Null Reference (x_arr_3 = null)"
          (opengoal " ")
      )
      (branch "Index Out of Bounds (x_arr_3 != null, but _i Out of Bounds!)"
          (opengoal " ")
      )
   )
)
(branch "Null Reference (x_arr = null)"
    (opengoal " ")
)
(branch "Index Out of Bounds (x_arr != null, but _i Out of Bounds!)"
    (opengoal " ")
)
)
}
