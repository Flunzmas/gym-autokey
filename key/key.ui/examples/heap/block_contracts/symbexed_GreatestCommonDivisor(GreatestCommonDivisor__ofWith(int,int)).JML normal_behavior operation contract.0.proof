\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Nov 12 17:41:03 CET 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=100000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "src";

\proofObligation "#Proof Obligation Settings
#Tue Nov 12 17:41:03 CET 2019
contract=GreatestCommonDivisor[GreatestCommonDivisor\\:\\:ofWith(int,int)].JML normal_behavior operation contract.0
name=GreatestCommonDivisor[GreatestCommonDivisor\\:\\:ofWith(int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "christoph" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "1" (keyUser "Andy" ) (keyVersion "2bbea99a67"))

(autoModeTime "475")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "a,b,result,exc,heapAtPre,o,f"))
(rule "translateJavaMod" (formula "1") (term "0,1,0,0,1,0,0,0,1,1"))
(rule "translateJavaMod" (formula "1") (term "0,1,0,0,0,0,1,1"))
(rule "translateJavaMod" (formula "1") (term "0,1,0,1,0,0,0,1,1"))
(rule "translateJavaMod" (formula "1") (term "0,1,0,0,0,1,0,0,0,1,1"))
(rule "translateJavaMod" (formula "1") (term "0,0,0,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "4") (term "1,0,0,1,0,1"))
(rule "assignment" (formula "4") (term "1"))
 (builtin "One Step Simplification" (formula "4"))
(rule "methodBodyExpand" (formula "4") (term "1") (newnames "heapBefore_ofWith,savedHeapBefore_ofWith,_aBefore_ofWith,_bBefore_ofWith,currentBigBefore_ofWith,currentSmallBefore_ofWith,bigBefore_ofWith,smallBefore_ofWith"))
 (builtin "One Step Simplification" (formula "4"))
 (builtin "Block Contract (Internal)" (formula "4") (newnames "anonOut_heap,result#14,exc#15,heap_Before_BLOCK,savedHeap_Before_BLOCK,b_Before_BLOCK#16,a_Before_BLOCK#17,o,f,anonOut__b,anonOut__a"))
(branch "Validity"
    (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "2")) (ifInst ""  (formula "1")))
    (builtin "One Step Simplification" (formula "5"))
   (rule "true_left" (formula "4"))
   (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,1,1,1,1,0,0,1"))
   (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,1,1,0,1,0,0,1"))
   (rule "eqSymm" (formula "4") (term "0,1,1,1,0,0,1"))
   (rule "eqSymm" (formula "4") (term "0,1,0,1,0,0,1"))
   (rule "eqSymm" (formula "4") (term "1,0,0,1,0,1"))
   (rule "eqSymm" (formula "4") (term "1,1,1,1,0,0,1"))
   (rule "eqSymm" (formula "4") (term "1,1,0,1,0,0,1"))
   (rule "polySimp_elimNeg" (formula "4") (term "0,1,1,1,1,0,0,1"))
   (rule "polySimp_elimNeg" (formula "4") (term "0,1,1,0,1,0,0,1"))
   (rule "variableDeclarationAssign" (formula "4") (term "1"))
   (rule "variableDeclaration" (formula "4") (term "1") (newnames "exc#15_1"))
   (rule "assignment" (formula "4") (term "1"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "ifUnfold" (formula "4") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "4") (term "1") (newnames "x"))
   (rule "less_than_comparison_simple" (formula "4") (term "1"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "ifSplit" (formula "4"))
   (branch "if x true"
       (builtin "One Step Simplification" (formula "5"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "unaryMinusInt" (formula "5") (term "1"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "translateJavaUnaryMinusInt" (formula "5") (term "0,1,0"))
      (rule "polySimp_elimNeg" (formula "5") (term "0,1,0"))
      (rule "ifUnfold" (formula "5") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "5") (term "1") (newnames "x_1"))
      (rule "less_than_comparison_simple" (formula "5") (term "1"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "ifSplit" (formula "5"))
      (branch "if x_1 true"
          (builtin "One Step Simplification" (formula "6"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "unaryMinusInt" (formula "6") (term "1"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "translateJavaUnaryMinusInt" (formula "6") (term "0,1,0"))
         (rule "polySimp_elimNeg" (formula "6") (term "0,1,0"))
         (rule "tryEmpty" (formula "6") (term "1"))
         (rule "blockEmptyLabel" (formula "6") (term "1"))
         (rule "blockEmpty" (formula "6") (term "1"))
         (rule "methodCallEmpty" (formula "6") (term "1"))
         (rule "emptyModality" (formula "6") (term "1"))
          (opengoal " ")
      )
      (branch "if x_1 false"
          (builtin "One Step Simplification" (formula "6"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "tryEmpty" (formula "6") (term "1"))
         (rule "blockEmptyLabel" (formula "6") (term "1"))
         (rule "blockEmpty" (formula "6") (term "1"))
         (rule "methodCallEmpty" (formula "6") (term "1"))
         (rule "emptyModality" (formula "6") (term "1"))
          (opengoal " ")
      )
   )
   (branch "if x false"
       (builtin "One Step Simplification" (formula "5"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "ifUnfold" (formula "5") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "5") (term "1") (newnames "x_1"))
      (rule "less_than_comparison_simple" (formula "5") (term "1"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "ifSplit" (formula "5"))
      (branch "if x_1 true"
          (builtin "One Step Simplification" (formula "6"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "unaryMinusInt" (formula "6") (term "1"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "translateJavaUnaryMinusInt" (formula "6") (term "0,1,0"))
         (rule "polySimp_elimNeg" (formula "6") (term "0,1,0"))
         (rule "tryEmpty" (formula "6") (term "1"))
         (rule "blockEmptyLabel" (formula "6") (term "1"))
         (rule "blockEmpty" (formula "6") (term "1"))
         (rule "methodCallEmpty" (formula "6") (term "1"))
         (rule "emptyModality" (formula "6") (term "1"))
          (opengoal " ")
      )
      (branch "if x_1 false"
          (builtin "One Step Simplification" (formula "6"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "tryEmpty" (formula "6") (term "1"))
         (rule "blockEmptyLabel" (formula "6") (term "1"))
         (rule "blockEmpty" (formula "6") (term "1"))
         (rule "methodCallEmpty" (formula "6") (term "1"))
         (rule "emptyModality" (formula "6") (term "1"))
          (opengoal " ")
      )
   )
)
(branch "Precondition"
    (opengoal " ")
)
(branch "Usage"
    (builtin "One Step Simplification" (formula "4"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,1,1,1,1,0,0"))
   (rule "translateJavaUnaryMinusInt" (formula "4") (term "1,1,1,0,1,0,0"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "7"))
   (rule "eqSymm" (formula "8") (term "0"))
   (rule "eqSymm" (formula "8") (term "1"))
   (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "4"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "polySimp_elimNeg" (formula "6") (term "1,1"))
   (rule "polySimp_elimNeg" (formula "8") (term "0,1"))
   (rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "x"))
   (rule "inequality_comparison_simple" (formula "10") (term "1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "replace_known_left" (formula "10") (term "0,0,1,0") (ifseqformula "4"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "ifSplit" (formula "10"))
   (branch "if x true"
       (builtin "One Step Simplification" (formula "11"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "if x false"
       (builtin "One Step Simplification" (formula "11"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "blockEmpty" (formula "10") (term "1"))
      (rule "variableDeclarationFinal" (formula "10") (term "1") (newnames "small"))
      (rule "variableDeclarationFinal" (formula "10") (term "1") (newnames "big"))
       (builtin "Block Contract (Internal)" (formula "10") (newnames "anonOut_heap_0,result#6,exc#7,heap_Before_BLOCK_0,savedHeap_Before_BLOCK_0,big_Before_BLOCK#8,small_Before_BLOCK#9,o,f,anonOut_big,anonOut_small"))
      (branch "Validity"
          (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "2")))
          (builtin "One Step Simplification" (formula "11"))
         (rule "eqSymm" (formula "11") (term "1,0,0,1,0,1"))
         (rule "inEqSimp_commuteGeq" (formula "11") (term "1,1,1,1,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,0,0,1"))
         (rule "variableDeclarationAssign" (formula "11") (term "1"))
         (rule "variableDeclaration" (formula "11") (term "1") (newnames "exc#7_1"))
         (rule "assignment" (formula "11") (term "1"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "ifElseUnfold" (formula "11") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_1"))
         (rule "less_equal_than_comparison_simple" (formula "11") (term "1"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,0"))
         (rule "ifElseSplit" (formula "11"))
         (branch "if x_1 true"
             (builtin "One Step Simplification" (formula "12"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "assignment" (formula "12") (term "1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "assignment" (formula "12") (term "1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "tryEmpty" (formula "12") (term "1"))
            (rule "blockEmptyLabel" (formula "12") (term "1"))
            (rule "blockEmpty" (formula "12") (term "1"))
            (rule "methodCallEmpty" (formula "12") (term "1"))
            (rule "emptyModality" (formula "12") (term "1"))
             (opengoal " ")
         )
         (branch "if x_1 false"
             (builtin "One Step Simplification" (formula "12"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "assignment" (formula "12") (term "1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "assignment" (formula "12") (term "1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "tryEmpty" (formula "12") (term "1"))
            (rule "blockEmptyLabel" (formula "12") (term "1"))
            (rule "blockEmpty" (formula "12") (term "1"))
            (rule "methodCallEmpty" (formula "12") (term "1"))
            (rule "emptyModality" (formula "12") (term "1"))
             (opengoal " ")
         )
      )
      (branch "Precondition"
          (opengoal " ")
      )
      (branch "Usage"
          (builtin "One Step Simplification" (formula "10"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "13"))
         (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0"))
         (rule "inEqSimp_commuteGeq" (formula "14"))
         (rule "commute_and" (formula "11") (term "1"))
         (rule "commute_and" (formula "12") (term "1"))
         (rule "ifUnfold" (formula "16") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_1"))
         (rule "inequality_comparison_simple" (formula "16") (term "1"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "replace_known_left" (formula "16") (term "0,0,1,0") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "ifSplit" (formula "16"))
         (branch "if x_1 true"
             (builtin "One Step Simplification" (formula "17"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_1 false"
             (builtin "One Step Simplification" (formula "17"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "blockEmpty" (formula "16") (term "1"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "currentBig"))
            (rule "assignment" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "variableDeclarationAssign" (formula "16") (term "1"))
            (rule "variableDeclaration" (formula "16") (term "1") (newnames "currentSmall"))
            (rule "assignment" (formula "16") (term "1"))
             (builtin "One Step Simplification" (formula "16"))
             (builtin "Block Contract (Internal)" (formula "16") (newnames "anonOut_heap_1,result#0,exc#1,heap_Before_BLOCK_1,savedHeap_Before_BLOCK_1,currentSmall_Before_BLOCK#2,currentBig_Before_BLOCK#3,o,f,anonOut_currentSmall,anonOut_currentBig"))
            (branch "Validity"
                (builtin "One Step Simplification" (formula "17"))
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "2")) (ifInst ""  (formula "13")))
               (rule "translateJavaMod" (formula "17") (term "0,1,0,1,1,1,0,0,1"))
               (rule "translateJavaMod" (formula "17") (term "0,1,0,0,1,1,1,0,0,1"))
               (rule "translateJavaMod" (formula "17") (term "0,1,0,0,0,1,1,1,0,0,1"))
               (rule "translateJavaMod" (formula "17") (term "0,1,0,1,1,0,0,1"))
               (rule "translateJavaMod" (formula "17") (term "0,0,0,1,1,0,0,1"))
               (rule "andLeft" (formula "16"))
               (rule "eqSymm" (formula "18") (term "1,0,0,1,0,1"))
               (rule "inEqSimp_commuteGeq" (formula "16"))
               (rule "variableDeclarationAssign" (formula "17") (term "1"))
               (rule "variableDeclaration" (formula "17") (term "1") (newnames "exc#1_1"))
               (rule "assignment" (formula "17") (term "1"))
                (builtin "One Step Simplification" (formula "17"))
                (builtin "Loop (Scope) Invariant" (formula "17") (newnames "heapBefore_LOOP,currentSmallBefore_LOOP,currentBigBefore_LOOP,currentSmall_0,currentBig_0,heap_After_LOOP,anon_heap_LOOP,o,f,variant"))
               (branch "Invariant Initially Valid"
                   (opengoal " ")
               )
               (branch "Invariant Preserved and Used"
                   (builtin "One Step Simplification" (formula "17"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "translateJavaMod" (formula "17") (term "0,1,1,1,0,1"))
                  (rule "translateJavaMod" (formula "17") (term "0,0,1,1,0,1"))
                  (rule "translateJavaMod" (formula "17") (term "0,1,0,1,0,1"))
                  (rule "translateJavaMod" (formula "17") (term "0,0,0,1,0,1"))
                  (rule "translateJavaMod" (formula "19") (term "0,1,1,1,0,1,0,0,1,1,0,1"))
                  (rule "translateJavaMod" (formula "19") (term "0,0,1,1,0,1,0,0,1,1,0,1"))
                  (rule "translateJavaMod" (formula "19") (term "0,1,0,1,0,1,0,0,1,1,0,1"))
                  (rule "translateJavaMod" (formula "19") (term "0,0,0,1,0,1,0,0,1,1,0,1"))
                  (rule "andLeft" (formula "17"))
                  (rule "andLeft" (formula "17"))
                  (rule "andLeft" (formula "17"))
                  (rule "eqSymm" (formula "22") (term "1,0,0,1,0,1,1,0,1"))
                  (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0,0,0,0,1,1,0,1"))
                  (rule "inEqSimp_commuteGeq" (formula "18"))
                  (rule "variableDeclarationAssign" (formula "22") (term "1"))
                  (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_2"))
                  (rule "assignment" (formula "22") (term "1"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "ifUnfold" (formula "22") (term "1") (inst "#boolv=x_3"))
                  (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_3"))
                  (rule "inequality_comparison_simple" (formula "22") (term "1"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "ifSplit" (formula "22"))
                  (branch "if x_3 true"
                      (builtin "One Step Simplification" (formula "23"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "variableDeclarationFinalAssign" (formula "23") (term "1"))
                     (rule "variableDeclarationFinal" (formula "23") (term "1") (newnames "remainder"))
                     (rule "assignmentModulo" (formula "23") (term "1"))
                      (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "22")))
                     (rule "translateJavaMod" (formula "23") (term "0,1,0"))
                     (rule "assignment" (formula "23") (term "1"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "assignment" (formula "23") (term "1"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "assignment" (formula "23") (term "1"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "emptyIndexedLoopScope" (formula "23") (term "1"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "emptyModality" (formula "23") (term "1"))
                      (opengoal " ")
                  )
                  (branch "if x_3 false"
                      (builtin "One Step Simplification" (formula "23"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "18"))
                     (rule "true_left" (formula "18"))
                     (rule "applyEqRigid" (formula "22") (term "0,0,0,0,1,1,0,0") (ifseqformula "1"))
                     (rule "applyEqRigid" (formula "20") (term "0,0,1,0,1,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "applyEqRigid" (formula "22") (term "0,1,1,1,0,0") (ifseqformula "1"))
                     (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "1"))
                     (rule "inEqSimp_commuteLeq" (formula "18"))
                     (rule "emptyIndexedLoopScope" (formula "22") (term "1"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "tryEmpty" (formula "22") (term "1"))
                     (rule "blockEmptyLabel" (formula "22") (term "1"))
                     (rule "blockEmpty" (formula "22") (term "1"))
                     (rule "methodCallEmpty" (formula "22") (term "1"))
                     (rule "emptyModality" (formula "22") (term "1"))
                      (opengoal " ")
                  )
               )
            )
            (branch "Precondition"
                (opengoal " ")
            )
            (branch "Usage"
                (builtin "One Step Simplification" (formula "16"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "translateJavaMod" (formula "16") (term "0,1,0,1,1,1,0,0"))
               (rule "translateJavaMod" (formula "16") (term "0,1,0,0,1,1,1,0,0"))
               (rule "translateJavaMod" (formula "16") (term "0,1,0,0,0,1,1,1,0,0"))
               (rule "translateJavaMod" (formula "16") (term "0,1,0,1,1,0,0"))
               (rule "translateJavaMod" (formula "16") (term "0,0,0,1,1,0,0"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "andLeft" (formula "16"))
               (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "true_left" (formula "19"))
               (rule "ifUnfold" (formula "19") (term "1") (inst "#boolv=x"))
               (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_2"))
               (rule "inequality_comparison_simple" (formula "19") (term "1"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "replace_known_left" (formula "19") (term "0,0,1,0") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "ifSplit" (formula "19"))
               (branch "if x_2 true"
                   (builtin "One Step Simplification" (formula "20"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if x_2 false"
                   (builtin "One Step Simplification" (formula "20"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "blockEmpty" (formula "19") (term "1"))
                  (rule "methodCallReturn" (formula "19") (term "1"))
                  (rule "assignment" (formula "19") (term "1"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "methodCallEmpty" (formula "19") (term "1"))
                  (rule "tryEmpty" (formula "19") (term "1"))
                  (rule "emptyModality" (formula "19") (term "1"))
                   (opengoal " ")
               )
            )
         )
      )
   )
)
)
}
