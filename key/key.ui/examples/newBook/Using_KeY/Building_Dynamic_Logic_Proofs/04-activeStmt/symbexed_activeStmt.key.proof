\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Nov 10 15:47:10 CET 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:on , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\programVariables {
  int i;
}

\problem {
\<{l1: {
    try {
        i=0;
              if (i==0)        break l1;
      }         catch (Exception e) {}        finally {
        i=i+1;
      }
    }
    i=i+1;
  }\> i = Z(2(#))

}

\proof {
(keyLog "0" (keyUser "Andy" ) (keyVersion "2bbea99a67"))

(autoModeTime "8")

(branch "dummy ID"
(rule "assignment" (formula "1"))
(rule "ifUnfold" (formula "1") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "1") (term "1") (newnames "x"))
(rule "equality_comparison_simple" (formula "1") (term "1"))
 (builtin "One Step Simplification" (formula "1"))
(rule "ifSplit" (formula "1"))
(branch "if x true"
    (builtin "One Step Simplification" (formula "1"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "1"))
   (rule "tryFinallyBreakLabel" (formula "1") (term "1"))
   (rule "assignmentAdditionInt" (formula "1") (term "1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "translateJavaAddInt" (formula "1") (term "0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0"))
   (rule "blockEmpty" (formula "1") (term "1"))
   (rule "break" (formula "1") (term "1"))
   (rule "blockEmpty" (formula "1") (term "1"))
   (rule "assignmentAdditionInt" (formula "1") (term "1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "translateJavaAddInt" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "emptyModality" (formula "1") (term "1"))
    (opengoal "\\<{l1: {     try {         i=0;               if (i==0)        break l1;       }         catch (Exception e) {}        finally {         i=i+1;       }     }     i=i+1;   }\\> i = Z(2(#)) ")
)
(branch "if x false"
    (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
)
}
