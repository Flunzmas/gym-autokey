\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Sep 05 13:32:09 CEST 2014
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=5000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=Strings-Strings\\:on , reach-reach\\:on , JavaCard-JavaCard\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , initialisation-initialisation\\:disableStaticInitialisation , modelFields-modelFields\\:showSatisfiability , sequences-sequences\\:on , integerSimplificationRules-integerSimplificationRules\\:full , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_OFF
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Fri Sep 05 13:32:09 CEST 2014
name=DependencyContractExample[DependencyContractExample\\:\\:incC(int)].JML normal_behavior operation contract.0
contract=DependencyContractExample[DependencyContractExample\\:\\:incC(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "bubel" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "1" (keyUser "Martin" ) (keyVersion "5374b764ad3b32a73c0b940d4b6987d47bf3911c"))
(keyLog "2" (keyUser "Martin" ) (keyVersion "5374b764ad3b32a73c0b940d4b6987d47bf3911c"))

(autoModeTime "2091")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "translateJavaAddInt" (formula "1") (term "1,0,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "8") (term "1,0,0,0,1"))
(rule "polySimp_homoEq" (formula "8") (term "0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "8") (term "0,0,0,0,0,0,1"))
(rule "polySimp_addComm1" (formula "8") (term "0,0,0,0,0,1"))
(rule "assignment" (formula "8") (term "1"))
(builtin "One Step Simplification" (formula "8"))
(rule "polySimp_sepPosMonomial" (formula "8") (term "0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "0,1,0,0,0,0,1"))
(rule "Class_invariant_axiom_for_DependencyContractExample" (formula "6") (inst "sk=sk_0") (ifseqformula "3"))
(branch "Use Axiom"
   (rule "true_left" (formula "6"))
   (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_incC,savedHeapBefore_incC"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "y"))
   (rule "assignment" (formula "7") (term "1"))
   (builtin "One Step Simplification" (formula "7"))
   (builtin "Loop Invariant" (formula "7") (newnames "heapBeforeLoop,_nBeforeLoop,_n_0,anon_heap_loop,o,f,variant,b"))
   (branch "Invariant Initially Valid"
      (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")) (ifInst ""  (formula "5")))
      (rule "closeTrue" (formula "7"))
   )
   (branch "Body Preserves Invariant"
      (builtin "One Step Simplification" (formula "7"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "translateJavaAddInt" (formula "7") (term "1,0,1"))
      (rule "translateJavaAddInt" (formula "7") (term "0,0,1"))
      (rule "translateJavaAddInt" (formula "9") (term "0,0,1,0,0,1,1,0,1,1"))
      (rule "translateJavaAddInt" (formula "9") (term "1,0,1,0,0,1,1,0,1,1"))
      (rule "andLeft" (formula "7"))
      (rule "impRight" (formula "10"))
      (rule "andLeft" (formula "9"))
      (rule "eqSymm" (formula "12") (term "1,0,0,1,0,1,1,0,1"))
      (rule "eqSymm" (formula "12") (term "1,1,0,0,1,1,0,1"))
      (rule "polySimp_homoEq" (formula "12") (term "0,1,0,0,1,1,0,1"))
      (rule "polySimp_homoEq" (formula "9"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
      (rule "polySimp_addComm0" (formula "12") (term "0,0,0,1,0,0,1,1,0,1"))
      (rule "polySimp_addComm0" (formula "9") (term "0,0"))
      (rule "polySimp_addComm0" (formula "12") (term "1,1,0,0,1,0,0,1,1,0,1"))
      (rule "polySimp_addComm0" (formula "9") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0,1,0,0,1,1,0,1"))
      (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0,0,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "9") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "0,1,0"))
      (rule "elementOfSingleton" (formula "12") (term "0,0,0,0,1,0,1,1,0,1"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0,1,1,0,1"))
      (rule "polySimp_addComm0" (formula "12") (term "0,0,0,0,1,0,0,1,1,0,1"))
      (rule "polySimp_addAssoc" (formula "9") (term "0"))
      (rule "polySimp_addComm1" (formula "9") (term "0,0"))
      (rule "polySimp_addComm0" (formula "9") (term "0,0,0"))
      (rule "variableDeclarationAssign" (formula "1") (term "1"))
      (rule "variableDeclarationAssign" (formula "12") (term "1"))
      (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_2"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "exc_1"))
      (rule "assignment" (formula "12") (term "1"))
      (builtin "One Step Simplification" (formula "12"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "thrownExc"))
      (rule "blockThrow" (formula "12") (term "1,0,0,1"))
      (rule "polySimp_sepNegMonomial" (formula "9"))
      (rule "polySimp_mulLiterals" (formula "9") (term "0"))
      (rule "polySimp_elimOne" (formula "9") (term "0"))
      (rule "polySimp_sepPosMonomial" (formula "12") (term "0,1,0,0,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0,0,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,1,0,0,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,1,0,0,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,0,1,0,0,1,1,0,1"))
      (rule "polySimp_rightDist" (formula "12") (term "0,1,0,1,0,0,1,1,0,1"))
      (rule "polySimp_mulAssoc" (formula "12") (term "0,0,1,0,1,0,0,1,1,0,1"))
      (rule "polySimp_mulComm0" (formula "12") (term "0,0,0,1,0,1,0,0,1,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1,0,1,0,0,1,1,0,1"))
      (rule "polySimp_elimOne" (formula "12") (term "0,0,1,0,1,0,0,1,1,0,1"))
      (rule "pullOutSelect" (formula "9") (term "0") (inst "selectSK=DependencyContractExample_c_4"))
      (rule "simplifySelectOfAnon" (formula "9"))
      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "12")) (ifInst ""  (formula "3")))
      (rule "polySimp_homoEq" (formula "10"))
      (rule "polySimp_addComm1" (formula "10") (term "0"))
      (rule "polySimp_addComm1" (formula "10") (term "0,0"))
      (rule "polySimp_addComm0" (formula "10") (term "0,0,0"))
      (rule "elementOfSingleton" (formula "9") (term "0,0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "applyEqReverse" (formula "10") (term "0,0,0,0,0") (ifseqformula "9"))
      (rule "hideAuxiliaryEq" (formula "9"))
      (rule "polySimp_addComm0" (formula "9") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "9") (term "0,0"))
      (rule "polySimp_addComm1" (formula "9") (term "0"))
      (rule "polySimp_sepNegMonomial" (formula "9"))
      (rule "polySimp_mulLiterals" (formula "9") (term "0"))
      (rule "polySimp_elimOne" (formula "9") (term "0"))
      (rule "boxToDiamond" (formula "1") (term "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "greater_than_comparison_simple" (formula "10") (term "1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_gtToGeq" (formula "10") (term "0,0,1,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,1,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,1,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,1,0"))
      (rule "methodCallEmpty" (formula "10") (term "1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "emptyModality" (formula "10") (term "1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "notRight" (formula "10"))
      (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "1"))
      (rule "leq_literals" (formula "8") (term "0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "x"))
      (rule "greater_than_comparison_simple" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "inEqSimp_gtToGeq" (formula "11") (term "0,0,1,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,1,0"))
      (rule "add_zero_right" (formula "11") (term "0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,1,0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,1,0"))
      (rule "replace_known_left" (formula "11") (term "0,0,1,0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "ifSplit" (formula "11"))
      (branch "if x true"
         (builtin "One Step Simplification" (formula "12"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "postincrement_attribute" (formula "11") (term "1") (inst "#v=d"))
         (rule "variableDeclarationAssign" (formula "11") (term "1"))
         (rule "variableDeclaration" (formula "11") (term "1") (newnames "d_2"))
         (rule "assignment" (formula "11") (term "1"))
         (builtin "One Step Simplification" (formula "11"))
         (rule "eval_order_access4" (formula "11") (inst "#v1=x") (inst "#v0=d_3"))
         (branch "Normal Execution (d_2 != null)"
            (rule "variableDeclarationAssign" (formula "11") (term "1"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "d_3"))
            (rule "assignment" (formula "11") (term "1"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "variableDeclarationAssign" (formula "11") (term "1"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_1"))
            (rule "compound_int_cast_expression" (formula "11") (term "1") (inst "#v=x_2"))
            (rule "variableDeclarationAssign" (formula "11") (term "1"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_2"))
            (rule "remove_parentheses_right" (formula "11") (term "1"))
            (rule "compound_addition_1" (formula "11") (term "1") (inst "#v=x_3"))
            (rule "variableDeclarationAssign" (formula "11") (term "1"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_3"))
            (rule "assignment_read_attribute" (formula "11"))
            (branch "Normal Execution (d_2 != null)"
               (builtin "One Step Simplification" (formula "11"))
               (rule "replaceKnownSelect_taclet10_0" (formula "11") (term "0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet10_1" (formula "11") (term "0,1,0"))
               (rule "applyEq" (formula "11") (term "0,1,0") (ifseqformula "8"))
               (rule "assignmentAdditionInt" (formula "11") (term "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "translateJavaAddInt" (formula "11") (term "0,1,0"))
               (rule "polySimp_addComm1" (formula "11") (term "0,1,0"))
               (rule "polySimp_addComm1" (formula "11") (term "0,0,1,0"))
               (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1,0"))
               (rule "widening_identity_cast_5" (formula "11") (term "1"))
               (rule "assignment" (formula "11") (term "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "assignment_write_attribute" (formula "11"))
               (branch "Normal Execution (d_3 != null)"
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "postdecrement" (formula "11") (term "1"))
                  (rule "compound_subtraction_1" (formula "11") (term "1") (inst "#v=x"))
                  (rule "variableDeclarationAssign" (formula "11") (term "1"))
                  (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_4"))
                  (rule "widening_identity_cast_5" (formula "11") (term "1"))
                  (rule "assignment" (formula "11") (term "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "assignmentSubtractionInt" (formula "11") (term "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "translateJavaSubInt" (formula "11") (term "0,1,0"))
                  (rule "polySimp_elimSub" (formula "11") (term "0,1,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,1,0"))
                  (rule "polySimp_addComm0" (formula "11") (term "0,1,0"))
                  (rule "tryEmpty" (formula "11") (term "1"))
                  (rule "methodCallEmpty" (formula "11") (term "1"))
                  (rule "emptyModality" (formula "11") (term "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "eqSymm" (formula "11") (term "1,1,0,0"))
                  (rule "eqSymm" (formula "11") (term "1,0,0,1,0"))
                  (rule "polySimp_homoEq" (formula "11") (term "0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,0,1,0,0"))
                  (rule "precOfInt" (formula "11") (term "1"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "1,1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,1,1"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,0,1,1"))
                  (rule "add_literals" (formula "11") (term "0,0,0,1,1"))
                  (rule "add_zero_left" (formula "11") (term "0,0,1,1"))
                  (rule "polySimp_pullOutFactor2" (formula "11") (term "0,1,1"))
                  (rule "add_literals" (formula "11") (term "1,0,1,1"))
                  (rule "times_zero_1" (formula "11") (term "0,1,1"))
                  (rule "leq_literals" (formula "11") (term "1,1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "inEqSimp_homoInEq0" (formula "11") (term "1"))
                  (rule "times_zero_2" (formula "11") (term "1,0,1"))
                  (rule "add_zero_right" (formula "11") (term "0,1"))
                  (rule "polySimp_sepPosMonomial" (formula "11") (term "0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "0,1,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "0,0,1,0,1,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,0,0,1,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,0"))
                  (rule "replace_known_left" (formula "11") (term "0,0,0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1"))
                  (rule "mul_literals" (formula "11") (term "1,1"))
                  (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "pullOutSelect" (formula "11") (term "0,0,0") (inst "selectSK=DependencyContractExample_c_5"))
                  (rule "simplifySelectOfStore" (formula "1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "0"))
                  (rule "applyEqReverse" (formula "12") (term "0,0,0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "cut_direct" (formula "11") (term "0"))
                  (branch "CUT: self.getB() @heap[anon({(self, c)})] [self.c := 1 + _n_0 * -1 + n + self.c] = self.getB() TRUE"
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "allRight" (formula "12") (inst "sk=f_1"))
                     (rule "allRight" (formula "12") (inst "sk=o_1"))
                     (rule "orRight" (formula "12"))
                     (rule "orRight" (formula "12"))
                     (rule "pullOutSelect" (formula "14") (term "0") (inst "selectSK=f_1_0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "15"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "13"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
                     (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "13"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "CUT: self.getB() @heap[anon({(self, c)})] [self.c := 1 + _n_0 * -1 + n + self.c] = self.getB() FALSE"
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "false_right" (formula "12"))
                     (opengoal " ")
                  )
               )
               (branch "Null Reference (d_3 = null)"
                  (builtin "One Step Simplification" (formula "12"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Null Reference (d_2 = null)"
               (rule "false_right" (formula "12"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Null Reference (d_2 = null)"
            (rule "false_right" (formula "12"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "if x false"
         (builtin "One Step Simplification" (formula "12"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Use Case"
      (builtin "One Step Simplification" (formula "9"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "translateJavaAddInt" (formula "7") (term "0,0,1"))
      (rule "translateJavaAddInt" (formula "7") (term "1,0,1"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "8"))
      (rule "polySimp_homoEq" (formula "8"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
      (rule "polySimp_addComm0" (formula "8") (term "0,0"))
      (rule "polySimp_addComm0" (formula "8") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0"))
      (rule "polySimp_addComm1" (formula "8") (term "0,0"))
      (rule "polySimp_addComm0" (formula "8") (term "0,0,0"))
      (rule "variableDeclarationAssign" (formula "11") (term "1"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "b_1"))
      (rule "polySimp_sepNegMonomial" (formula "8"))
      (rule "polySimp_mulLiterals" (formula "8") (term "0"))
      (rule "polySimp_elimOne" (formula "8") (term "0"))
      (rule "pullOutSelect" (formula "8") (term "0") (inst "selectSK=DependencyContractExample_c_3"))
      (rule "simplifySelectOfAnon" (formula "8"))
      (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "11")) (ifInst ""  (formula "2")))
      (rule "polySimp_homoEq" (formula "9"))
      (rule "polySimp_addComm1" (formula "9") (term "0"))
      (rule "polySimp_addComm1" (formula "9") (term "0,0"))
      (rule "polySimp_addComm0" (formula "9") (term "0,0,0"))
      (rule "elementOfSingleton" (formula "8") (term "0,0"))
      (builtin "One Step Simplification" (formula "8"))
      (rule "applyEqReverse" (formula "9") (term "0,0,0,0,0") (ifseqformula "8"))
      (rule "hideAuxiliaryEq" (formula "8"))
      (rule "polySimp_addComm0" (formula "8") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "8") (term "0,0"))
      (rule "polySimp_addComm1" (formula "8") (term "0"))
      (rule "polySimp_sepNegMonomial" (formula "8"))
      (rule "polySimp_mulLiterals" (formula "8") (term "0"))
      (rule "polySimp_elimOne" (formula "8") (term "0"))
      (rule "greater_than_comparison_simple" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "inEqSimp_gtToGeq" (formula "11") (term "0,0,1,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,1,0"))
      (rule "add_zero_right" (formula "11") (term "0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,1,0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,1,0"))
      (rule "methodCallEmpty" (formula "11") (term "1"))
      (rule "emptyModality" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "impRight" (formula "11"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_geqRight" (formula "10"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "1"))
      (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "8"))
      (rule "qeq_literals" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
      (rule "leq_literals" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "applyEq" (formula "8") (term "0,0,0,1") (ifseqformula "7"))
      (rule "times_zero_2" (formula "8") (term "0,0,1"))
      (rule "add_zero_left" (formula "8") (term "0,1"))
      (rule "methodCallEmpty" (formula "11") (term "1"))
      (rule "tryEmpty" (formula "11") (term "1"))
      (rule "emptyModality" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "replaceKnownSelect_taclet20_0" (formula "11") (term "1,1,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_1" (formula "11") (term "1,1,0,0"))
      (rule "eqSymm" (formula "11") (term "1,0"))
      (rule "replace_known_left" (formula "11") (term "1,0") (ifseqformula "9"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "polySimp_homoEq" (formula "11") (term "0"))
      (rule "polySimp_addComm1" (formula "11") (term "0,0"))
      (rule "applyEq" (formula "11") (term "1,0,0") (ifseqformula "8"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
      (rule "polySimp_addComm1" (formula "11") (term "0,0,0"))
      (rule "polySimp_pullOutFactor2b" (formula "11") (term "0,0"))
      (rule "add_literals" (formula "11") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0"))
      (rule "add_zero_right" (formula "11") (term "0,0"))
      (rule "polySimp_pullOutFactor2" (formula "11") (term "0,0"))
      (rule "add_literals" (formula "11") (term "1,0,0"))
      (rule "times_zero_1" (formula "11") (term "0,0"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "Class_invariant_axiom_for_DependencyContractExample" (formula "11") (inst "sk=sk_3") (ifseqformula "3"))
      (branch "Use Axiom"
         (rule "closeTrue" (formula "11"))
      )
      (branch "Show Axiom Satisfiability"
         (builtin "One Step Simplification" (formula "11"))
         (rule "closeTrue" (formula "11"))
      )
   )
)
(branch "Show Axiom Satisfiability"
   (builtin "One Step Simplification" (formula "7"))
   (rule "closeTrue" (formula "7"))
)
)

}
