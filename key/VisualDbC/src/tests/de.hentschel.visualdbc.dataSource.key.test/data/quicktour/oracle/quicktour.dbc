<?xml version="1.0" encoding="ASCII"?>
<dbcmodel:DbcModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbcmodel="http://www.hentschel.de/dbcmodel" driverId="de.hentschel.visualdbc.dataSource.key">
  <packages name="paycard">
    <types xsi:type="dbcmodel:DbcClass" name="CardException">
      <constructors signature="CardException()"/>
      <extendsFullNames>java.lang.Exception</extendsFullNames>
    </types>
    <types xsi:type="dbcmodel:DbcClass" name="LogFile">
      <invariants name="JML class invariant nr 1 in LogFile" condition="nonNull(heap,&#xA;        paycard.LogRecord[]::select(heap,&#xA;                                    self,&#xA;                                    paycard.LogFile::$logArray),&#xA;        Z(1(#)))"/>
      <invariants name="JML class invariant nr 2 in LogFile" condition="length(paycard.LogRecord[]::select(heap,&#xA;                                       self,&#xA;                                       paycard.LogFile::$logArray))&#xA;  = int::select(heap,&#xA;                null,&#xA;                paycard.LogFile::$logFileSize)&#xA;&amp; lt(int::select(heap,&#xA;                 self,&#xA;                 paycard.LogFile::$currentRecord),&#xA;     int::select(heap,&#xA;                 null,&#xA;                 paycard.LogFile::$logFileSize))&#xA;&amp; geq(int::select(heap,&#xA;                  self,&#xA;                  paycard.LogFile::$currentRecord),&#xA;      Z(0(#)))&#xA;&amp; (  !  paycard.LogRecord[]::select(heap,&#xA;                                    self,&#xA;                                    paycard.LogFile::$logArray)&#xA;      = null&#xA;   &amp; \forall int i;&#xA;       (     leq(Z(0(#)), i)&#xA;           &amp; lt(i,&#xA;                length(paycard.LogRecord[]::select(heap,&#xA;                                                   self,&#xA;                                                   paycard.LogFile::$logArray)))&#xA;        -> !  paycard.LogRecord::select(heap,&#xA;                                        paycard.LogRecord[]::select(heap,&#xA;                                                                    self,&#xA;                                                                    paycard.LogFile::$logArray),&#xA;                                        arr(i))&#xA;            = null))"/>
      <methods signature="addRecord(balance : int)" returnType="void">
        <operationContracts name="paycard.LogFile[paycard.LogFile::addRecord(int)].JML normal_behavior operation contract.0" proofObligations="//@proofObligations.0" pre="geq(balance, Z(0(#)))&#xA;&amp; java.lang.Object::&lt;inv>(heap, self)" post="\if (!  javaAddInt(int::select(heapAtPre,&#xA;                                 self,&#xA;                                 paycard.LogFile::$currentRecord),&#xA;                     Z(1(#)))&#xA;        = int::select(heap,&#xA;                      null,&#xA;                      paycard.LogFile::$logFileSize))&#xA;      \then (  int::select(heap,&#xA;                           self,&#xA;                           paycard.LogFile::$currentRecord)&#xA;             = javaAddInt(int::select(heapAtPre,&#xA;                                      self,&#xA;                                      paycard.LogFile::$currentRecord),&#xA;                          Z(1(#))))&#xA;      \else (  int::select(heap,&#xA;                           self,&#xA;                           paycard.LogFile::$currentRecord)&#xA;             = Z(0(#)))&#xA;&amp; (    int::select(heap,&#xA;                   paycard.LogRecord::select(heap,&#xA;                                             paycard.LogRecord[]::select(heap,&#xA;                                                                         self,&#xA;                                                                         paycard.LogFile::$logArray),&#xA;                                             arr(int::select(heap,&#xA;                                                             self,&#xA;                                                             paycard.LogFile::$currentRecord))),&#xA;                   paycard.LogRecord::$balance)&#xA;     = balance&#xA;   &amp; java.lang.Object::&lt;inv>(heap, self))&#xA;&amp; exc = null" modifies="mod[heap]: allLocs" termination="diamond"/>
      </methods>
      <methods signature="getMaximumRecord()" returnType="paycard.LogRecord">
        <operationContracts name="paycard.LogFile[paycard.LogFile::getMaximumRecord()].JML normal_behavior operation contract.0" proofObligations="//@proofObligations.0" pre="java.lang.Object::&lt;inv>(heap, self)" post="\forall int i;&#xA;    (     leq(Z(0(#)), i)&#xA;        &amp; lt(i,&#xA;             length(paycard.LogRecord[]::select(heap,&#xA;                                                self,&#xA;                                                paycard.LogFile::$logArray)))&#xA;        &amp; inInt(i)&#xA;     -> leq(int::select(heap,&#xA;                        paycard.LogRecord::select(heap,&#xA;                                                  paycard.LogRecord[]::select(heap,&#xA;                                                                              self,&#xA;                                                                              paycard.LogFile::$logArray),&#xA;                                                  arr(i)),&#xA;                        paycard.LogRecord::$balance),&#xA;            int::select(heap,&#xA;                        result,&#xA;                        paycard.LogRecord::$balance)))&#xA;&amp; (java.lang.Object::&lt;inv>(heap, self) &amp; !result = null)&#xA;&amp; exc = null" modifies="mod[heap]: empty" termination="box"/>
      </methods>
      <attributes name="logFileSize" type="int" visibility="default" static="true"/>
      <attributes name="currentRecord" type="int" visibility="default"/>
      <attributes name="logArray" type="paycard.LogRecord[]" visibility="default"/>
      <constructors signature="LogFile()"/>
      <extendsFullNames>java.lang.Object</extendsFullNames>
    </types>
    <types xsi:type="dbcmodel:DbcClass" name="LogRecord">
      <invariants name="JML class invariant nr 4 in LogRecord" condition="!  boolean::select(heap,&#xA;                      self,&#xA;                      paycard.LogRecord::$empty)&#xA;    = TRUE&#xA;->   geq(int::select(heap,&#xA;                     self,&#xA;                     paycard.LogRecord::$balance),&#xA;         Z(0(#)))&#xA;   &amp; geq(int::select(heap,&#xA;                     self,&#xA;                     paycard.LogRecord::$transactionId),&#xA;         Z(0(#)))"/>
      <invariants name="JML class invariant nr 6 in LogRecord" condition="geq(int::select(heap,&#xA;                null,&#xA;                paycard.LogRecord::$transactionCounter),&#xA;    Z(0(#)))"/>
      <methods signature="setRecord(balance : int)" returnType="void">
        <operationContracts name="paycard.LogRecord[paycard.LogRecord::setRecord(int)].JML normal_behavior operation contract.0" proofObligations="//@proofObligations.0" pre="geq(balance, Z(0(#)))&#xA;&amp; java.lang.Object::&lt;inv>(heap, self)" post="int::select(heap,&#xA;                self,&#xA;                paycard.LogRecord::$balance)&#xA;  = balance&#xA;&amp;   int::select(heap,&#xA;                self,&#xA;                paycard.LogRecord::$transactionId)&#xA;  = int::select(heapAtPre,&#xA;                null,&#xA;                paycard.LogRecord::$transactionCounter)&#xA;&amp; java.lang.Object::&lt;inv>(heap, self)&#xA;&amp; exc = null" modifies="mod[heap]: union(union(union(singleton(self,&#xA;                            paycard.LogRecord::$empty),&#xA;                  singleton(self,&#xA;                            paycard.LogRecord::$balance)),&#xA;            singleton(self,&#xA;                      paycard.LogRecord::$transactionId)),&#xA;      singleton(null,&#xA;                paycard.LogRecord::$transactionCounter))" termination="diamond"/>
      </methods>
      <methods signature="getBalance()" returnType="int">
        <operationContracts name="paycard.LogRecord[paycard.LogRecord::getBalance()].JML normal_behavior operation contract.0" proofObligations="//@proofObligations.0" pre="java.lang.Object::&lt;inv>(heap, self)" post="result&#xA;  = int::select(heap,&#xA;                self,&#xA;                paycard.LogRecord::$balance)&#xA;&amp; java.lang.Object::&lt;inv>(heap, self)&#xA;&amp; exc = null" modifies="mod[heap]: empty" termination="diamond"/>
      </methods>
      <methods signature="getTransactionId()" returnType="int">
        <operationContracts name="paycard.LogRecord[paycard.LogRecord::getTransactionId()].JML normal_behavior operation contract.0" proofObligations="//@proofObligations.0" pre="java.lang.Object::&lt;inv>(heap, self)" post="result&#xA;  = int::select(heap,&#xA;                self,&#xA;                paycard.LogRecord::$transactionId)&#xA;&amp; java.lang.Object::&lt;inv>(heap, self)&#xA;&amp; exc = null" modifies="mod[heap]: empty" termination="diamond"/>
      </methods>
      <attributes name="transactionCounter" type="int" visibility="default" static="true"/>
      <attributes name="balance" type="int" visibility="default"/>
      <attributes name="transactionId" type="int" visibility="default"/>
      <attributes name="empty" type="boolean" visibility="default"/>
      <constructors signature="LogRecord()"/>
      <extendsFullNames>java.lang.Object</extendsFullNames>
    </types>
    <types xsi:type="dbcmodel:DbcClass" name="PayCard">
      <invariants name="JML class invariant nr 8 in PayCard" condition="!  paycard.LogFile::select(heap,&#xA;                           self,&#xA;                           paycard.PayCard::$log)&#xA; = null"/>
      <invariants name="JML class invariant nr 9 in PayCard" condition="geq(int::select(heap, self, paycard.PayCard::$balance),&#xA;    Z(0(#)))"/>
      <invariants name="JML class invariant nr 11 in PayCard" condition="gt(int::select(heap, self, paycard.PayCard::$limit),&#xA;   Z(0(#)))"/>
      <invariants name="JML class invariant nr 13 in PayCard" condition="geq(int::select(heap,&#xA;                self,&#xA;                paycard.PayCard::$unsuccessfulOperations),&#xA;    Z(0(#)))"/>
      <methods signature="createJuniorCard()" static="true" returnType="paycard.PayCard">
        <operationContracts name="paycard.PayCard[paycard.PayCard::createJuniorCard()].JML normal_behavior operation contract.0" proofObligations="//@proofObligations.0" pre="true" post="int::select(heap, result, paycard.PayCard::$limit)&#xA;  = Z(0(0(1(#))))&#xA;&amp; !result = null&#xA;&amp; exc = null" modifies="mod[heap]: allLocs" termination="diamond"/>
      </methods>
      <methods signature="charge(amount : int)" returnType="boolean">
        <operationContracts name="paycard.PayCard[paycard.PayCard::charge(int)].JML exceptional_behavior operation contract.0" proofObligations="//@proofObligations.0" pre="leq(amount, Z(0(#)))&#xA;&amp; java.lang.Object::&lt;inv>(heap, self)" post="!exc = null&#xA;&amp; (  (   java.lang.Throwable::instance(exc) = TRUE&#xA;      -> java.lang.Object::&lt;inv>(heap, self))&#xA;   &amp;   java.lang.IllegalArgumentException::instance(exc)&#xA;     = TRUE)" modifies="mod[heap]: allLocs" termination="diamond"/>
        <operationContracts name="paycard.PayCard[paycard.PayCard::charge(int)].JML normal_behavior operation contract.1" proofObligations="//@proofObligations.0" pre="gt(amount, Z(0(#)))&#xA;&amp; (  (  geq(javaAddInt(amount,&#xA;                       int::select(heap,&#xA;                                   self,&#xA;                                   paycard.PayCard::$balance)),&#xA;            int::select(heap,&#xA;                        self,&#xA;                        paycard.PayCard::$limit))&#xA;      |   paycard.PayCard::isValid(heap, self)&#xA;        = \if (false)  \then (TRUE)  \else (FALSE))&#xA;   &amp; java.lang.Object::&lt;inv>(heap, self))" post="result = \if (false)  \then (TRUE)  \else (FALSE)&#xA;&amp; (    int::select(heap,&#xA;                   self,&#xA;                   paycard.PayCard::$unsuccessfulOperations)&#xA;     = javaAddInt(int::select(heapAtPre,&#xA;                              self,&#xA;                              paycard.PayCard::$unsuccessfulOperations),&#xA;                  Z(1(#)))&#xA;   &amp; java.lang.Object::&lt;inv>(heap, self))&#xA;&amp; exc = null" modifies="mod[heap]: singleton(self,&#xA;          paycard.PayCard::$unsuccessfulOperations)" termination="diamond"/>
        <operationContracts name="paycard.PayCard[paycard.PayCard::charge(int)].JML normal_behavior operation contract.0" proofObligations="//@proofObligations.0" pre="gt(amount, Z(0(#)))&#xA;&amp; (  lt(javaAddInt(amount,&#xA;                   int::select(heap,&#xA;                               self,&#xA;                               paycard.PayCard::$balance)),&#xA;        int::select(heap,&#xA;                    self,&#xA;                    paycard.PayCard::$limit))&#xA;   &amp;   paycard.PayCard::isValid(heap, self)&#xA;     = \if (true)  \then (TRUE)  \else (FALSE)&#xA;   &amp; java.lang.Object::&lt;inv>(heap, self))" post="result = \if (true)  \then (TRUE)  \else (FALSE)&#xA;&amp; (    int::select(heap,&#xA;                   self,&#xA;                   paycard.PayCard::$balance)&#xA;     = javaAddInt(amount,&#xA;                  int::select(heapAtPre,&#xA;                              self,&#xA;                              paycard.PayCard::$balance))&#xA;   &amp; java.lang.Object::&lt;inv>(heap, self))&#xA;&amp; exc = null" modifies="mod[heap]: singleton(self, paycard.PayCard::$balance)" termination="diamond"/>
      </methods>
      <methods signature="chargeAndRecord(amount : int)" returnType="void">
        <operationContracts name="paycard.PayCard[paycard.PayCard::chargeAndRecord(int)].JML normal_behavior operation contract.0" proofObligations="//@proofObligations.0" pre="gt(amount, Z(0(#)))&#xA;&amp; java.lang.Object::&lt;inv>(heap, self)" post="geq(int::select(heap,&#xA;                  self,&#xA;                  paycard.PayCard::$balance),&#xA;      int::select(heapAtPre,&#xA;                  self,&#xA;                  paycard.PayCard::$balance))&#xA;&amp; java.lang.Object::&lt;inv>(heap, self)&#xA;&amp; exc = null" modifies="mod[heap]: setMinus(allLocs, freshLocs(heap))" termination="diamond"/>
      </methods>
      <methods signature="isValid()" returnType="boolean">
        <operationContracts name="paycard.PayCard[paycard.PayCard::isValid()].JML normal_behavior operation contract.0" proofObligations="//@proofObligations.0" pre="java.lang.Object::&lt;inv>(heap, self)" post="result&#xA;  = \if (leq(int::select(heap,&#xA;                         self,&#xA;                         paycard.PayCard::$unsuccessfulOperations),&#xA;             Z(3(#))))&#xA;        \then (TRUE)&#xA;        \else (FALSE)&#xA;&amp; java.lang.Object::&lt;inv>(heap, self)&#xA;&amp; exc = null" modifies="mod[heap]: empty" termination="diamond"/>
      </methods>
      <methods signature="infoCardMsg()" returnType="java.lang.String"/>
      <attributes name="limit" type="int" visibility="default"/>
      <attributes name="unsuccessfulOperations" type="int" visibility="default"/>
      <attributes name="id" type="int" visibility="default"/>
      <attributes name="balance" type="int" visibility="default"/>
      <attributes name="log" type="paycard.LogFile" visibility="default"/>
      <constructors signature="PayCard(limit : int)"/>
      <constructors signature="PayCard()"/>
      <extendsFullNames>java.lang.Object</extendsFullNames>
    </types>
  </packages>
  <connectionSettings key="location" value="D:\Forschung\Development\KeY_Master\junit-workspace\KeyConnectionTest_testConnectionToValidLocation\paycard"/>
  <connectionSettings key="packageManagement" value="HIERARCHY"/>
  <connectionSettings key="packageManagementType" value="de.hentschel.visualdbc.datasource.model.DSPackageManagement"/>
  <connectionSettings key="locationType" value="java.io.File"/>
  <proofObligations obligation="ContractPO"/>
</dbcmodel:DbcModel>
